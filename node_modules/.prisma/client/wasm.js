
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.IPOScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  name: 'name',
  companyId: 'companyId',
  status: 'status',
  sector: 'sector',
  industry: 'industry',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  finalPrice: 'finalPrice',
  listingPrice: 'listingPrice',
  currentPrice: 'currentPrice',
  issueSize: 'issueSize',
  lotSize: 'lotSize',
  marketLot: 'marketLot',
  openDate: 'openDate',
  closeDate: 'closeDate',
  listingDate: 'listingDate',
  allotmentDate: 'allotmentDate',
  refundDate: 'refundDate',
  leadManager: 'leadManager',
  registrar: 'registrar',
  faceValue: 'faceValue',
  bookValue: 'bookValue',
  marketCap: 'marketCap',
  peRatio: 'peRatio',
  roe: 'roe',
  reservationDetails: 'reservationDetails',
  aboutCompany: 'aboutCompany',
  objectives: 'objectives',
  risks: 'risks',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GMPScalarFieldEnum = {
  id: 'id',
  ipoId: 'ipoId',
  value: 'value',
  percentage: 'percentage',
  volume: 'volume',
  bidPrice: 'bidPrice',
  askPrice: 'askPrice',
  timestamp: 'timestamp',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionDataScalarFieldEnum = {
  id: 'id',
  ipoId: 'ipoId',
  category: 'category',
  subCategory: 'subCategory',
  quantity: 'quantity',
  bidCount: 'bidCount',
  subscriptionRatio: 'subscriptionRatio',
  timestamp: 'timestamp',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AllotmentDataScalarFieldEnum = {
  id: 'id',
  ipoId: 'ipoId',
  pan: 'pan',
  applicationNumber: 'applicationNumber',
  category: 'category',
  appliedQuantity: 'appliedQuantity',
  allottedQuantity: 'allottedQuantity',
  allottedAmount: 'allottedAmount',
  refundAmount: 'refundAmount',
  allotmentStatus: 'allotmentStatus',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  phone: 'phone',
  pan: 'pan',
  role: 'role',
  isActive: 'isActive',
  isEmailVerified: 'isEmailVerified',
  kycCompleted: 'kycCompleted',
  preferences: 'preferences',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IPOAnalyticsScalarFieldEnum = {
  id: 'id',
  ipoId: 'ipoId',
  symbol: 'symbol',
  date: 'date',
  avgGMP: 'avgGMP',
  maxGMP: 'maxGMP',
  minGMP: 'minGMP',
  gmpVolume: 'gmpVolume',
  gmpTrend: 'gmpTrend',
  overallSubscription: 'overallSubscription',
  retailSubscription: 'retailSubscription',
  qibSubscription: 'qibSubscription',
  hniSubscription: 'hniSubscription',
  marketSentiment: 'marketSentiment',
  sentimentScore: 'sentimentScore',
  listingGain: 'listingGain',
  currentReturn: 'currentReturn',
  volatilityIndex: 'volatilityIndex',
  totalGMPChanges: 'totalGMPChanges',
  totalSubscriptions: 'totalSubscriptions',
  oversubscribedCount: 'oversubscribedCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserWatchlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipoId: 'ipoId',
  notes: 'notes',
  alertPreferences: 'alertPreferences',
  addedAt: 'addedAt'
};

exports.Prisma.UserAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipoId: 'ipoId',
  symbol: 'symbol',
  alertType: 'alertType',
  triggerType: 'triggerType',
  triggerValue: 'triggerValue',
  triggerCondition: 'triggerCondition',
  message: 'message',
  isActive: 'isActive',
  lastTriggered: 'lastTriggered',
  triggerCount: 'triggerCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiLogScalarFieldEnum = {
  id: 'id',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  errorMessage: 'errorMessage',
  requestData: 'requestData',
  responseData: 'responseData',
  timestamp: 'timestamp'
};

exports.Prisma.MarketStatusScalarFieldEnum = {
  id: 'id',
  exchange: 'exchange',
  isOpen: 'isOpen',
  openTime: 'openTime',
  closeTime: 'closeTime',
  timezone: 'timezone',
  holidays: 'holidays',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.CacheEntryScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  expiresAt: 'expiresAt',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  source: 'source',
  type: 'type',
  status: 'status',
  recordsProcessed: 'recordsProcessed',
  recordsSuccess: 'recordsSuccess',
  recordsError: 'recordsError',
  errorDetails: 'errorDetails',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  duration: 'duration',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  IPO: 'IPO',
  GMP: 'GMP',
  SubscriptionData: 'SubscriptionData',
  AllotmentData: 'AllotmentData',
  User: 'User',
  Session: 'Session',
  IPOAnalytics: 'IPOAnalytics',
  UserWatchlist: 'UserWatchlist',
  UserAlert: 'UserAlert',
  SystemConfig: 'SystemConfig',
  ApiLog: 'ApiLog',
  MarketStatus: 'MarketStatus',
  CacheEntry: 'CacheEntry',
  SyncLog: 'SyncLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
