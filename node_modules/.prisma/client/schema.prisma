// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IPO {
  id        String  @id @default(cuid())
  symbol    String  @unique
  name      String
  companyId String?
  status    String // upcoming, open, closed, listed, withdrawn, cancelled
  sector    String?
  industry  String?

  // Pricing information
  minPrice     Float
  maxPrice     Float
  finalPrice   Float?
  listingPrice Float?
  currentPrice Float?

  // Size and lot information
  issueSize BigInt
  lotSize   Int
  marketLot Int

  // Important dates
  openDate      DateTime
  closeDate     DateTime
  listingDate   DateTime?
  allotmentDate DateTime?
  refundDate    DateTime?

  // Participants and intermediaries
  leadManager String?
  registrar   String?

  // Company financials (optional)
  faceValue Float?
  bookValue Float?
  marketCap BigInt?
  peRatio   Float?
  roe       Float?

  // IPO specific details
  reservationDetails String? // JSON string
  aboutCompany       String?
  objectives         String?
  risks              String?

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - These field names match what your API should use
  gmpData          GMP[]
  subscriptionData SubscriptionData[]
  allotmentData    AllotmentData[]
  analytics        IPOAnalytics[]
  watchlists       UserWatchlist[]
  alerts           UserAlert[]

  @@map("ipos")
}

model GMP {
  id         String   @id @default(cuid())
  ipoId      String
  value      Float // Premium/discount in rupees
  percentage Float // Premium/discount as percentage
  volume     Int? // Trading volume
  bidPrice   Float? // Buyer's price
  askPrice   Float? // Seller's price
  timestamp  DateTime
  source     String // Data source
  metadata   String? // JSON metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  ipo IPO @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@index([ipoId, timestamp])
  @@map("gmp_data")
}

model SubscriptionData {
  id                String   @id @default(cuid())
  ipoId             String
  category          String // RETAIL, QIB, HNI, EMPLOYEE, SHAREHOLDER, OVERALL
  subCategory       String? // Additional subdivision
  quantity          BigInt // Total quantity bid
  bidCount          Int // Number of bids
  subscriptionRatio Float // Times oversubscribed
  timestamp         DateTime
  metadata          String? // JSON metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ipo IPO @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@index([ipoId, timestamp])
  @@index([category, timestamp])
  @@map("subscription_data")
}

model AllotmentData {
  id                String   @id @default(cuid())
  ipoId             String
  pan               String
  applicationNumber String?
  category          String // RETAIL, QIB, HNI
  appliedQuantity   Int
  allottedQuantity  Int      @default(0)
  allottedAmount    Float    @default(0)
  refundAmount      Float    @default(0)
  allotmentStatus   String // ALLOTTED, NOT_ALLOTTED, REFUND, PENDING
  timestamp         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ipo IPO @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@index([ipoId, pan])
  @@index([pan, allotmentStatus])
  @@map("allotment_data")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  phone           String?
  pan             String?
  role            String    @default("user") // user, admin, super_admin
  isActive        Boolean   @default(true)
  isEmailVerified Boolean   @default(false)
  kycCompleted    Boolean   @default(false)
  preferences     String? // JSON preferences
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  watchlists UserWatchlist[]
  alerts     UserAlert[]
  sessions   Session[]

  @@index([email])
  @@index([pan])
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Renamed from Analytics to IPOAnalytics to match your API usage
model IPOAnalytics {
  id     String   @id @default(cuid())
  ipoId  String
  symbol String?
  date   DateTime

  // GMP Analytics
  avgGMP    Float?
  maxGMP    Float?
  minGMP    Float?
  gmpVolume Int?
  gmpTrend  String? // bullish, bearish, stable

  // Subscription Analytics
  overallSubscription Float?
  retailSubscription  Float?
  qibSubscription     Float?
  hniSubscription     Float?

  // Market Analytics
  marketSentiment String? // positive, negative, neutral
  sentimentScore  Float?

  // Performance Analytics
  listingGain     Float?
  currentReturn   Float?
  volatilityIndex Float?

  // Statistics
  totalGMPChanges     Int @default(0)
  totalSubscriptions  Int @default(0)
  oversubscribedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ipo IPO @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@index([ipoId, date])
  @@index([symbol, date])
  @@map("ipo_analytics")
}

model UserWatchlist {
  id               String   @id @default(cuid())
  userId           String
  ipoId            String
  notes            String?
  alertPreferences String? // JSON alert preferences
  addedAt          DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipo  IPO  @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@unique([userId, ipoId])
  @@index([userId])
  @@index([ipoId])
  @@map("user_watchlists")
}

model UserAlert {
  id               String    @id @default(cuid())
  userId           String
  ipoId            String?
  symbol           String?
  alertType        String // gmp_change, subscription_milestone, status_update
  triggerType      String // above, below, change, milestone
  triggerValue     Float?
  triggerCondition String? // JSON condition
  message          String?
  isActive         Boolean   @default(true)
  lastTriggered    DateTime?
  triggerCount     Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipo  IPO? @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([ipoId, alertType])
  @@map("user_alerts")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String? // feature_flag, api_config, cache_config
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}

model ApiLog {
  id           String   @id @default(cuid())
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int // in milliseconds
  ipAddress    String?
  userAgent    String?
  userId       String?
  errorMessage String?
  requestData  String? // JSON request data
  responseData String? // JSON response data
  timestamp    DateTime @default(now())

  @@index([endpoint, timestamp])
  @@index([statusCode, timestamp])
  @@index([userId, timestamp])
  @@map("api_logs")
}

model MarketStatus {
  id          String    @id @default(cuid())
  exchange    String // NSE, BSE
  isOpen      Boolean
  openTime    DateTime?
  closeTime   DateTime?
  timezone    String    @default("Asia/Kolkata")
  holidays    String? // JSON array of holidays
  lastUpdated DateTime  @default(now())

  @@unique([exchange])
  @@map("market_status")
}

// Additional models that might be needed based on your API usage

model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String // JSON cached data
  expiresAt DateTime
  tags      String? // JSON array of cache tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@index([key, expiresAt])
  @@map("cache_entries")
}

model SyncLog {
  id               String    @id @default(cuid())
  source           String // nse_api, manual, automated
  type             String // gmp_sync, subscription_sync, ipo_sync
  status           String // success, error, pending
  recordsProcessed Int       @default(0)
  recordsSuccess   Int       @default(0)
  recordsError     Int       @default(0)
  errorDetails     String? // JSON error details
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  duration         Int? // in milliseconds
  metadata         String? // JSON metadata

  @@index([source, type, status])
  @@index([startedAt])
  @@map("sync_logs")
}
