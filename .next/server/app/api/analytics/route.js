"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analytics/route";
exports.ids = ["app/api/analytics/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_analytics_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/analytics/route.js */ \"(rsc)/./src/app/api/analytics/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analytics/route\",\n        pathname: \"/api/analytics\",\n        filename: \"route\",\n        bundlePath: \"app/api/analytics/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\IPOs\\\\ipo-tracker\\\\src\\\\app\\\\api\\\\analytics\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_analytics_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analytics/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXRpY3MlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFuYWx5dGljcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFuYWx5dGljcyUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNocCU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0lQT3MlNUNpcG8tdHJhY2tlciU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDaHAlNUNPbmVEcml2ZSU1Q0Rlc2t0b3AlNUNJUE9zJTVDaXBvLXRyYWNrZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXBvLXRyYWNrZXIvPzcxODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcaHBcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxJUE9zXFxcXGlwby10cmFja2VyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFuYWx5dGljc1xcXFxyb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYW5hbHl0aWNzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl0aWNzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXRpY3Mvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxocFxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXElQT3NcXFxcaXBvLXRyYWNrZXJcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl0aWNzXFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hbmFseXRpY3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/analytics/route.js":
/*!****************************************!*\
  !*** ./src/app/api/analytics/route.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _lib_auth_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/auth.js */ \"(rsc)/./src/lib/auth.js\");\n/* harmony import */ var _lib_analytics_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/analytics.js */ \"(rsc)/./src/lib/analytics.js\");\n\n\n\n\n\n// Get analytics data with filtering and aggregation\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const ipoId = searchParams.get(\"ipoId\");\n        const symbol = searchParams.get(\"symbol\");\n        const timeRange = parseInt(searchParams.get(\"timeRange\")) || 30;\n        const metrics = searchParams.get(\"metrics\")?.split(\",\") || [\n            \"all\"\n        ];\n        const includeHistorical = searchParams.get(\"includeHistorical\") !== \"false\";\n        const includePredictions = searchParams.get(\"includePredictions\") === \"true\";\n        const aggregateLevel = searchParams.get(\"aggregateLevel\") || \"daily\";\n        // Build cache key\n        const cacheKey = _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.key(\"ANALYTICS\", `data:${JSON.stringify({\n            ipoId,\n            symbol,\n            timeRange,\n            metrics,\n            includeHistorical,\n            includePredictions,\n            aggregateLevel\n        })}`);\n        // Try cache first\n        const cached = await _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.get(cacheKey);\n        if (cached) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                ...cached,\n                cached: true\n            });\n        }\n        let analyticsData;\n        if (ipoId || symbol) {\n            // Single IPO analytics\n            const targetIpoId = ipoId || (await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findUnique({\n                where: {\n                    symbol: symbol.toUpperCase()\n                },\n                select: {\n                    id: true\n                }\n            }))?.id;\n            if (!targetIpoId) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"IPO not found\"\n                }, {\n                    status: 404\n                });\n            }\n            analyticsData = await _lib_analytics_js__WEBPACK_IMPORTED_MODULE_4__.analyticsService.computeIPOAnalytics(targetIpoId, {\n                includeHistorical,\n                includePredictions,\n                timeRange,\n                lightweight: false\n            });\n        } else {\n            // Market-wide analytics\n            analyticsData = await generateMarketAnalytics({\n                timeRange,\n                metrics,\n                aggregateLevel\n            });\n        }\n        // Filter metrics if specific ones requested\n        if (!metrics.includes(\"all\")) {\n            analyticsData = filterMetrics(analyticsData, metrics);\n        }\n        const response = {\n            success: true,\n            data: analyticsData,\n            metadata: {\n                ipoId,\n                symbol,\n                timeRange,\n                metrics,\n                includeHistorical,\n                includePredictions,\n                aggregateLevel,\n                generatedAt: new Date().toISOString()\n            }\n        };\n        // Cache for 5 minutes\n        await _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.set(cacheKey, response, 300);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"GET /api/analytics error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch analytics\",\n            message:  true ? error.message : 0\n        }, {\n            status: 500\n        });\n    }\n}\n// Trigger analytics computation (Admin only)\nasync function POST(request) {\n    try {\n        const authResult = await (0,_lib_auth_js__WEBPACK_IMPORTED_MODULE_3__.requireAuth)({\n            roles: [\n                \"admin\",\n                \"super_admin\"\n            ]\n        })(request);\n        if (authResult instanceof next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse) return authResult;\n        const body = await request.json();\n        const { action, ipoId, options = {} } = body;\n        let result;\n        switch(action){\n            case \"compute\":\n                if (!ipoId) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: \"IPO ID is required for compute action\"\n                    }, {\n                        status: 400\n                    });\n                }\n                result = await _lib_analytics_js__WEBPACK_IMPORTED_MODULE_4__.analyticsService.computeIPOAnalytics(ipoId, {\n                    includeHistorical: true,\n                    includePredictions: true,\n                    forceRefresh: true,\n                    ...options\n                });\n                break;\n            case \"refresh_all\":\n                const activeIPOs = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                    where: {\n                        isActive: true\n                    },\n                    select: {\n                        id: true,\n                        symbol: true\n                    }\n                });\n                const refreshResults = await Promise.allSettled(activeIPOs.map((ipo)=>_lib_analytics_js__WEBPACK_IMPORTED_MODULE_4__.analyticsService.computeIPOAnalytics(ipo.id, {\n                        includeHistorical: false,\n                        includePredictions: false,\n                        lightweight: true\n                    })));\n                const successful = refreshResults.filter((r)=>r.status === \"fulfilled\").length;\n                const failed = refreshResults.filter((r)=>r.status === \"rejected\").length;\n                result = {\n                    refreshed: successful,\n                    failed,\n                    total: activeIPOs.length\n                };\n                break;\n            case \"cleanup\":\n                const cleanupResult = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPOAnalytics.deleteMany({\n                    where: {\n                        updatedAt: {\n                            lt: new Date(Date.now() - options.olderThanDays * 24 * 60 * 60 * 1000)\n                        }\n                    }\n                });\n                result = {\n                    cleaned: cleanupResult.count\n                };\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Invalid action\",\n                    availableActions: [\n                        \"compute\",\n                        \"refresh_all\",\n                        \"cleanup\"\n                    ]\n                }, {\n                    status: 400\n                });\n        }\n        // Clear relevant caches\n        await _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.del(_lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.key(\"ANALYTICS\", \"*\"));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            action,\n            result,\n            message: `Analytics ${action} completed successfully`,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"POST /api/analytics error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to process analytics action\",\n            message:  true ? error.message : 0\n        }, {\n            status: 500\n        });\n    }\n}\n// Generate market-wide analytics\nasync function generateMarketAnalytics({ timeRange, metrics, aggregateLevel }) {\n    const timeRangeMs = timeRange * 24 * 60 * 60 * 1000;\n    const since = new Date(Date.now() - timeRangeMs);\n    const [ipoStats, gmpStats, subscriptionStats, performanceStats] = await Promise.all([\n        getIPOStatistics(since),\n        getGMPStatistics(since),\n        getSubscriptionStatistics(since),\n        getPerformanceStatistics(since)\n    ]);\n    return {\n        timeRange,\n        aggregateLevel,\n        ipoMarket: ipoStats,\n        gmpTrends: gmpStats,\n        subscriptionTrends: subscriptionStats,\n        performance: performanceStats,\n        summary: {\n            totalIPOs: ipoStats.total,\n            activeIPOs: ipoStats.active,\n            avgGMP: gmpStats.average,\n            avgSubscription: subscriptionStats.average,\n            topPerformer: performanceStats.best?.symbol,\n            marketSentiment: calculateMarketSentiment(gmpStats, subscriptionStats)\n        }\n    };\n}\n// Get IPO statistics\nasync function getIPOStatistics(since) {\n    const [total, active, byStatus, bySector] = await Promise.all([\n        _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.count({\n            where: {\n                isActive: true\n            }\n        }),\n        _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.count({\n            where: {\n                isActive: true,\n                status: \"open\"\n            }\n        }),\n        _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.groupBy({\n            by: [\n                \"status\"\n            ],\n            where: {\n                isActive: true,\n                createdAt: {\n                    gte: since\n                }\n            },\n            _count: {\n                status: true\n            }\n        }),\n        _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.groupBy({\n            by: [\n                \"sector\"\n            ],\n            where: {\n                isActive: true,\n                createdAt: {\n                    gte: since\n                }\n            },\n            _count: {\n                sector: true\n            }\n        })\n    ]);\n    return {\n        total,\n        active,\n        byStatus: Object.fromEntries(byStatus.map((s)=>[\n                s.status,\n                s._count.status\n            ])),\n        bySector: Object.fromEntries(bySector.map((s)=>[\n                s.sector,\n                s._count.sector\n            ]).slice(0, 10))\n    };\n}\n// Get GMP statistics\nasync function getGMPStatistics(since) {\n    const gmpData = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.gMP.findMany({\n        where: {\n            timestamp: {\n                gte: since\n            }\n        },\n        select: {\n            value: true,\n            volume: true,\n            timestamp: true\n        }\n    });\n    if (gmpData.length === 0) return {\n        average: 0,\n        volume: 0,\n        trend: \"stable\"\n    };\n    const values = gmpData.map((g)=>g.value);\n    const volumes = gmpData.map((g)=>g.volume || 0);\n    return {\n        average: Math.round(values.reduce((a, b)=>a + b, 0) / values.length),\n        totalVolume: volumes.reduce((a, b)=>a + b, 0),\n        highest: Math.max(...values),\n        lowest: Math.min(...values),\n        trend: calculateTrend(values),\n        recordCount: gmpData.length\n    };\n}\n// Get subscription statistics\nasync function getSubscriptionStatistics(since) {\n    const subscriptionData = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.subscriptionData.findMany({\n        where: {\n            timestamp: {\n                gte: since\n            }\n        },\n        select: {\n            subscriptionRatio: true,\n            category: true\n        }\n    });\n    if (subscriptionData.length === 0) return {\n        average: 0,\n        trend: \"stable\"\n    };\n    const ratios = subscriptionData.map((s)=>s.subscriptionRatio);\n    const byCategory = {};\n    subscriptionData.forEach((s)=>{\n        if (!byCategory[s.category]) byCategory[s.category] = [];\n        byCategory[s.category].push(s.subscriptionRatio);\n    });\n    return {\n        average: Math.round(ratios.reduce((a, b)=>a + b, 0) / ratios.length * 100) / 100,\n        highest: Math.max(...ratios),\n        oversubscribed: ratios.filter((r)=>r > 1).length,\n        byCategory: Object.fromEntries(Object.entries(byCategory).map(([cat, ratios])=>[\n                cat,\n                Math.round(ratios.reduce((a, b)=>a + b, 0) / ratios.length * 100) / 100\n            ])),\n        trend: calculateTrend(ratios)\n    };\n}\n// Get performance statistics\nasync function getPerformanceStatistics(since) {\n    const listedIPOs = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n        where: {\n            status: \"listed\",\n            listingDate: {\n                gte: since\n            },\n            listingPrice: {\n                not: null\n            }\n        },\n        select: {\n            symbol: true,\n            name: true,\n            maxPrice: true,\n            listingPrice: true\n        }\n    });\n    if (listedIPOs.length === 0) return {\n        best: null,\n        worst: null,\n        average: 0\n    };\n    const performances = listedIPOs.map((ipo)=>({\n            ...ipo,\n            gain: (ipo.listingPrice - ipo.maxPrice) / ipo.maxPrice * 100\n        }));\n    performances.sort((a, b)=>b.gain - a.gain);\n    return {\n        best: performances[0],\n        worst: performances[performances.length - 1],\n        average: Math.round(performances.reduce((sum, p)=>sum + p.gain, 0) / performances.length * 100) / 100,\n        positive: performances.filter((p)=>p.gain > 0).length,\n        negative: performances.filter((p)=>p.gain < 0).length,\n        count: performances.length\n    };\n}\n// Calculate trend from values\nfunction calculateTrend(values) {\n    if (values.length < 2) return \"stable\";\n    const mid = Math.floor(values.length / 2);\n    const firstHalf = values.slice(0, mid);\n    const secondHalf = values.slice(mid);\n    const firstAvg = firstHalf.reduce((a, b)=>a + b, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((a, b)=>a + b, 0) / secondHalf.length;\n    const change = (secondAvg - firstAvg) / firstAvg * 100;\n    if (change > 5) return \"increasing\";\n    if (change < -5) return \"decreasing\";\n    return \"stable\";\n}\n// Calculate market sentiment\nfunction calculateMarketSentiment(gmpStats, subscriptionStats) {\n    let score = 50; // Neutral base\n    if (gmpStats.average > 50) score += 20;\n    else if (gmpStats.average < 0) score -= 20;\n    if (subscriptionStats.average > 3) score += 15;\n    else if (subscriptionStats.average < 1) score -= 15;\n    if (gmpStats.trend === \"increasing\") score += 10;\n    else if (gmpStats.trend === \"decreasing\") score -= 10;\n    if (score > 70) return \"very_positive\";\n    if (score > 55) return \"positive\";\n    if (score < 30) return \"very_negative\";\n    if (score < 45) return \"negative\";\n    return \"neutral\";\n}\n// Filter metrics based on request\nfunction filterMetrics(data, requestedMetrics) {\n    const filtered = {};\n    requestedMetrics.forEach((metric)=>{\n        if (data[metric]) {\n            filtered[metric] = data[metric];\n        }\n    });\n    return Object.keys(filtered).length > 0 ? filtered : data;\n}\nconst config = {\n    api: {\n        bodyParser: {\n            sizeLimit: \"1mb\"\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analytics/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/analytics.js":
/*!******************************!*\
  !*** ./src/lib/analytics.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyticsService: () => (/* binding */ analyticsService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./src/lib/cache.js\");\n\n\nclass AnalyticsService {\n    constructor(){\n        // Performance metrics\n        this.metrics = {\n            computationsPerformed: 0,\n            cacheHits: 0,\n            cacheMisses: 0,\n            averageComputationTime: 0,\n            errors: 0\n        };\n        // Analytics cache with TTL\n        this.analyticsCache = new Map();\n        this.cacheTTL = {\n            BASIC: 5 * 60 * 1000,\n            DETAILED: 10 * 60 * 1000,\n            HISTORICAL: 30 * 60 * 1000,\n            PREDICTIONS: 15 * 60 * 1000\n        };\n        // Risk assessment weights\n        this.riskWeights = {\n            GMP_VOLATILITY: 0.3,\n            SUBSCRIPTION_RATIO: 0.25,\n            ISSUE_SIZE: 0.2,\n            MARKET_CONDITIONS: 0.15,\n            SECTOR_PERFORMANCE: 0.1\n        };\n        // Prediction models configuration\n        this.predictionModels = {\n            LISTING_GAIN: {\n                factors: [\n                    \"avgGMP\",\n                    \"subscriptionRatio\",\n                    \"issueSize\",\n                    \"marketSentiment\"\n                ],\n                weights: [\n                    0.4,\n                    0.3,\n                    0.2,\n                    0.1\n                ]\n            },\n            ALLOTMENT_PROBABILITY: {\n                factors: [\n                    \"subscriptionRatio\",\n                    \"applicationAmount\",\n                    \"category\"\n                ],\n                weights: [\n                    0.6,\n                    0.3,\n                    0.1\n                ]\n            }\n        };\n    }\n    // Comprehensive IPO analytics computation\n    async computeIPOAnalytics(ipoId, options = {}) {\n        const startTime = Date.now();\n        try {\n            const { includeHistorical = true, includePredictions = true, timeRange = 30, refreshCache = false } = options;\n            // Check cache first\n            const cacheKey = `analytics:${ipoId}:${timeRange}:${includeHistorical}:${includePredictions}`;\n            if (!refreshCache) {\n                const cached = await this.getCachedAnalytics(cacheKey);\n                if (cached) {\n                    this.metrics.cacheHits++;\n                    return cached;\n                }\n            }\n            this.metrics.cacheMisses++;\n            // Fetch comprehensive data\n            const [ipoData, gmpData, subscriptionData, demandData, categoryData] = await Promise.all([\n                this.getIPOBasicData(ipoId),\n                this.getGMPData(ipoId, timeRange),\n                this.getSubscriptionData(ipoId, timeRange),\n                this.getDemandData(ipoId, timeRange),\n                this.getIPOCategories(ipoId)\n            ]);\n            if (!ipoData) {\n                throw new Error(`IPO with ID ${ipoId} not found`);\n            }\n            // Compute analytics\n            const analytics = {\n                ipoId,\n                symbol: ipoData.symbol,\n                name: ipoData.name,\n                status: ipoData.status,\n                computedAt: new Date().toISOString(),\n                // Basic metrics\n                basicMetrics: this.computeBasicMetrics(ipoData),\n                // GMP analytics\n                gmpAnalytics: this.computeGMPAnalytics(gmpData),\n                // Subscription analytics\n                subscriptionAnalytics: this.computeSubscriptionAnalytics(subscriptionData, categoryData),\n                // Market demand analytics\n                demandAnalytics: this.computeDemandAnalytics(demandData),\n                // Risk assessment\n                riskAssessment: this.computeRiskAssessment(ipoData, gmpData, subscriptionData),\n                // Performance indicators\n                performanceIndicators: this.computePerformanceIndicators(ipoData, gmpData, subscriptionData)\n            };\n            // Add historical analysis\n            if (includeHistorical) {\n                analytics.historicalAnalysis = await this.computeHistoricalAnalysis(ipoId, timeRange);\n            }\n            // Add predictions\n            if (includePredictions) {\n                analytics.predictions = await this.computePredictions(analytics);\n            }\n            // Add comparative analysis\n            analytics.comparativeAnalysis = await this.computeComparativeAnalysis(ipoData);\n            // Add insights and recommendations\n            analytics.insights = this.generateInsights(analytics);\n            analytics.recommendations = this.generateRecommendations(analytics);\n            // Cache the results\n            await this.setCachedAnalytics(cacheKey, analytics, this.cacheTTL.DETAILED);\n            // Update metrics\n            const computationTime = Date.now() - startTime;\n            this.updateMetrics(computationTime);\n            return analytics;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(`Analytics computation failed for IPO ${ipoId}:`, error);\n            throw error;\n        }\n    }\n    // Basic IPO metrics computation\n    computeBasicMetrics(ipoData) {\n        const priceRange = ipoData.maxPrice - ipoData.minPrice;\n        const issueSize = Number(ipoData.issueSize || 0);\n        const lotValue = ipoData.lotSize * (ipoData.maxPrice || 0);\n        return {\n            priceRange: {\n                min: ipoData.minPrice,\n                max: ipoData.maxPrice,\n                spread: priceRange,\n                spreadPercentage: ipoData.minPrice > 0 ? parseFloat((priceRange / ipoData.minPrice * 100).toFixed(2)) : 0\n            },\n            issue: {\n                size: issueSize,\n                sizeCategory: this.categorizeIssueSize(issueSize),\n                lotSize: ipoData.lotSize,\n                lotValue,\n                faceValue: ipoData.faceValue\n            },\n            timeline: {\n                openDate: ipoData.openDate,\n                closeDate: ipoData.closeDate,\n                listingDate: ipoData.listingDate,\n                durationDays: this.calculateDuration(ipoData.openDate, ipoData.closeDate),\n                daysToListing: ipoData.listingDate ? this.calculateDuration(ipoData.closeDate, ipoData.listingDate) : null\n            },\n            type: {\n                issueType: ipoData.issueType,\n                subType: ipoData.subType,\n                registrar: ipoData.registrar\n            }\n        };\n    }\n    // GMP analytics computation\n    computeGMPAnalytics(gmpData) {\n        if (!gmpData || gmpData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No GMP data available\"\n            };\n        }\n        const values = gmpData.map((g)=>g.value);\n        const percentages = gmpData.map((g)=>g.percentage);\n        const volumes = gmpData.map((g)=>g.volume || 0);\n        // Statistical measures\n        const stats = {\n            current: values[0] || 0,\n            average: this.calculateAverage(values),\n            median: this.calculateMedian(values),\n            mode: this.calculateMode(values),\n            min: Math.min(...values),\n            max: Math.max(...values),\n            range: Math.max(...values) - Math.min(...values),\n            standardDeviation: this.calculateStandardDeviation(values),\n            variance: this.calculateVariance(values),\n            coefficient: this.calculateCoefficientOfVariation(values)\n        };\n        // Trend analysis\n        const trend = this.analyzeTrend(values);\n        // Volatility analysis\n        const volatility = this.analyzeVolatility(values, gmpData.map((g)=>g.timestamp));\n        // Volume analysis\n        const volumeAnalysis = this.analyzeVolume(volumes, values);\n        // Price momentum\n        const momentum = this.calculateMomentum(values);\n        return {\n            status: \"available\",\n            recordCount: gmpData.length,\n            timespan: this.calculateTimespan(gmpData),\n            statistics: stats,\n            trend,\n            volatility,\n            volumeAnalysis,\n            momentum,\n            priceTargets: this.calculatePriceTargets(stats),\n            riskMetrics: this.calculateGMPRiskMetrics(values)\n        };\n    }\n    // Subscription analytics computation\n    computeSubscriptionAnalytics(subscriptionData, categoryData) {\n        if (!subscriptionData || subscriptionData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No subscription data available\"\n            };\n        }\n        // Get latest subscription by category\n        const latestByCategory = this.getLatestSubscriptionByCategory(subscriptionData);\n        // Overall subscription metrics\n        const overallMetrics = {\n            totalSubscription: this.calculateOverallSubscription(latestByCategory),\n            isOversubscribed: false,\n            oversubscriptionRatio: 0,\n            totalApplications: 0,\n            totalQuantity: BigInt(0)\n        };\n        overallMetrics.isOversubscribed = overallMetrics.totalSubscription > 1;\n        overallMetrics.oversubscriptionRatio = Math.max(0, overallMetrics.totalSubscription - 1);\n        // Category-wise analysis\n        const categoryAnalysis = {};\n        for (const [category, data] of Object.entries(latestByCategory)){\n            categoryAnalysis[category] = {\n                subscriptionRatio: data.subscriptionRatio,\n                quantity: data.quantity.toString(),\n                bidCount: data.bidCount,\n                averageBidSize: data.bidCount > 0 ? Number(data.quantity) / data.bidCount : 0,\n                timestamp: data.timestamp\n            };\n            overallMetrics.totalApplications += data.bidCount;\n            overallMetrics.totalQuantity += data.quantity;\n        }\n        // Subscription pattern analysis\n        const patterns = this.analyzeSubscriptionPatterns(subscriptionData);\n        // Allotment probability calculation\n        const allotmentProbability = this.calculateAllotmentProbabilities(latestByCategory);\n        return {\n            status: \"available\",\n            recordCount: subscriptionData.length,\n            overall: overallMetrics,\n            categories: categoryAnalysis,\n            patterns,\n            allotmentProbability,\n            insights: this.generateSubscriptionInsights(overallMetrics, categoryAnalysis)\n        };\n    }\n    // Market demand analytics computation\n    computeDemandAnalytics(demandData) {\n        if (!demandData || demandData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No demand data available\"\n            };\n        }\n        // Price-wise demand analysis\n        const priceWiseDemand = this.analyzePriceWiseDemand(demandData);\n        // Cut-off analysis\n        const cutOffAnalysis = this.analyzeCutOffDemand(demandData);\n        // Demand distribution\n        const distribution = this.analyzeDemandDistribution(demandData);\n        // Bid concentration\n        const concentration = this.analyzeBidConcentration(demandData);\n        return {\n            status: \"available\",\n            recordCount: demandData.length,\n            priceWiseDemand,\n            cutOffAnalysis,\n            distribution,\n            concentration,\n            summary: {\n                totalQuantity: demandData.reduce((sum, d)=>sum + Number(d.absoluteQuantity), 0),\n                totalBids: demandData.reduce((sum, d)=>sum + d.absoluteBidCount, 0),\n                priceRange: {\n                    min: Math.min(...demandData.map((d)=>d.price).filter((p)=>p !== null)),\n                    max: Math.max(...demandData.map((d)=>d.price).filter((p)=>p !== null))\n                }\n            }\n        };\n    }\n    // Risk assessment computation\n    computeRiskAssessment(ipoData, gmpData, subscriptionData) {\n        let riskScore = 50; // Base risk score\n        const riskFactors = [];\n        // GMP volatility risk\n        if (gmpData && gmpData.length > 1) {\n            const gmpValues = gmpData.map((g)=>g.value);\n            const volatility = this.calculateStandardDeviation(gmpValues);\n            const avgGMP = this.calculateAverage(gmpValues);\n            const volatilityRatio = avgGMP > 0 ? volatility / avgGMP : 0;\n            if (volatilityRatio > 0.3) {\n                riskScore += 20;\n                riskFactors.push({\n                    type: \"HIGH_GMP_VOLATILITY\",\n                    impact: \"high\",\n                    description: `High GMP volatility (${(volatilityRatio * 100).toFixed(1)}%)`,\n                    mitigation: \"Consider waiting for price stabilization\"\n                });\n            } else if (volatilityRatio > 0.15) {\n                riskScore += 10;\n                riskFactors.push({\n                    type: \"MODERATE_GMP_VOLATILITY\",\n                    impact: \"medium\",\n                    description: `Moderate GMP volatility (${(volatilityRatio * 100).toFixed(1)}%)`,\n                    mitigation: \"Monitor GMP trends closely\"\n                });\n            }\n        }\n        // Subscription risk\n        if (subscriptionData && subscriptionData.length > 0) {\n            const latestSubscription = this.getLatestSubscriptionByCategory(subscriptionData);\n            const overallSubscription = this.calculateOverallSubscription(latestSubscription);\n            if (overallSubscription < 0.5) {\n                riskScore += 25;\n                riskFactors.push({\n                    type: \"LOW_SUBSCRIPTION\",\n                    impact: \"high\",\n                    description: `Low subscription ratio (${overallSubscription.toFixed(2)}x)`,\n                    mitigation: \"Reconsider investment due to weak demand\"\n                });\n            } else if (overallSubscription > 10) {\n                riskScore += 15;\n                riskFactors.push({\n                    type: \"OVER_SUBSCRIPTION\",\n                    impact: \"medium\",\n                    description: `Very high subscription (${overallSubscription.toFixed(2)}x)`,\n                    mitigation: \"Low allotment probability, consider alternatives\"\n                });\n            }\n        }\n        // Issue size risk\n        const issueSize = Number(ipoData.issueSize || 0);\n        if (issueSize > 5000 * 10000000) {\n            // 5000 Cr\n            riskScore += 10;\n            riskFactors.push({\n                type: \"LARGE_ISSUE_SIZE\",\n                impact: \"medium\",\n                description: \"Large issue size may impact liquidity\",\n                mitigation: \"Ensure adequate market support post-listing\"\n            });\n        }\n        // Price band risk\n        const priceRange = ipoData.maxPrice - ipoData.minPrice;\n        const spreadPercentage = ipoData.minPrice > 0 ? priceRange / ipoData.minPrice * 100 : 0;\n        if (spreadPercentage > 20) {\n            riskScore += 5;\n            riskFactors.push({\n                type: \"WIDE_PRICE_BAND\",\n                impact: \"low\",\n                description: `Wide price band (${spreadPercentage.toFixed(1)}%)`,\n                mitigation: \"Price discovery may be challenging\"\n            });\n        }\n        // Normalize risk score\n        riskScore = Math.max(0, Math.min(100, riskScore));\n        return {\n            overallRiskScore: riskScore,\n            riskLevel: this.categorizeRiskLevel(riskScore),\n            riskFactors,\n            recommendation: this.generateRiskRecommendation(riskScore, riskFactors),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    // Performance indicators computation\n    computePerformanceIndicators(ipoData, gmpData, subscriptionData) {\n        const indicators = {};\n        // Market sentiment indicator\n        indicators.marketSentiment = this.calculateMarketSentiment(gmpData, subscriptionData);\n        // Demand strength indicator\n        indicators.demandStrength = this.calculateDemandStrength(subscriptionData);\n        // Price momentum indicator\n        if (gmpData && gmpData.length > 0) {\n            indicators.priceMomentum = this.calculateMomentum(gmpData.map((g)=>g.value));\n        }\n        // Listing readiness indicator\n        indicators.listingReadiness = this.calculateListingReadiness(ipoData, subscriptionData);\n        // Investment attractiveness score\n        indicators.attractivenessScore = this.calculateAttractivenessScore(indicators);\n        return indicators;\n    }\n    // Historical analysis computation\n    async computeHistoricalAnalysis(ipoId, timeRange) {\n        try {\n            // Get comparable IPOs for benchmarking\n            const comparableIPOs = await this.getComparableIPOs(ipoId, timeRange);\n            // Historical performance metrics\n            const historicalMetrics = await this.calculateHistoricalMetrics(ipoId, timeRange);\n            // Trend analysis over time\n            const trends = await this.calculateHistoricalTrends(ipoId, timeRange);\n            return {\n                timeRange,\n                comparableIPOs: comparableIPOs.length,\n                metrics: historicalMetrics,\n                trends,\n                benchmarks: await this.calculateBenchmarks(comparableIPOs)\n            };\n        } catch (error) {\n            console.error(\"Historical analysis failed:\", error);\n            return {\n                status: \"error\",\n                message: \"Historical analysis unavailable\"\n            };\n        }\n    }\n    // Predictions computation\n    async computePredictions(analytics) {\n        const predictions = {};\n        try {\n            // Listing gain prediction\n            predictions.listingGain = this.predictListingGain(analytics);\n            // Allotment probability prediction\n            predictions.allotmentProbability = this.predictAllotmentProbability(analytics);\n            // Price target prediction\n            predictions.priceTargets = this.predictPriceTargets(analytics);\n            // Risk-adjusted returns\n            predictions.riskAdjustedReturns = this.calculateRiskAdjustedReturns(predictions.listingGain, analytics.riskAssessment.overallRiskScore);\n            // Confidence intervals\n            predictions.confidenceIntervals = this.calculateConfidenceIntervals(predictions);\n            predictions.lastUpdated = new Date().toISOString();\n            predictions.model = \"IPO_ANALYTICS_V1.0\";\n        } catch (error) {\n            console.error(\"Predictions computation failed:\", error);\n            predictions.status = \"error\";\n            predictions.message = \"Predictions unavailable\";\n        }\n        return predictions;\n    }\n    // Comparative analysis\n    async computeComparativeAnalysis(ipoData) {\n        try {\n            // Find similar IPOs by sector, size, and time period\n            const similarIPOs = await this.findSimilarIPOs(ipoData);\n            // Calculate relative performance\n            const relativePerformance = await this.calculateRelativePerformance(ipoData, similarIPOs);\n            // Market positioning\n            const marketPositioning = this.calculateMarketPositioning(ipoData, similarIPOs);\n            return {\n                similarIPOsCount: similarIPOs.length,\n                relativePerformance,\n                marketPositioning,\n                benchmarks: await this.calculateIndustryBenchmarks(ipoData.issueType)\n            };\n        } catch (error) {\n            console.error(\"Comparative analysis failed:\", error);\n            return {\n                status: \"error\",\n                message: \"Comparative analysis unavailable\"\n            };\n        }\n    }\n    // Insights generation\n    generateInsights(analytics) {\n        const insights = [];\n        // GMP insights\n        if (analytics.gmpAnalytics.status === \"available\") {\n            const gmp = analytics.gmpAnalytics;\n            if (gmp.statistics.current > gmp.statistics.average * 1.2) {\n                insights.push({\n                    type: \"positive\",\n                    category: \"GMP\",\n                    title: \"Strong GMP Performance\",\n                    description: `Current GMP (₹${gmp.statistics.current}) is ${((gmp.statistics.current / gmp.statistics.average - 1) * 100).toFixed(1)}% above average`,\n                    impact: \"Indicates strong market demand\"\n                });\n            }\n            if (gmp.volatility.level === \"high\") {\n                insights.push({\n                    type: \"warning\",\n                    category: \"GMP\",\n                    title: \"High Price Volatility\",\n                    description: `GMP showing high volatility (${gmp.volatility.coefficient}%)`,\n                    impact: \"Increased uncertainty in price expectations\"\n                });\n            }\n        }\n        // Subscription insights\n        if (analytics.subscriptionAnalytics.status === \"available\") {\n            const sub = analytics.subscriptionAnalytics;\n            if (sub.overall.totalSubscription > 5) {\n                insights.push({\n                    type: \"positive\",\n                    category: \"Subscription\",\n                    title: \"Strong Oversubscription\",\n                    description: `IPO oversubscribed by ${sub.overall.totalSubscription.toFixed(2)}x`,\n                    impact: \"High investor interest but lower allotment probability\"\n                });\n            }\n            if (sub.overall.totalSubscription < 1) {\n                insights.push({\n                    type: \"negative\",\n                    category: \"Subscription\",\n                    title: \"Undersubscribed IPO\",\n                    description: `IPO subscribed only ${(sub.overall.totalSubscription * 100).toFixed(1)}%`,\n                    impact: \"Weak investor demand, potential listing concerns\"\n                });\n            }\n        }\n        // Risk insights\n        const risk = analytics.riskAssessment;\n        if (risk.riskLevel === \"high\") {\n            insights.push({\n                type: \"warning\",\n                category: \"Risk\",\n                title: \"High Risk Investment\",\n                description: `Risk score of ${risk.overallRiskScore} indicates elevated risk`,\n                impact: \"Careful consideration required before investment\"\n            });\n        }\n        return insights;\n    }\n    // Recommendations generation\n    generateRecommendations(analytics) {\n        const recommendations = [];\n        const risk = analytics.riskAssessment.overallRiskScore;\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 0;\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        // Investment recommendation\n        if (risk < 30 && subscription > 2 && gmp > 0) {\n            recommendations.push({\n                type: \"BUY\",\n                confidence: \"high\",\n                reasoning: \"Low risk, strong demand, positive GMP\",\n                action: \"Consider applying for maximum allocation\"\n            });\n        } else if (risk < 50 && subscription > 1) {\n            recommendations.push({\n                type: \"HOLD\",\n                confidence: \"medium\",\n                reasoning: \"Moderate risk with adequate demand\",\n                action: \"Apply with caution, consider smaller allocation\"\n            });\n        } else if (risk > 70 || subscription < 0.5) {\n            recommendations.push({\n                type: \"AVOID\",\n                confidence: \"high\",\n                reasoning: \"High risk or weak demand indicators\",\n                action: \"Consider alternative investment opportunities\"\n            });\n        }\n        // Timing recommendations\n        if (analytics.performanceIndicators?.listingReadiness > 0.8) {\n            recommendations.push({\n                type: \"TIMING\",\n                confidence: \"medium\",\n                reasoning: \"IPO appears ready for successful listing\",\n                action: \"Good timing for application\"\n            });\n        }\n        // Allocation recommendations\n        if (subscription > 10) {\n            recommendations.push({\n                type: \"ALLOCATION\",\n                confidence: \"high\",\n                reasoning: \"Very high oversubscription\",\n                action: \"Apply for maximum retail quota to improve allotment chances\"\n            });\n        }\n        return recommendations;\n    }\n    // Utility methods for calculations\n    calculateAverage(values) {\n        if (!values || values.length === 0) return 0;\n        return values.reduce((sum, val)=>sum + val, 0) / values.length;\n    }\n    calculateMedian(values) {\n        if (!values || values.length === 0) return 0;\n        const sorted = [\n            ...values\n        ].sort((a, b)=>a - b);\n        const mid = Math.floor(sorted.length / 2);\n        return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n    }\n    calculateMode(values) {\n        if (!values || values.length === 0) return 0;\n        const frequency = {};\n        values.forEach((val)=>frequency[val] = (frequency[val] || 0) + 1);\n        return Object.keys(frequency).reduce((a, b)=>frequency[a] > frequency[b] ? a : b);\n    }\n    calculateStandardDeviation(values) {\n        if (!values || values.length < 2) return 0;\n        const avg = this.calculateAverage(values);\n        const variance = values.reduce((sum, val)=>sum + Math.pow(val - avg, 2), 0) / values.length;\n        return Math.sqrt(variance);\n    }\n    calculateVariance(values) {\n        if (!values || values.length < 2) return 0;\n        const avg = this.calculateAverage(values);\n        return values.reduce((sum, val)=>sum + Math.pow(val - avg, 2), 0) / values.length;\n    }\n    calculateCoefficientOfVariation(values) {\n        const avg = this.calculateAverage(values);\n        const stdDev = this.calculateStandardDeviation(values);\n        return avg > 0 ? stdDev / avg * 100 : 0;\n    }\n    analyzeTrend(values) {\n        if (!values || values.length < 2) return {\n            direction: \"stable\",\n            strength: 0\n        };\n        const recent = values.slice(0, Math.min(5, Math.floor(values.length / 2)));\n        const older = values.slice(-Math.min(5, Math.floor(values.length / 2)));\n        const recentAvg = this.calculateAverage(recent);\n        const olderAvg = this.calculateAverage(older);\n        const change = recentAvg - olderAvg;\n        const changePercent = olderAvg > 0 ? change / olderAvg * 100 : 0;\n        let direction = \"stable\";\n        let strength = Math.abs(changePercent);\n        if (changePercent > 5) direction = \"bullish\";\n        else if (changePercent < -5) direction = \"bearish\";\n        return {\n            direction,\n            strength,\n            change,\n            changePercent\n        };\n    }\n    analyzeVolatility(values, timestamps) {\n        if (!values || values.length < 2) return {\n            level: \"unknown\",\n            coefficient: 0\n        };\n        const coefficient = this.calculateCoefficientOfVariation(values);\n        let level = \"low\";\n        if (coefficient > 30) level = \"high\";\n        else if (coefficient > 15) level = \"medium\";\n        return {\n            level,\n            coefficient,\n            standardDeviation: this.calculateStandardDeviation(values)\n        };\n    }\n    calculateMomentum(values) {\n        if (!values || values.length < 3) return {\n            score: 0,\n            direction: \"neutral\"\n        };\n        const recent = values.slice(0, 3);\n        const momentum = recent[0] - recent[2];\n        const momentumPercent = recent[2] > 0 ? momentum / recent[2] * 100 : 0;\n        let direction = \"neutral\";\n        if (momentumPercent > 2) direction = \"positive\";\n        else if (momentumPercent < -2) direction = \"negative\";\n        return {\n            score: momentumPercent,\n            direction,\n            absolute: momentum\n        };\n    }\n    // Data fetching methods\n    async getIPOBasicData(ipoId) {\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.iPO.findUnique({\n            where: {\n                id: ipoId\n            },\n            include: {\n                categories: true\n            }\n        });\n    }\n    async getGMPData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.gMP.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getSubscriptionData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.subscriptionData.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getDemandData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.marketDemand.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getIPOCategories(ipoId) {\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.iPOCategory.findMany({\n            where: {\n                ipoId\n            }\n        });\n    }\n    // Cache management\n    async getCachedAnalytics(key) {\n        // Check in-memory cache first\n        if (this.analyticsCache.has(key)) {\n            const cached = this.analyticsCache.get(key);\n            if (Date.now() - cached.timestamp < this.cacheTTL.DETAILED) {\n                return cached.data;\n            }\n            this.analyticsCache.delete(key);\n        }\n        // Check Redis cache\n        return await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.get(key);\n    }\n    async setCachedAnalytics(key, data, ttl) {\n        // Set in-memory cache\n        this.analyticsCache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n        // Set in Redis\n        return await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.set(key, data, ttl / 1000);\n    }\n    // Helper methods\n    categorizeIssueSize(size) {\n        if (size < 500 * 10000000) return \"small\"; // < 500 Cr\n        if (size < 2000 * 10000000) return \"medium\"; // < 2000 Cr\n        return \"large\"; // >= 2000 Cr\n    }\n    calculateDuration(startDate, endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        return Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n    }\n    categorizeRiskLevel(score) {\n        if (score < 30) return \"low\";\n        if (score < 60) return \"medium\";\n        return \"high\";\n    }\n    getLatestSubscriptionByCategory(subscriptionData) {\n        const latest = {};\n        subscriptionData.forEach((item)=>{\n            const key = item.category + (item.subCategory || \"\");\n            if (!latest[key] || item.timestamp > latest[key].timestamp) {\n                latest[key] = item;\n            }\n        });\n        return latest;\n    }\n    calculateOverallSubscription(latestByCategory) {\n        const ratios = Object.values(latestByCategory).map((item)=>item.subscriptionRatio || 0);\n        return ratios.length > 0 ? Math.max(...ratios) : 0;\n    }\n    // Performance tracking\n    updateMetrics(computationTime) {\n        this.metrics.computationsPerformed++;\n        this.metrics.averageComputationTime = (this.metrics.averageComputationTime * (this.metrics.computationsPerformed - 1) + computationTime) / this.metrics.computationsPerformed;\n    }\n    getPerformanceMetrics() {\n        const hitRate = this.metrics.cacheHits + this.metrics.cacheMisses > 0 ? (this.metrics.cacheHits / (this.metrics.cacheHits + this.metrics.cacheMisses) * 100).toFixed(2) : \"0.00\";\n        return {\n            ...this.metrics,\n            cacheHitRate: `${hitRate}%`,\n            averageComputationTime: Math.round(this.metrics.averageComputationTime),\n            successRate: this.metrics.computationsPerformed > 0 ? ((this.metrics.computationsPerformed - this.metrics.errors) / this.metrics.computationsPerformed * 100).toFixed(2) : \"100.00\"\n        };\n    }\n    // Placeholder methods for advanced features (to be implemented)\n    async getComparableIPOs(ipoId, timeRange) {\n        return [];\n    }\n    async calculateHistoricalMetrics(ipoId, timeRange) {\n        return {};\n    }\n    async calculateHistoricalTrends(ipoId, timeRange) {\n        return {};\n    }\n    async calculateBenchmarks(comparableIPOs) {\n        return {};\n    }\n    async findSimilarIPOs(ipoData) {\n        return [];\n    }\n    async calculateRelativePerformance(ipoData, similarIPOs) {\n        return {};\n    }\n    calculateMarketPositioning(ipoData, similarIPOs) {\n        return {};\n    }\n    async calculateIndustryBenchmarks(issueType) {\n        return {};\n    }\n    predictListingGain(analytics) {\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        const risk = analytics.riskAssessment.overallRiskScore || 50;\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 1;\n        // Simple prediction model (enhance with ML)\n        let prediction = gmp * 0.8; // Conservative estimate\n        // Adjust for risk\n        prediction *= 1 - risk / 200; // Reduce by half the risk percentage\n        // Adjust for subscription\n        if (subscription > 5) prediction *= 0.9; // High subscription may limit gains\n        else if (subscription < 1) prediction *= 0.7; // Low subscription is bearish\n        return {\n            value: Math.round(prediction),\n            confidence: 0.6,\n            range: {\n                min: Math.round(prediction * 0.7),\n                max: Math.round(prediction * 1.3)\n            }\n        };\n    }\n    predictAllotmentProbability(analytics) {\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 1;\n        let probability = 100;\n        if (subscription > 1) {\n            probability = Math.min(95, 100 / subscription);\n        }\n        return {\n            retail: Math.round(probability),\n            confidence: 0.8\n        };\n    }\n    predictPriceTargets(analytics) {\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        const basePrice = analytics.basicMetrics?.priceRange?.max || 0;\n        return {\n            conservative: basePrice + gmp * 0.5,\n            moderate: basePrice + gmp * 0.8,\n            aggressive: basePrice + gmp * 1.2\n        };\n    }\n    calculateRiskAdjustedReturns(listingGain, riskScore) {\n        const gain = listingGain.value || 0;\n        const risk = riskScore || 50;\n        return {\n            riskAdjustedReturn: gain * (1 - risk / 100),\n            sharpeRatio: risk > 0 ? gain / risk : 0\n        };\n    }\n    calculateConfidenceIntervals(predictions) {\n        return {\n            listingGain: {\n                confidence90: {\n                    min: predictions.listingGain?.range?.min || 0,\n                    max: predictions.listingGain?.range?.max || 0\n                }\n            }\n        };\n    }\n    // Additional helper methods\n    analyzeVolume(volumes, values) {\n        return {\n            correlation: 0,\n            trend: \"stable\"\n        };\n    }\n    calculatePriceTargets(stats) {\n        return {\n            support: stats.min,\n            resistance: stats.max,\n            pivot: stats.average\n        };\n    }\n    calculateGMPRiskMetrics(values) {\n        return {\n            valueAtRisk: this.calculateStandardDeviation(values) * 1.645,\n            maxDrawdown: this.calculateMaxDrawdown(values)\n        };\n    }\n    calculateMaxDrawdown(values) {\n        let maxDrawdown = 0;\n        let peak = values[0];\n        for(let i = 1; i < values.length; i++){\n            if (values[i] > peak) {\n                peak = values[i];\n            } else {\n                const drawdown = (peak - values[i]) / peak;\n                maxDrawdown = Math.max(maxDrawdown, drawdown);\n            }\n        }\n        return maxDrawdown * 100; // Return as percentage\n    }\n    analyzeSubscriptionPatterns(subscriptionData) {\n        return {\n            trend: \"increasing\"\n        };\n    }\n    calculateAllotmentProbabilities(latestByCategory) {\n        const result = {};\n        for (const [category, data] of Object.entries(latestByCategory)){\n            const ratio = data.subscriptionRatio || 1;\n            result[category] = ratio > 1 ? Math.min(95, 100 / ratio) : 95;\n        }\n        return result;\n    }\n    generateSubscriptionInsights(overall, categories) {\n        return [];\n    }\n    analyzePriceWiseDemand(demandData) {\n        return {\n            distribution: \"normal\"\n        };\n    }\n    analyzeCutOffDemand(demandData) {\n        return {\n            percentage: 0\n        };\n    }\n    analyzeDemandDistribution(demandData) {\n        return {\n            concentration: \"distributed\"\n        };\n    }\n    analyzeBidConcentration(demandData) {\n        return {\n            herfindahlIndex: 0\n        };\n    }\n    calculateMarketSentiment(gmpData, subscriptionData) {\n        return 0.5;\n    }\n    calculateDemandStrength(subscriptionData) {\n        return 0.5;\n    }\n    calculateListingReadiness(ipoData, subscriptionData) {\n        return 0.8;\n    }\n    calculateAttractivenessScore(indicators) {\n        return 0.7;\n    }\n    calculateTimespan(data) {\n        if (!data || data.length < 2) return 0;\n        const first = new Date(data[data.length - 1].timestamp);\n        const last = new Date(data[0].timestamp);\n        return Math.ceil((last - first) / (1000 * 60 * 60 * 24));\n    }\n    generateRiskRecommendation(score, factors) {\n        if (score < 30) return \"Low risk investment, suitable for conservative investors\";\n        if (score < 60) return \"Moderate risk, suitable for balanced portfolios\";\n        return \"High risk investment, suitable only for aggressive investors\";\n    }\n}\n// Export singleton instance\nconst analyticsService = new AnalyticsService();\n// Cleanup old cache entries periodically\nsetInterval(()=>{\n    const now = Date.now();\n    for (const [key, value] of analyticsService.analyticsCache.entries()){\n        if (now - value.timestamp > analyticsService.cacheTTL.DETAILED) {\n            analyticsService.analyticsCache.delete(key);\n        }\n    }\n}, 10 * 60 * 1000); // Every 10 minutes\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (analyticsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFdkQseUNBQXlDO0FBQ3pDZ1csWUFDRTtJQUNFLE1BQU1qVSxNQUFNRCxLQUFLQyxHQUFHO0lBQ3BCLEtBQUssTUFBTSxDQUFDbVIsS0FBSzNMLE1BQU0sSUFBSXdPLGlCQUFpQnZWLGNBQWMsQ0FBQ21LLE9BQU8sR0FBSTtRQUNwRSxJQUFJNUksTUFBTXdGLE1BQU15QixTQUFTLEdBQUcrTSxpQkFBaUJyVixRQUFRLENBQUNFLFFBQVEsRUFBRTtZQUM5RG1WLGlCQUFpQnZWLGNBQWMsQ0FBQzZTLE1BQU0sQ0FBQ0g7UUFDekM7SUFDRjtBQUNGLEdBQ0EsS0FBSyxLQUFLLE9BQ1QsbUJBQW1CO0FBRXRCLGlFQUFlNkMsZ0JBQWdCQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXBvLXRyYWNrZXIvLi9zcmMvbGliL2FuYWx5dGljcy5qcz83MWFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gXCIuL2RiLmpzXCI7XHJcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSBcIi4vY2FjaGUuanNcIjtcclxuXHJcbmNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gUGVyZm9ybWFuY2UgbWV0cmljc1xyXG4gICAgdGhpcy5tZXRyaWNzID0ge1xyXG4gICAgICBjb21wdXRhdGlvbnNQZXJmb3JtZWQ6IDAsXHJcbiAgICAgIGNhY2hlSGl0czogMCxcclxuICAgICAgY2FjaGVNaXNzZXM6IDAsXHJcbiAgICAgIGF2ZXJhZ2VDb21wdXRhdGlvblRpbWU6IDAsXHJcbiAgICAgIGVycm9yczogMCxcclxuICAgIH07XHJcblxyXG4gICAgLy8gQW5hbHl0aWNzIGNhY2hlIHdpdGggVFRMXHJcbiAgICB0aGlzLmFuYWx5dGljc0NhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5jYWNoZVRUTCA9IHtcclxuICAgICAgQkFTSUM6IDUgKiA2MCAqIDEwMDAsIC8vIDUgbWludXRlc1xyXG4gICAgICBERVRBSUxFRDogMTAgKiA2MCAqIDEwMDAsIC8vIDEwIG1pbnV0ZXNcclxuICAgICAgSElTVE9SSUNBTDogMzAgKiA2MCAqIDEwMDAsIC8vIDMwIG1pbnV0ZXNcclxuICAgICAgUFJFRElDVElPTlM6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJpc2sgYXNzZXNzbWVudCB3ZWlnaHRzXHJcbiAgICB0aGlzLnJpc2tXZWlnaHRzID0ge1xyXG4gICAgICBHTVBfVk9MQVRJTElUWTogMC4zLFxyXG4gICAgICBTVUJTQ1JJUFRJT05fUkFUSU86IDAuMjUsXHJcbiAgICAgIElTU1VFX1NJWkU6IDAuMixcclxuICAgICAgTUFSS0VUX0NPTkRJVElPTlM6IDAuMTUsXHJcbiAgICAgIFNFQ1RPUl9QRVJGT1JNQU5DRTogMC4xLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBQcmVkaWN0aW9uIG1vZGVscyBjb25maWd1cmF0aW9uXHJcbiAgICB0aGlzLnByZWRpY3Rpb25Nb2RlbHMgPSB7XHJcbiAgICAgIExJU1RJTkdfR0FJTjoge1xyXG4gICAgICAgIGZhY3RvcnM6IFtcclxuICAgICAgICAgIFwiYXZnR01QXCIsXHJcbiAgICAgICAgICBcInN1YnNjcmlwdGlvblJhdGlvXCIsXHJcbiAgICAgICAgICBcImlzc3VlU2l6ZVwiLFxyXG4gICAgICAgICAgXCJtYXJrZXRTZW50aW1lbnRcIixcclxuICAgICAgICBdLFxyXG4gICAgICAgIHdlaWdodHM6IFswLjQsIDAuMywgMC4yLCAwLjFdLFxyXG4gICAgICB9LFxyXG4gICAgICBBTExPVE1FTlRfUFJPQkFCSUxJVFk6IHtcclxuICAgICAgICBmYWN0b3JzOiBbXCJzdWJzY3JpcHRpb25SYXRpb1wiLCBcImFwcGxpY2F0aW9uQW1vdW50XCIsIFwiY2F0ZWdvcnlcIl0sXHJcbiAgICAgICAgd2VpZ2h0czogWzAuNiwgMC4zLCAwLjFdLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIENvbXByZWhlbnNpdmUgSVBPIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGFzeW5jIGNvbXB1dGVJUE9BbmFseXRpY3MoaXBvSWQsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgaW5jbHVkZUhpc3RvcmljYWwgPSB0cnVlLFxyXG4gICAgICAgIGluY2x1ZGVQcmVkaWN0aW9ucyA9IHRydWUsXHJcbiAgICAgICAgdGltZVJhbmdlID0gMzAsIC8vIGRheXNcclxuICAgICAgICByZWZyZXNoQ2FjaGUgPSBmYWxzZSxcclxuICAgICAgfSA9IG9wdGlvbnM7XHJcblxyXG4gICAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgICBjb25zdCBjYWNoZUtleSA9IGBhbmFseXRpY3M6JHtpcG9JZH06JHt0aW1lUmFuZ2V9OiR7aW5jbHVkZUhpc3RvcmljYWx9OiR7aW5jbHVkZVByZWRpY3Rpb25zfWA7XHJcblxyXG4gICAgICBpZiAoIXJlZnJlc2hDYWNoZSkge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVkQW5hbHl0aWNzKGNhY2hlS2V5KTtcclxuICAgICAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgICB0aGlzLm1ldHJpY3MuY2FjaGVIaXRzKys7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5tZXRyaWNzLmNhY2hlTWlzc2VzKys7XHJcblxyXG4gICAgICAvLyBGZXRjaCBjb21wcmVoZW5zaXZlIGRhdGFcclxuICAgICAgY29uc3QgW2lwb0RhdGEsIGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEsIGRlbWFuZERhdGEsIGNhdGVnb3J5RGF0YV0gPVxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgIHRoaXMuZ2V0SVBPQmFzaWNEYXRhKGlwb0lkKSxcclxuICAgICAgICAgIHRoaXMuZ2V0R01QRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0U3Vic2NyaXB0aW9uRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0RGVtYW5kRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0SVBPQ2F0ZWdvcmllcyhpcG9JZCksXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICBpZiAoIWlwb0RhdGEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElQTyB3aXRoIElEICR7aXBvSWR9IG5vdCBmb3VuZGApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDb21wdXRlIGFuYWx5dGljc1xyXG4gICAgICBjb25zdCBhbmFseXRpY3MgPSB7XHJcbiAgICAgICAgaXBvSWQsXHJcbiAgICAgICAgc3ltYm9sOiBpcG9EYXRhLnN5bWJvbCxcclxuICAgICAgICBuYW1lOiBpcG9EYXRhLm5hbWUsXHJcbiAgICAgICAgc3RhdHVzOiBpcG9EYXRhLnN0YXR1cyxcclxuICAgICAgICBjb21wdXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcblxyXG4gICAgICAgIC8vIEJhc2ljIG1ldHJpY3NcclxuICAgICAgICBiYXNpY01ldHJpY3M6IHRoaXMuY29tcHV0ZUJhc2ljTWV0cmljcyhpcG9EYXRhKSxcclxuXHJcbiAgICAgICAgLy8gR01QIGFuYWx5dGljc1xyXG4gICAgICAgIGdtcEFuYWx5dGljczogdGhpcy5jb21wdXRlR01QQW5hbHl0aWNzKGdtcERhdGEpLFxyXG5cclxuICAgICAgICAvLyBTdWJzY3JpcHRpb24gYW5hbHl0aWNzXHJcbiAgICAgICAgc3Vic2NyaXB0aW9uQW5hbHl0aWNzOiB0aGlzLmNvbXB1dGVTdWJzY3JpcHRpb25BbmFseXRpY3MoXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLFxyXG4gICAgICAgICAgY2F0ZWdvcnlEYXRhXHJcbiAgICAgICAgKSxcclxuXHJcbiAgICAgICAgLy8gTWFya2V0IGRlbWFuZCBhbmFseXRpY3NcclxuICAgICAgICBkZW1hbmRBbmFseXRpY3M6IHRoaXMuY29tcHV0ZURlbWFuZEFuYWx5dGljcyhkZW1hbmREYXRhKSxcclxuXHJcbiAgICAgICAgLy8gUmlzayBhc3Nlc3NtZW50XHJcbiAgICAgICAgcmlza0Fzc2Vzc21lbnQ6IHRoaXMuY29tcHV0ZVJpc2tBc3Nlc3NtZW50KFxyXG4gICAgICAgICAgaXBvRGF0YSxcclxuICAgICAgICAgIGdtcERhdGEsXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICAgICAgKSxcclxuXHJcbiAgICAgICAgLy8gUGVyZm9ybWFuY2UgaW5kaWNhdG9yc1xyXG4gICAgICAgIHBlcmZvcm1hbmNlSW5kaWNhdG9yczogdGhpcy5jb21wdXRlUGVyZm9ybWFuY2VJbmRpY2F0b3JzKFxyXG4gICAgICAgICAgaXBvRGF0YSxcclxuICAgICAgICAgIGdtcERhdGEsXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICAgICAgKSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIEFkZCBoaXN0b3JpY2FsIGFuYWx5c2lzXHJcbiAgICAgIGlmIChpbmNsdWRlSGlzdG9yaWNhbCkge1xyXG4gICAgICAgIGFuYWx5dGljcy5oaXN0b3JpY2FsQW5hbHlzaXMgPSBhd2FpdCB0aGlzLmNvbXB1dGVIaXN0b3JpY2FsQW5hbHlzaXMoXHJcbiAgICAgICAgICBpcG9JZCxcclxuICAgICAgICAgIHRpbWVSYW5nZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkZCBwcmVkaWN0aW9uc1xyXG4gICAgICBpZiAoaW5jbHVkZVByZWRpY3Rpb25zKSB7XHJcbiAgICAgICAgYW5hbHl0aWNzLnByZWRpY3Rpb25zID0gYXdhaXQgdGhpcy5jb21wdXRlUHJlZGljdGlvbnMoYW5hbHl0aWNzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWRkIGNvbXBhcmF0aXZlIGFuYWx5c2lzXHJcbiAgICAgIGFuYWx5dGljcy5jb21wYXJhdGl2ZUFuYWx5c2lzID1cclxuICAgICAgICBhd2FpdCB0aGlzLmNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzKGlwb0RhdGEpO1xyXG5cclxuICAgICAgLy8gQWRkIGluc2lnaHRzIGFuZCByZWNvbW1lbmRhdGlvbnNcclxuICAgICAgYW5hbHl0aWNzLmluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZUluc2lnaHRzKGFuYWx5dGljcyk7XHJcbiAgICAgIGFuYWx5dGljcy5yZWNvbW1lbmRhdGlvbnMgPSB0aGlzLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKGFuYWx5dGljcyk7XHJcblxyXG4gICAgICAvLyBDYWNoZSB0aGUgcmVzdWx0c1xyXG4gICAgICBhd2FpdCB0aGlzLnNldENhY2hlZEFuYWx5dGljcyhcclxuICAgICAgICBjYWNoZUtleSxcclxuICAgICAgICBhbmFseXRpY3MsXHJcbiAgICAgICAgdGhpcy5jYWNoZVRUTC5ERVRBSUxFRFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIG1ldHJpY3NcclxuICAgICAgY29uc3QgY29tcHV0YXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgdGhpcy51cGRhdGVNZXRyaWNzKGNvbXB1dGF0aW9uVGltZSk7XHJcblxyXG4gICAgICByZXR1cm4gYW5hbHl0aWNzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5tZXRyaWNzLmVycm9ycysrO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBBbmFseXRpY3MgY29tcHV0YXRpb24gZmFpbGVkIGZvciBJUE8gJHtpcG9JZH06YCwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJhc2ljIElQTyBtZXRyaWNzIGNvbXB1dGF0aW9uXHJcbiAgY29tcHV0ZUJhc2ljTWV0cmljcyhpcG9EYXRhKSB7XHJcbiAgICBjb25zdCBwcmljZVJhbmdlID0gaXBvRGF0YS5tYXhQcmljZSAtIGlwb0RhdGEubWluUHJpY2U7XHJcbiAgICBjb25zdCBpc3N1ZVNpemUgPSBOdW1iZXIoaXBvRGF0YS5pc3N1ZVNpemUgfHwgMCk7XHJcbiAgICBjb25zdCBsb3RWYWx1ZSA9IGlwb0RhdGEubG90U2l6ZSAqIChpcG9EYXRhLm1heFByaWNlIHx8IDApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByaWNlUmFuZ2U6IHtcclxuICAgICAgICBtaW46IGlwb0RhdGEubWluUHJpY2UsXHJcbiAgICAgICAgbWF4OiBpcG9EYXRhLm1heFByaWNlLFxyXG4gICAgICAgIHNwcmVhZDogcHJpY2VSYW5nZSxcclxuICAgICAgICBzcHJlYWRQZXJjZW50YWdlOlxyXG4gICAgICAgICAgaXBvRGF0YS5taW5QcmljZSA+IDBcclxuICAgICAgICAgICAgPyBwYXJzZUZsb2F0KCgocHJpY2VSYW5nZSAvIGlwb0RhdGEubWluUHJpY2UpICogMTAwKS50b0ZpeGVkKDIpKVxyXG4gICAgICAgICAgICA6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIGlzc3VlOiB7XHJcbiAgICAgICAgc2l6ZTogaXNzdWVTaXplLFxyXG4gICAgICAgIHNpemVDYXRlZ29yeTogdGhpcy5jYXRlZ29yaXplSXNzdWVTaXplKGlzc3VlU2l6ZSksXHJcbiAgICAgICAgbG90U2l6ZTogaXBvRGF0YS5sb3RTaXplLFxyXG4gICAgICAgIGxvdFZhbHVlLFxyXG4gICAgICAgIGZhY2VWYWx1ZTogaXBvRGF0YS5mYWNlVmFsdWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVsaW5lOiB7XHJcbiAgICAgICAgb3BlbkRhdGU6IGlwb0RhdGEub3BlbkRhdGUsXHJcbiAgICAgICAgY2xvc2VEYXRlOiBpcG9EYXRhLmNsb3NlRGF0ZSxcclxuICAgICAgICBsaXN0aW5nRGF0ZTogaXBvRGF0YS5saXN0aW5nRGF0ZSxcclxuICAgICAgICBkdXJhdGlvbkRheXM6IHRoaXMuY2FsY3VsYXRlRHVyYXRpb24oXHJcbiAgICAgICAgICBpcG9EYXRhLm9wZW5EYXRlLFxyXG4gICAgICAgICAgaXBvRGF0YS5jbG9zZURhdGVcclxuICAgICAgICApLFxyXG4gICAgICAgIGRheXNUb0xpc3Rpbmc6IGlwb0RhdGEubGlzdGluZ0RhdGVcclxuICAgICAgICAgID8gdGhpcy5jYWxjdWxhdGVEdXJhdGlvbihpcG9EYXRhLmNsb3NlRGF0ZSwgaXBvRGF0YS5saXN0aW5nRGF0ZSlcclxuICAgICAgICAgIDogbnVsbCxcclxuICAgICAgfSxcclxuICAgICAgdHlwZToge1xyXG4gICAgICAgIGlzc3VlVHlwZTogaXBvRGF0YS5pc3N1ZVR5cGUsXHJcbiAgICAgICAgc3ViVHlwZTogaXBvRGF0YS5zdWJUeXBlLFxyXG4gICAgICAgIHJlZ2lzdHJhcjogaXBvRGF0YS5yZWdpc3RyYXIsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gR01QIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVHTVBBbmFseXRpY3MoZ21wRGF0YSkge1xyXG4gICAgaWYgKCFnbXBEYXRhIHx8IGdtcERhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIEdNUCBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IGdtcERhdGEubWFwKChnKSA9PiBnLnZhbHVlKTtcclxuICAgIGNvbnN0IHBlcmNlbnRhZ2VzID0gZ21wRGF0YS5tYXAoKGcpID0+IGcucGVyY2VudGFnZSk7XHJcbiAgICBjb25zdCB2b2x1bWVzID0gZ21wRGF0YS5tYXAoKGcpID0+IGcudm9sdW1lIHx8IDApO1xyXG5cclxuICAgIC8vIFN0YXRpc3RpY2FsIG1lYXN1cmVzXHJcbiAgICBjb25zdCBzdGF0cyA9IHtcclxuICAgICAgY3VycmVudDogdmFsdWVzWzBdIHx8IDAsXHJcbiAgICAgIGF2ZXJhZ2U6IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpLFxyXG4gICAgICBtZWRpYW46IHRoaXMuY2FsY3VsYXRlTWVkaWFuKHZhbHVlcyksXHJcbiAgICAgIG1vZGU6IHRoaXMuY2FsY3VsYXRlTW9kZSh2YWx1ZXMpLFxyXG4gICAgICBtaW46IE1hdGgubWluKC4uLnZhbHVlcyksXHJcbiAgICAgIG1heDogTWF0aC5tYXgoLi4udmFsdWVzKSxcclxuICAgICAgcmFuZ2U6IE1hdGgubWF4KC4uLnZhbHVlcykgLSBNYXRoLm1pbiguLi52YWx1ZXMpLFxyXG4gICAgICBzdGFuZGFyZERldmlhdGlvbjogdGhpcy5jYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpLFxyXG4gICAgICB2YXJpYW5jZTogdGhpcy5jYWxjdWxhdGVWYXJpYW5jZSh2YWx1ZXMpLFxyXG4gICAgICBjb2VmZmljaWVudDogdGhpcy5jYWxjdWxhdGVDb2VmZmljaWVudE9mVmFyaWF0aW9uKHZhbHVlcyksXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRyZW5kIGFuYWx5c2lzXHJcbiAgICBjb25zdCB0cmVuZCA9IHRoaXMuYW5hbHl6ZVRyZW5kKHZhbHVlcyk7XHJcblxyXG4gICAgLy8gVm9sYXRpbGl0eSBhbmFseXNpc1xyXG4gICAgY29uc3Qgdm9sYXRpbGl0eSA9IHRoaXMuYW5hbHl6ZVZvbGF0aWxpdHkoXHJcbiAgICAgIHZhbHVlcyxcclxuICAgICAgZ21wRGF0YS5tYXAoKGcpID0+IGcudGltZXN0YW1wKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBWb2x1bWUgYW5hbHlzaXNcclxuICAgIGNvbnN0IHZvbHVtZUFuYWx5c2lzID0gdGhpcy5hbmFseXplVm9sdW1lKHZvbHVtZXMsIHZhbHVlcyk7XHJcblxyXG4gICAgLy8gUHJpY2UgbW9tZW50dW1cclxuICAgIGNvbnN0IG1vbWVudHVtID0gdGhpcy5jYWxjdWxhdGVNb21lbnR1bSh2YWx1ZXMpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1czogXCJhdmFpbGFibGVcIixcclxuICAgICAgcmVjb3JkQ291bnQ6IGdtcERhdGEubGVuZ3RoLFxyXG4gICAgICB0aW1lc3BhbjogdGhpcy5jYWxjdWxhdGVUaW1lc3BhbihnbXBEYXRhKSxcclxuICAgICAgc3RhdGlzdGljczogc3RhdHMsXHJcbiAgICAgIHRyZW5kLFxyXG4gICAgICB2b2xhdGlsaXR5LFxyXG4gICAgICB2b2x1bWVBbmFseXNpcyxcclxuICAgICAgbW9tZW50dW0sXHJcbiAgICAgIHByaWNlVGFyZ2V0czogdGhpcy5jYWxjdWxhdGVQcmljZVRhcmdldHMoc3RhdHMpLFxyXG4gICAgICByaXNrTWV0cmljczogdGhpcy5jYWxjdWxhdGVHTVBSaXNrTWV0cmljcyh2YWx1ZXMpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFN1YnNjcmlwdGlvbiBhbmFseXRpY3MgY29tcHV0YXRpb25cclxuICBjb21wdXRlU3Vic2NyaXB0aW9uQW5hbHl0aWNzKHN1YnNjcmlwdGlvbkRhdGEsIGNhdGVnb3J5RGF0YSkge1xyXG4gICAgaWYgKCFzdWJzY3JpcHRpb25EYXRhIHx8IHN1YnNjcmlwdGlvbkRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIHN1YnNjcmlwdGlvbiBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBsYXRlc3Qgc3Vic2NyaXB0aW9uIGJ5IGNhdGVnb3J5XHJcbiAgICBjb25zdCBsYXRlc3RCeUNhdGVnb3J5ID1cclxuICAgICAgdGhpcy5nZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpO1xyXG5cclxuICAgIC8vIE92ZXJhbGwgc3Vic2NyaXB0aW9uIG1ldHJpY3NcclxuICAgIGNvbnN0IG92ZXJhbGxNZXRyaWNzID0ge1xyXG4gICAgICB0b3RhbFN1YnNjcmlwdGlvbjogdGhpcy5jYWxjdWxhdGVPdmVyYWxsU3Vic2NyaXB0aW9uKGxhdGVzdEJ5Q2F0ZWdvcnkpLFxyXG4gICAgICBpc092ZXJzdWJzY3JpYmVkOiBmYWxzZSxcclxuICAgICAgb3ZlcnN1YnNjcmlwdGlvblJhdGlvOiAwLFxyXG4gICAgICB0b3RhbEFwcGxpY2F0aW9uczogMCxcclxuICAgICAgdG90YWxRdWFudGl0eTogQmlnSW50KDApLFxyXG4gICAgfTtcclxuXHJcbiAgICBvdmVyYWxsTWV0cmljcy5pc092ZXJzdWJzY3JpYmVkID0gb3ZlcmFsbE1ldHJpY3MudG90YWxTdWJzY3JpcHRpb24gPiAxO1xyXG4gICAgb3ZlcmFsbE1ldHJpY3Mub3ZlcnN1YnNjcmlwdGlvblJhdGlvID0gTWF0aC5tYXgoXHJcbiAgICAgIDAsXHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsU3Vic2NyaXB0aW9uIC0gMVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBDYXRlZ29yeS13aXNlIGFuYWx5c2lzXHJcbiAgICBjb25zdCBjYXRlZ29yeUFuYWx5c2lzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0QnlDYXRlZ29yeSkpIHtcclxuICAgICAgY2F0ZWdvcnlBbmFseXNpc1tjYXRlZ29yeV0gPSB7XHJcbiAgICAgICAgc3Vic2NyaXB0aW9uUmF0aW86IGRhdGEuc3Vic2NyaXB0aW9uUmF0aW8sXHJcbiAgICAgICAgcXVhbnRpdHk6IGRhdGEucXVhbnRpdHkudG9TdHJpbmcoKSxcclxuICAgICAgICBiaWRDb3VudDogZGF0YS5iaWRDb3VudCxcclxuICAgICAgICBhdmVyYWdlQmlkU2l6ZTpcclxuICAgICAgICAgIGRhdGEuYmlkQ291bnQgPiAwID8gTnVtYmVyKGRhdGEucXVhbnRpdHkpIC8gZGF0YS5iaWRDb3VudCA6IDAsXHJcbiAgICAgICAgdGltZXN0YW1wOiBkYXRhLnRpbWVzdGFtcCxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsQXBwbGljYXRpb25zICs9IGRhdGEuYmlkQ291bnQ7XHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsUXVhbnRpdHkgKz0gZGF0YS5xdWFudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gcGF0dGVybiBhbmFseXNpc1xyXG4gICAgY29uc3QgcGF0dGVybnMgPSB0aGlzLmFuYWx5emVTdWJzY3JpcHRpb25QYXR0ZXJucyhzdWJzY3JpcHRpb25EYXRhKTtcclxuXHJcbiAgICAvLyBBbGxvdG1lbnQgcHJvYmFiaWxpdHkgY2FsY3VsYXRpb25cclxuICAgIGNvbnN0IGFsbG90bWVudFByb2JhYmlsaXR5ID1cclxuICAgICAgdGhpcy5jYWxjdWxhdGVBbGxvdG1lbnRQcm9iYWJpbGl0aWVzKGxhdGVzdEJ5Q2F0ZWdvcnkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1czogXCJhdmFpbGFibGVcIixcclxuICAgICAgcmVjb3JkQ291bnQ6IHN1YnNjcmlwdGlvbkRhdGEubGVuZ3RoLFxyXG4gICAgICBvdmVyYWxsOiBvdmVyYWxsTWV0cmljcyxcclxuICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcnlBbmFseXNpcyxcclxuICAgICAgcGF0dGVybnMsXHJcbiAgICAgIGFsbG90bWVudFByb2JhYmlsaXR5LFxyXG4gICAgICBpbnNpZ2h0czogdGhpcy5nZW5lcmF0ZVN1YnNjcmlwdGlvbkluc2lnaHRzKFxyXG4gICAgICAgIG92ZXJhbGxNZXRyaWNzLFxyXG4gICAgICAgIGNhdGVnb3J5QW5hbHlzaXNcclxuICAgICAgKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBNYXJrZXQgZGVtYW5kIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVEZW1hbmRBbmFseXRpY3MoZGVtYW5kRGF0YSkge1xyXG4gICAgaWYgKCFkZW1hbmREYXRhIHx8IGRlbWFuZERhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIGRlbWFuZCBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaWNlLXdpc2UgZGVtYW5kIGFuYWx5c2lzXHJcbiAgICBjb25zdCBwcmljZVdpc2VEZW1hbmQgPSB0aGlzLmFuYWx5emVQcmljZVdpc2VEZW1hbmQoZGVtYW5kRGF0YSk7XHJcblxyXG4gICAgLy8gQ3V0LW9mZiBhbmFseXNpc1xyXG4gICAgY29uc3QgY3V0T2ZmQW5hbHlzaXMgPSB0aGlzLmFuYWx5emVDdXRPZmZEZW1hbmQoZGVtYW5kRGF0YSk7XHJcblxyXG4gICAgLy8gRGVtYW5kIGRpc3RyaWJ1dGlvblxyXG4gICAgY29uc3QgZGlzdHJpYnV0aW9uID0gdGhpcy5hbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uKGRlbWFuZERhdGEpO1xyXG5cclxuICAgIC8vIEJpZCBjb25jZW50cmF0aW9uXHJcbiAgICBjb25zdCBjb25jZW50cmF0aW9uID0gdGhpcy5hbmFseXplQmlkQ29uY2VudHJhdGlvbihkZW1hbmREYXRhKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXM6IFwiYXZhaWxhYmxlXCIsXHJcbiAgICAgIHJlY29yZENvdW50OiBkZW1hbmREYXRhLmxlbmd0aCxcclxuICAgICAgcHJpY2VXaXNlRGVtYW5kLFxyXG4gICAgICBjdXRPZmZBbmFseXNpcyxcclxuICAgICAgZGlzdHJpYnV0aW9uLFxyXG4gICAgICBjb25jZW50cmF0aW9uLFxyXG4gICAgICBzdW1tYXJ5OiB7XHJcbiAgICAgICAgdG90YWxRdWFudGl0eTogZGVtYW5kRGF0YS5yZWR1Y2UoXHJcbiAgICAgICAgICAoc3VtLCBkKSA9PiBzdW0gKyBOdW1iZXIoZC5hYnNvbHV0ZVF1YW50aXR5KSxcclxuICAgICAgICAgIDBcclxuICAgICAgICApLFxyXG4gICAgICAgIHRvdGFsQmlkczogZGVtYW5kRGF0YS5yZWR1Y2UoKHN1bSwgZCkgPT4gc3VtICsgZC5hYnNvbHV0ZUJpZENvdW50LCAwKSxcclxuICAgICAgICBwcmljZVJhbmdlOiB7XHJcbiAgICAgICAgICBtaW46IE1hdGgubWluKFxyXG4gICAgICAgICAgICAuLi5kZW1hbmREYXRhLm1hcCgoZCkgPT4gZC5wcmljZSkuZmlsdGVyKChwKSA9PiBwICE9PSBudWxsKVxyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIG1heDogTWF0aC5tYXgoXHJcbiAgICAgICAgICAgIC4uLmRlbWFuZERhdGEubWFwKChkKSA9PiBkLnByaWNlKS5maWx0ZXIoKHApID0+IHAgIT09IG51bGwpXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gUmlzayBhc3Nlc3NtZW50IGNvbXB1dGF0aW9uXHJcbiAgY29tcHV0ZVJpc2tBc3Nlc3NtZW50KGlwb0RhdGEsIGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIGxldCByaXNrU2NvcmUgPSA1MDsgLy8gQmFzZSByaXNrIHNjb3JlXHJcbiAgICBjb25zdCByaXNrRmFjdG9ycyA9IFtdO1xyXG5cclxuICAgIC8vIEdNUCB2b2xhdGlsaXR5IHJpc2tcclxuICAgIGlmIChnbXBEYXRhICYmIGdtcERhdGEubGVuZ3RoID4gMSkge1xyXG4gICAgICBjb25zdCBnbXBWYWx1ZXMgPSBnbXBEYXRhLm1hcCgoZykgPT4gZy52YWx1ZSk7XHJcbiAgICAgIGNvbnN0IHZvbGF0aWxpdHkgPSB0aGlzLmNhbGN1bGF0ZVN0YW5kYXJkRGV2aWF0aW9uKGdtcFZhbHVlcyk7XHJcbiAgICAgIGNvbnN0IGF2Z0dNUCA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZShnbXBWYWx1ZXMpO1xyXG4gICAgICBjb25zdCB2b2xhdGlsaXR5UmF0aW8gPSBhdmdHTVAgPiAwID8gdm9sYXRpbGl0eSAvIGF2Z0dNUCA6IDA7XHJcblxyXG4gICAgICBpZiAodm9sYXRpbGl0eVJhdGlvID4gMC4zKSB7XHJcbiAgICAgICAgcmlza1Njb3JlICs9IDIwO1xyXG4gICAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJISUdIX0dNUF9WT0xBVElMSVRZXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiaGlnaFwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBIaWdoIEdNUCB2b2xhdGlsaXR5ICgkeyh2b2xhdGlsaXR5UmF0aW8gKiAxMDApLnRvRml4ZWQoMSl9JSlgLFxyXG4gICAgICAgICAgbWl0aWdhdGlvbjogXCJDb25zaWRlciB3YWl0aW5nIGZvciBwcmljZSBzdGFiaWxpemF0aW9uXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodm9sYXRpbGl0eVJhdGlvID4gMC4xNSkge1xyXG4gICAgICAgIHJpc2tTY29yZSArPSAxMDtcclxuICAgICAgICByaXNrRmFjdG9ycy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6IFwiTU9ERVJBVEVfR01QX1ZPTEFUSUxJVFlcIixcclxuICAgICAgICAgIGltcGFjdDogXCJtZWRpdW1cIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgTW9kZXJhdGUgR01QIHZvbGF0aWxpdHkgKCR7KHZvbGF0aWxpdHlSYXRpbyAqIDEwMCkudG9GaXhlZCgxKX0lKWAsXHJcbiAgICAgICAgICBtaXRpZ2F0aW9uOiBcIk1vbml0b3IgR01QIHRyZW5kcyBjbG9zZWx5XCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gcmlza1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbkRhdGEgJiYgc3Vic2NyaXB0aW9uRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGxhdGVzdFN1YnNjcmlwdGlvbiA9XHJcbiAgICAgICAgdGhpcy5nZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpO1xyXG4gICAgICBjb25zdCBvdmVyYWxsU3Vic2NyaXB0aW9uID1cclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZU92ZXJhbGxTdWJzY3JpcHRpb24obGF0ZXN0U3Vic2NyaXB0aW9uKTtcclxuXHJcbiAgICAgIGlmIChvdmVyYWxsU3Vic2NyaXB0aW9uIDwgMC41KSB7XHJcbiAgICAgICAgcmlza1Njb3JlICs9IDI1O1xyXG4gICAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJMT1dfU1VCU0NSSVBUSU9OXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiaGlnaFwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBMb3cgc3Vic2NyaXB0aW9uIHJhdGlvICgke292ZXJhbGxTdWJzY3JpcHRpb24udG9GaXhlZCgyKX14KWAsXHJcbiAgICAgICAgICBtaXRpZ2F0aW9uOiBcIlJlY29uc2lkZXIgaW52ZXN0bWVudCBkdWUgdG8gd2VhayBkZW1hbmRcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChvdmVyYWxsU3Vic2NyaXB0aW9uID4gMTApIHtcclxuICAgICAgICByaXNrU2NvcmUgKz0gMTU7XHJcbiAgICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcIk9WRVJfU1VCU0NSSVBUSU9OXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYFZlcnkgaGlnaCBzdWJzY3JpcHRpb24gKCR7b3ZlcmFsbFN1YnNjcmlwdGlvbi50b0ZpeGVkKDIpfXgpYCxcclxuICAgICAgICAgIG1pdGlnYXRpb246IFwiTG93IGFsbG90bWVudCBwcm9iYWJpbGl0eSwgY29uc2lkZXIgYWx0ZXJuYXRpdmVzXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJc3N1ZSBzaXplIHJpc2tcclxuICAgIGNvbnN0IGlzc3VlU2l6ZSA9IE51bWJlcihpcG9EYXRhLmlzc3VlU2l6ZSB8fCAwKTtcclxuICAgIGlmIChpc3N1ZVNpemUgPiA1MDAwICogMTAwMDAwMDApIHtcclxuICAgICAgLy8gNTAwMCBDclxyXG4gICAgICByaXNrU2NvcmUgKz0gMTA7XHJcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiTEFSR0VfSVNTVUVfU0laRVwiLFxyXG4gICAgICAgIGltcGFjdDogXCJtZWRpdW1cIixcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJMYXJnZSBpc3N1ZSBzaXplIG1heSBpbXBhY3QgbGlxdWlkaXR5XCIsXHJcbiAgICAgICAgbWl0aWdhdGlvbjogXCJFbnN1cmUgYWRlcXVhdGUgbWFya2V0IHN1cHBvcnQgcG9zdC1saXN0aW5nXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaWNlIGJhbmQgcmlza1xyXG4gICAgY29uc3QgcHJpY2VSYW5nZSA9IGlwb0RhdGEubWF4UHJpY2UgLSBpcG9EYXRhLm1pblByaWNlO1xyXG4gICAgY29uc3Qgc3ByZWFkUGVyY2VudGFnZSA9XHJcbiAgICAgIGlwb0RhdGEubWluUHJpY2UgPiAwID8gKHByaWNlUmFuZ2UgLyBpcG9EYXRhLm1pblByaWNlKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgaWYgKHNwcmVhZFBlcmNlbnRhZ2UgPiAyMCkge1xyXG4gICAgICByaXNrU2NvcmUgKz0gNTtcclxuICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XHJcbiAgICAgICAgdHlwZTogXCJXSURFX1BSSUNFX0JBTkRcIixcclxuICAgICAgICBpbXBhY3Q6IFwibG93XCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGBXaWRlIHByaWNlIGJhbmQgKCR7c3ByZWFkUGVyY2VudGFnZS50b0ZpeGVkKDEpfSUpYCxcclxuICAgICAgICBtaXRpZ2F0aW9uOiBcIlByaWNlIGRpc2NvdmVyeSBtYXkgYmUgY2hhbGxlbmdpbmdcIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm9ybWFsaXplIHJpc2sgc2NvcmVcclxuICAgIHJpc2tTY29yZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgcmlza1Njb3JlKSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgb3ZlcmFsbFJpc2tTY29yZTogcmlza1Njb3JlLFxyXG4gICAgICByaXNrTGV2ZWw6IHRoaXMuY2F0ZWdvcml6ZVJpc2tMZXZlbChyaXNrU2NvcmUpLFxyXG4gICAgICByaXNrRmFjdG9ycyxcclxuICAgICAgcmVjb21tZW5kYXRpb246IHRoaXMuZ2VuZXJhdGVSaXNrUmVjb21tZW5kYXRpb24ocmlza1Njb3JlLCByaXNrRmFjdG9ycyksXHJcbiAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gUGVyZm9ybWFuY2UgaW5kaWNhdG9ycyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVQZXJmb3JtYW5jZUluZGljYXRvcnMoaXBvRGF0YSwgZ21wRGF0YSwgc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgY29uc3QgaW5kaWNhdG9ycyA9IHt9O1xyXG5cclxuICAgIC8vIE1hcmtldCBzZW50aW1lbnQgaW5kaWNhdG9yXHJcbiAgICBpbmRpY2F0b3JzLm1hcmtldFNlbnRpbWVudCA9IHRoaXMuY2FsY3VsYXRlTWFya2V0U2VudGltZW50KFxyXG4gICAgICBnbXBEYXRhLFxyXG4gICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICApO1xyXG5cclxuICAgIC8vIERlbWFuZCBzdHJlbmd0aCBpbmRpY2F0b3JcclxuICAgIGluZGljYXRvcnMuZGVtYW5kU3RyZW5ndGggPSB0aGlzLmNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoKHN1YnNjcmlwdGlvbkRhdGEpO1xyXG5cclxuICAgIC8vIFByaWNlIG1vbWVudHVtIGluZGljYXRvclxyXG4gICAgaWYgKGdtcERhdGEgJiYgZ21wRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGluZGljYXRvcnMucHJpY2VNb21lbnR1bSA9IHRoaXMuY2FsY3VsYXRlTW9tZW50dW0oXHJcbiAgICAgICAgZ21wRGF0YS5tYXAoKGcpID0+IGcudmFsdWUpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTGlzdGluZyByZWFkaW5lc3MgaW5kaWNhdG9yXHJcbiAgICBpbmRpY2F0b3JzLmxpc3RpbmdSZWFkaW5lc3MgPSB0aGlzLmNhbGN1bGF0ZUxpc3RpbmdSZWFkaW5lc3MoXHJcbiAgICAgIGlwb0RhdGEsXHJcbiAgICAgIHN1YnNjcmlwdGlvbkRhdGFcclxuICAgICk7XHJcblxyXG4gICAgLy8gSW52ZXN0bWVudCBhdHRyYWN0aXZlbmVzcyBzY29yZVxyXG4gICAgaW5kaWNhdG9ycy5hdHRyYWN0aXZlbmVzc1Njb3JlID1cclxuICAgICAgdGhpcy5jYWxjdWxhdGVBdHRyYWN0aXZlbmVzc1Njb3JlKGluZGljYXRvcnMpO1xyXG5cclxuICAgIHJldHVybiBpbmRpY2F0b3JzO1xyXG4gIH1cclxuXHJcbiAgLy8gSGlzdG9yaWNhbCBhbmFseXNpcyBjb21wdXRhdGlvblxyXG4gIGFzeW5jIGNvbXB1dGVIaXN0b3JpY2FsQW5hbHlzaXMoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IGNvbXBhcmFibGUgSVBPcyBmb3IgYmVuY2htYXJraW5nXHJcbiAgICAgIGNvbnN0IGNvbXBhcmFibGVJUE9zID0gYXdhaXQgdGhpcy5nZXRDb21wYXJhYmxlSVBPcyhpcG9JZCwgdGltZVJhbmdlKTtcclxuXHJcbiAgICAgIC8vIEhpc3RvcmljYWwgcGVyZm9ybWFuY2UgbWV0cmljc1xyXG4gICAgICBjb25zdCBoaXN0b3JpY2FsTWV0cmljcyA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlSGlzdG9yaWNhbE1ldHJpY3MoXHJcbiAgICAgICAgaXBvSWQsXHJcbiAgICAgICAgdGltZVJhbmdlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBUcmVuZCBhbmFseXNpcyBvdmVyIHRpbWVcclxuICAgICAgY29uc3QgdHJlbmRzID0gYXdhaXQgdGhpcy5jYWxjdWxhdGVIaXN0b3JpY2FsVHJlbmRzKGlwb0lkLCB0aW1lUmFuZ2UpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0aW1lUmFuZ2UsXHJcbiAgICAgICAgY29tcGFyYWJsZUlQT3M6IGNvbXBhcmFibGVJUE9zLmxlbmd0aCxcclxuICAgICAgICBtZXRyaWNzOiBoaXN0b3JpY2FsTWV0cmljcyxcclxuICAgICAgICB0cmVuZHMsXHJcbiAgICAgICAgYmVuY2htYXJrczogYXdhaXQgdGhpcy5jYWxjdWxhdGVCZW5jaG1hcmtzKGNvbXBhcmFibGVJUE9zKSxcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJIaXN0b3JpY2FsIGFuYWx5c2lzIGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiSGlzdG9yaWNhbCBhbmFseXNpcyB1bmF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJlZGljdGlvbnMgY29tcHV0YXRpb25cclxuICBhc3luYyBjb21wdXRlUHJlZGljdGlvbnMoYW5hbHl0aWNzKSB7XHJcbiAgICBjb25zdCBwcmVkaWN0aW9ucyA9IHt9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIExpc3RpbmcgZ2FpbiBwcmVkaWN0aW9uXHJcbiAgICAgIHByZWRpY3Rpb25zLmxpc3RpbmdHYWluID0gdGhpcy5wcmVkaWN0TGlzdGluZ0dhaW4oYW5hbHl0aWNzKTtcclxuXHJcbiAgICAgIC8vIEFsbG90bWVudCBwcm9iYWJpbGl0eSBwcmVkaWN0aW9uXHJcbiAgICAgIHByZWRpY3Rpb25zLmFsbG90bWVudFByb2JhYmlsaXR5ID1cclxuICAgICAgICB0aGlzLnByZWRpY3RBbGxvdG1lbnRQcm9iYWJpbGl0eShhbmFseXRpY3MpO1xyXG5cclxuICAgICAgLy8gUHJpY2UgdGFyZ2V0IHByZWRpY3Rpb25cclxuICAgICAgcHJlZGljdGlvbnMucHJpY2VUYXJnZXRzID0gdGhpcy5wcmVkaWN0UHJpY2VUYXJnZXRzKGFuYWx5dGljcyk7XHJcblxyXG4gICAgICAvLyBSaXNrLWFkanVzdGVkIHJldHVybnNcclxuICAgICAgcHJlZGljdGlvbnMucmlza0FkanVzdGVkUmV0dXJucyA9IHRoaXMuY2FsY3VsYXRlUmlza0FkanVzdGVkUmV0dXJucyhcclxuICAgICAgICBwcmVkaWN0aW9ucy5saXN0aW5nR2FpbixcclxuICAgICAgICBhbmFseXRpY3Mucmlza0Fzc2Vzc21lbnQub3ZlcmFsbFJpc2tTY29yZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQ29uZmlkZW5jZSBpbnRlcnZhbHNcclxuICAgICAgcHJlZGljdGlvbnMuY29uZmlkZW5jZUludGVydmFscyA9XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVDb25maWRlbmNlSW50ZXJ2YWxzKHByZWRpY3Rpb25zKTtcclxuXHJcbiAgICAgIHByZWRpY3Rpb25zLmxhc3RVcGRhdGVkID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgICBwcmVkaWN0aW9ucy5tb2RlbCA9IFwiSVBPX0FOQUxZVElDU19WMS4wXCI7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiUHJlZGljdGlvbnMgY29tcHV0YXRpb24gZmFpbGVkOlwiLCBlcnJvcik7XHJcbiAgICAgIHByZWRpY3Rpb25zLnN0YXR1cyA9IFwiZXJyb3JcIjtcclxuICAgICAgcHJlZGljdGlvbnMubWVzc2FnZSA9IFwiUHJlZGljdGlvbnMgdW5hdmFpbGFibGVcIjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJlZGljdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvLyBDb21wYXJhdGl2ZSBhbmFseXNpc1xyXG4gIGFzeW5jIGNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzKGlwb0RhdGEpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEZpbmQgc2ltaWxhciBJUE9zIGJ5IHNlY3Rvciwgc2l6ZSwgYW5kIHRpbWUgcGVyaW9kXHJcbiAgICAgIGNvbnN0IHNpbWlsYXJJUE9zID0gYXdhaXQgdGhpcy5maW5kU2ltaWxhcklQT3MoaXBvRGF0YSk7XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgcmVsYXRpdmUgcGVyZm9ybWFuY2VcclxuICAgICAgY29uc3QgcmVsYXRpdmVQZXJmb3JtYW5jZSA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlUmVsYXRpdmVQZXJmb3JtYW5jZShcclxuICAgICAgICBpcG9EYXRhLFxyXG4gICAgICAgIHNpbWlsYXJJUE9zXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBNYXJrZXQgcG9zaXRpb25pbmdcclxuICAgICAgY29uc3QgbWFya2V0UG9zaXRpb25pbmcgPSB0aGlzLmNhbGN1bGF0ZU1hcmtldFBvc2l0aW9uaW5nKFxyXG4gICAgICAgIGlwb0RhdGEsXHJcbiAgICAgICAgc2ltaWxhcklQT3NcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc2ltaWxhcklQT3NDb3VudDogc2ltaWxhcklQT3MubGVuZ3RoLFxyXG4gICAgICAgIHJlbGF0aXZlUGVyZm9ybWFuY2UsXHJcbiAgICAgICAgbWFya2V0UG9zaXRpb25pbmcsXHJcbiAgICAgICAgYmVuY2htYXJrczogYXdhaXQgdGhpcy5jYWxjdWxhdGVJbmR1c3RyeUJlbmNobWFya3MoaXBvRGF0YS5pc3N1ZVR5cGUpLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkNvbXBhcmF0aXZlIGFuYWx5c2lzIGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiQ29tcGFyYXRpdmUgYW5hbHlzaXMgdW5hdmFpbGFibGVcIixcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEluc2lnaHRzIGdlbmVyYXRpb25cclxuICBnZW5lcmF0ZUluc2lnaHRzKGFuYWx5dGljcykge1xyXG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcclxuXHJcbiAgICAvLyBHTVAgaW5zaWdodHNcclxuICAgIGlmIChhbmFseXRpY3MuZ21wQW5hbHl0aWNzLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xyXG4gICAgICBjb25zdCBnbXAgPSBhbmFseXRpY3MuZ21wQW5hbHl0aWNzO1xyXG5cclxuICAgICAgaWYgKGdtcC5zdGF0aXN0aWNzLmN1cnJlbnQgPiBnbXAuc3RhdGlzdGljcy5hdmVyYWdlICogMS4yKSB7XHJcbiAgICAgICAgaW5zaWdodHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcInBvc2l0aXZlXCIsXHJcbiAgICAgICAgICBjYXRlZ29yeTogXCJHTVBcIixcclxuICAgICAgICAgIHRpdGxlOiBcIlN0cm9uZyBHTVAgUGVyZm9ybWFuY2VcIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ3VycmVudCBHTVAgKOKCuSR7Z21wLnN0YXRpc3RpY3MuY3VycmVudH0pIGlzICR7KChnbXAuc3RhdGlzdGljcy5jdXJyZW50IC8gZ21wLnN0YXRpc3RpY3MuYXZlcmFnZSAtIDEpICogMTAwKS50b0ZpeGVkKDEpfSUgYWJvdmUgYXZlcmFnZWAsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiSW5kaWNhdGVzIHN0cm9uZyBtYXJrZXQgZGVtYW5kXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChnbXAudm9sYXRpbGl0eS5sZXZlbCA9PT0gXCJoaWdoXCIpIHtcclxuICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiR01QXCIsXHJcbiAgICAgICAgICB0aXRsZTogXCJIaWdoIFByaWNlIFZvbGF0aWxpdHlcIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgR01QIHNob3dpbmcgaGlnaCB2b2xhdGlsaXR5ICgke2dtcC52b2xhdGlsaXR5LmNvZWZmaWNpZW50fSUpYCxcclxuICAgICAgICAgIGltcGFjdDogXCJJbmNyZWFzZWQgdW5jZXJ0YWludHkgaW4gcHJpY2UgZXhwZWN0YXRpb25zXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gaW5zaWdodHNcclxuICAgIGlmIChhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xyXG4gICAgICBjb25zdCBzdWIgPSBhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzO1xyXG5cclxuICAgICAgaWYgKHN1Yi5vdmVyYWxsLnRvdGFsU3Vic2NyaXB0aW9uID4gNSkge1xyXG4gICAgICAgIGluc2lnaHRzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJwb3NpdGl2ZVwiLFxyXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiU3Vic2NyaXB0aW9uXCIsXHJcbiAgICAgICAgICB0aXRsZTogXCJTdHJvbmcgT3ZlcnN1YnNjcmlwdGlvblwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBJUE8gb3ZlcnN1YnNjcmliZWQgYnkgJHtzdWIub3ZlcmFsbC50b3RhbFN1YnNjcmlwdGlvbi50b0ZpeGVkKDIpfXhgLFxyXG4gICAgICAgICAgaW1wYWN0OiBcIkhpZ2ggaW52ZXN0b3IgaW50ZXJlc3QgYnV0IGxvd2VyIGFsbG90bWVudCBwcm9iYWJpbGl0eVwiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3ViLm92ZXJhbGwudG90YWxTdWJzY3JpcHRpb24gPCAxKSB7XHJcbiAgICAgICAgaW5zaWdodHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcIm5lZ2F0aXZlXCIsXHJcbiAgICAgICAgICBjYXRlZ29yeTogXCJTdWJzY3JpcHRpb25cIixcclxuICAgICAgICAgIHRpdGxlOiBcIlVuZGVyc3Vic2NyaWJlZCBJUE9cIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSVBPIHN1YnNjcmliZWQgb25seSAkeyhzdWIub3ZlcmFsbC50b3RhbFN1YnNjcmlwdGlvbiAqIDEwMCkudG9GaXhlZCgxKX0lYCxcclxuICAgICAgICAgIGltcGFjdDogXCJXZWFrIGludmVzdG9yIGRlbWFuZCwgcG90ZW50aWFsIGxpc3RpbmcgY29uY2VybnNcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJpc2sgaW5zaWdodHNcclxuICAgIGNvbnN0IHJpc2sgPSBhbmFseXRpY3Mucmlza0Fzc2Vzc21lbnQ7XHJcbiAgICBpZiAocmlzay5yaXNrTGV2ZWwgPT09IFwiaGlnaFwiKSB7XHJcbiAgICAgIGluc2lnaHRzLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxyXG4gICAgICAgIGNhdGVnb3J5OiBcIlJpc2tcIixcclxuICAgICAgICB0aXRsZTogXCJIaWdoIFJpc2sgSW52ZXN0bWVudFwiLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgUmlzayBzY29yZSBvZiAke3Jpc2sub3ZlcmFsbFJpc2tTY29yZX0gaW5kaWNhdGVzIGVsZXZhdGVkIHJpc2tgLFxyXG4gICAgICAgIGltcGFjdDogXCJDYXJlZnVsIGNvbnNpZGVyYXRpb24gcmVxdWlyZWQgYmVmb3JlIGludmVzdG1lbnRcIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluc2lnaHRzO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVjb21tZW5kYXRpb25zIGdlbmVyYXRpb25cclxuICBnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhhbmFseXRpY3MpIHtcclxuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IFtdO1xyXG4gICAgY29uc3QgcmlzayA9IGFuYWx5dGljcy5yaXNrQXNzZXNzbWVudC5vdmVyYWxsUmlza1Njb3JlO1xyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID1cclxuICAgICAgYW5hbHl0aWNzLnN1YnNjcmlwdGlvbkFuYWx5dGljcy5vdmVyYWxsPy50b3RhbFN1YnNjcmlwdGlvbiB8fCAwO1xyXG4gICAgY29uc3QgZ21wID0gYW5hbHl0aWNzLmdtcEFuYWx5dGljcy5zdGF0aXN0aWNzPy5jdXJyZW50IHx8IDA7XHJcblxyXG4gICAgLy8gSW52ZXN0bWVudCByZWNvbW1lbmRhdGlvblxyXG4gICAgaWYgKHJpc2sgPCAzMCAmJiBzdWJzY3JpcHRpb24gPiAyICYmIGdtcCA+IDApIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQlVZXCIsXHJcbiAgICAgICAgY29uZmlkZW5jZTogXCJoaWdoXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIkxvdyByaXNrLCBzdHJvbmcgZGVtYW5kLCBwb3NpdGl2ZSBHTVBcIixcclxuICAgICAgICBhY3Rpb246IFwiQ29uc2lkZXIgYXBwbHlpbmcgZm9yIG1heGltdW0gYWxsb2NhdGlvblwiLFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAocmlzayA8IDUwICYmIHN1YnNjcmlwdGlvbiA+IDEpIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiSE9MRFwiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIk1vZGVyYXRlIHJpc2sgd2l0aCBhZGVxdWF0ZSBkZW1hbmRcIixcclxuICAgICAgICBhY3Rpb246IFwiQXBwbHkgd2l0aCBjYXV0aW9uLCBjb25zaWRlciBzbWFsbGVyIGFsbG9jYXRpb25cIixcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHJpc2sgPiA3MCB8fCBzdWJzY3JpcHRpb24gPCAwLjUpIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQVZPSURcIixcclxuICAgICAgICBjb25maWRlbmNlOiBcImhpZ2hcIixcclxuICAgICAgICByZWFzb25pbmc6IFwiSGlnaCByaXNrIG9yIHdlYWsgZGVtYW5kIGluZGljYXRvcnNcIixcclxuICAgICAgICBhY3Rpb246IFwiQ29uc2lkZXIgYWx0ZXJuYXRpdmUgaW52ZXN0bWVudCBvcHBvcnR1bml0aWVzXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRpbWluZyByZWNvbW1lbmRhdGlvbnNcclxuICAgIGlmIChhbmFseXRpY3MucGVyZm9ybWFuY2VJbmRpY2F0b3JzPy5saXN0aW5nUmVhZGluZXNzID4gMC44KSB7XHJcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcclxuICAgICAgICB0eXBlOiBcIlRJTUlOR1wiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIklQTyBhcHBlYXJzIHJlYWR5IGZvciBzdWNjZXNzZnVsIGxpc3RpbmdcIixcclxuICAgICAgICBhY3Rpb246IFwiR29vZCB0aW1pbmcgZm9yIGFwcGxpY2F0aW9uXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbG9jYXRpb24gcmVjb21tZW5kYXRpb25zXHJcbiAgICBpZiAoc3Vic2NyaXB0aW9uID4gMTApIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQUxMT0NBVElPTlwiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwiaGlnaFwiLFxyXG4gICAgICAgIHJlYXNvbmluZzogXCJWZXJ5IGhpZ2ggb3ZlcnN1YnNjcmlwdGlvblwiLFxyXG4gICAgICAgIGFjdGlvbjogXCJBcHBseSBmb3IgbWF4aW11bSByZXRhaWwgcXVvdGEgdG8gaW1wcm92ZSBhbGxvdG1lbnQgY2hhbmNlc1wiLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zO1xyXG4gIH1cclxuXHJcbiAgLy8gVXRpbGl0eSBtZXRob2RzIGZvciBjYWxjdWxhdGlvbnNcclxuICBjYWxjdWxhdGVBdmVyYWdlKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCkgLyB2YWx1ZXMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlTWVkaWFuKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICBjb25zdCBzb3J0ZWQgPSBbLi4udmFsdWVzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKHNvcnRlZC5sZW5ndGggLyAyKTtcclxuICAgIHJldHVybiBzb3J0ZWQubGVuZ3RoICUgMiA9PT0gMFxyXG4gICAgICA/IChzb3J0ZWRbbWlkIC0gMV0gKyBzb3J0ZWRbbWlkXSkgLyAyXHJcbiAgICAgIDogc29ydGVkW21pZF07XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVNb2RlKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICBjb25zdCBmcmVxdWVuY3kgPSB7fTtcclxuICAgIHZhbHVlcy5mb3JFYWNoKCh2YWwpID0+IChmcmVxdWVuY3lbdmFsXSA9IChmcmVxdWVuY3lbdmFsXSB8fCAwKSArIDEpKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmcmVxdWVuY3kpLnJlZHVjZSgoYSwgYikgPT5cclxuICAgICAgZnJlcXVlbmN5W2FdID4gZnJlcXVlbmN5W2JdID8gYSA6IGJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpO1xyXG4gICAgY29uc3QgdmFyaWFuY2UgPVxyXG4gICAgICB2YWx1ZXMucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgTWF0aC5wb3codmFsIC0gYXZnLCAyKSwgMCkgL1xyXG4gICAgICB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2YXJpYW5jZSk7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVWYXJpYW5jZSh2YWx1ZXMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIE1hdGgucG93KHZhbCAtIGF2ZywgMiksIDApIC9cclxuICAgICAgdmFsdWVzLmxlbmd0aFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUNvZWZmaWNpZW50T2ZWYXJpYXRpb24odmFsdWVzKSB7XHJcbiAgICBjb25zdCBhdmcgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2UodmFsdWVzKTtcclxuICAgIGNvbnN0IHN0ZERldiA9IHRoaXMuY2FsY3VsYXRlU3RhbmRhcmREZXZpYXRpb24odmFsdWVzKTtcclxuICAgIHJldHVybiBhdmcgPiAwID8gKHN0ZERldiAvIGF2ZykgKiAxMDAgOiAwO1xyXG4gIH1cclxuXHJcbiAgYW5hbHl6ZVRyZW5kKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA8IDIpXHJcbiAgICAgIHJldHVybiB7IGRpcmVjdGlvbjogXCJzdGFibGVcIiwgc3RyZW5ndGg6IDAgfTtcclxuXHJcbiAgICBjb25zdCByZWNlbnQgPSB2YWx1ZXMuc2xpY2UoMCwgTWF0aC5taW4oNSwgTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMikpKTtcclxuICAgIGNvbnN0IG9sZGVyID0gdmFsdWVzLnNsaWNlKC1NYXRoLm1pbig1LCBNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKSkpO1xyXG5cclxuICAgIGNvbnN0IHJlY2VudEF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZShyZWNlbnQpO1xyXG4gICAgY29uc3Qgb2xkZXJBdmcgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2Uob2xkZXIpO1xyXG5cclxuICAgIGNvbnN0IGNoYW5nZSA9IHJlY2VudEF2ZyAtIG9sZGVyQXZnO1xyXG4gICAgY29uc3QgY2hhbmdlUGVyY2VudCA9IG9sZGVyQXZnID4gMCA/IChjaGFuZ2UgLyBvbGRlckF2ZykgKiAxMDAgOiAwO1xyXG5cclxuICAgIGxldCBkaXJlY3Rpb24gPSBcInN0YWJsZVwiO1xyXG4gICAgbGV0IHN0cmVuZ3RoID0gTWF0aC5hYnMoY2hhbmdlUGVyY2VudCk7XHJcblxyXG4gICAgaWYgKGNoYW5nZVBlcmNlbnQgPiA1KSBkaXJlY3Rpb24gPSBcImJ1bGxpc2hcIjtcclxuICAgIGVsc2UgaWYgKGNoYW5nZVBlcmNlbnQgPCAtNSkgZGlyZWN0aW9uID0gXCJiZWFyaXNoXCI7XHJcblxyXG4gICAgcmV0dXJuIHsgZGlyZWN0aW9uLCBzdHJlbmd0aCwgY2hhbmdlLCBjaGFuZ2VQZXJjZW50IH07XHJcbiAgfVxyXG5cclxuICBhbmFseXplVm9sYXRpbGl0eSh2YWx1ZXMsIHRpbWVzdGFtcHMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKVxyXG4gICAgICByZXR1cm4geyBsZXZlbDogXCJ1bmtub3duXCIsIGNvZWZmaWNpZW50OiAwIH07XHJcblxyXG4gICAgY29uc3QgY29lZmZpY2llbnQgPSB0aGlzLmNhbGN1bGF0ZUNvZWZmaWNpZW50T2ZWYXJpYXRpb24odmFsdWVzKTtcclxuICAgIGxldCBsZXZlbCA9IFwibG93XCI7XHJcblxyXG4gICAgaWYgKGNvZWZmaWNpZW50ID4gMzApIGxldmVsID0gXCJoaWdoXCI7XHJcbiAgICBlbHNlIGlmIChjb2VmZmljaWVudCA+IDE1KSBsZXZlbCA9IFwibWVkaXVtXCI7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGV2ZWwsXHJcbiAgICAgIGNvZWZmaWNpZW50LFxyXG4gICAgICBzdGFuZGFyZERldmlhdGlvbjogdGhpcy5jYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZU1vbWVudHVtKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA8IDMpIHJldHVybiB7IHNjb3JlOiAwLCBkaXJlY3Rpb246IFwibmV1dHJhbFwiIH07XHJcblxyXG4gICAgY29uc3QgcmVjZW50ID0gdmFsdWVzLnNsaWNlKDAsIDMpO1xyXG4gICAgY29uc3QgbW9tZW50dW0gPSByZWNlbnRbMF0gLSByZWNlbnRbMl07XHJcbiAgICBjb25zdCBtb21lbnR1bVBlcmNlbnQgPSByZWNlbnRbMl0gPiAwID8gKG1vbWVudHVtIC8gcmVjZW50WzJdKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgbGV0IGRpcmVjdGlvbiA9IFwibmV1dHJhbFwiO1xyXG4gICAgaWYgKG1vbWVudHVtUGVyY2VudCA+IDIpIGRpcmVjdGlvbiA9IFwicG9zaXRpdmVcIjtcclxuICAgIGVsc2UgaWYgKG1vbWVudHVtUGVyY2VudCA8IC0yKSBkaXJlY3Rpb24gPSBcIm5lZ2F0aXZlXCI7XHJcblxyXG4gICAgcmV0dXJuIHsgc2NvcmU6IG1vbWVudHVtUGVyY2VudCwgZGlyZWN0aW9uLCBhYnNvbHV0ZTogbW9tZW50dW0gfTtcclxuICB9XHJcblxyXG4gIC8vIERhdGEgZmV0Y2hpbmcgbWV0aG9kc1xyXG4gIGFzeW5jIGdldElQT0Jhc2ljRGF0YShpcG9JZCkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS5pUE8uZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiBpcG9JZCB9LFxyXG4gICAgICBpbmNsdWRlOiB7IGNhdGVnb3JpZXM6IHRydWUgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0R01QRGF0YShpcG9JZCwgZGF5cyA9IDMwKSB7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIGRheXMpO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEuZ01QLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBpcG9JZCxcclxuICAgICAgICB0aW1lc3RhbXA6IHsgZ3RlOiBzdGFydERhdGUgfSxcclxuICAgICAgfSxcclxuICAgICAgb3JkZXJCeTogeyB0aW1lc3RhbXA6IFwiZGVzY1wiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFN1YnNjcmlwdGlvbkRhdGEoaXBvSWQsIGRheXMgPSAzMCkge1xyXG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSBkYXlzKTtcclxuXHJcbiAgICByZXR1cm4gYXdhaXQgcHJpc21hLnN1YnNjcmlwdGlvbkRhdGEuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIGlwb0lkLFxyXG4gICAgICAgIHRpbWVzdGFtcDogeyBndGU6IHN0YXJ0RGF0ZSB9LFxyXG4gICAgICB9LFxyXG4gICAgICBvcmRlckJ5OiB7IHRpbWVzdGFtcDogXCJkZXNjXCIgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RGVtYW5kRGF0YShpcG9JZCwgZGF5cyA9IDMwKSB7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIGRheXMpO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEubWFya2V0RGVtYW5kLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBpcG9JZCxcclxuICAgICAgICB0aW1lc3RhbXA6IHsgZ3RlOiBzdGFydERhdGUgfSxcclxuICAgICAgfSxcclxuICAgICAgb3JkZXJCeTogeyB0aW1lc3RhbXA6IFwiZGVzY1wiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldElQT0NhdGVnb3JpZXMoaXBvSWQpIHtcclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEuaVBPQ2F0ZWdvcnkuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZTogeyBpcG9JZCB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBDYWNoZSBtYW5hZ2VtZW50XHJcbiAgYXN5bmMgZ2V0Q2FjaGVkQW5hbHl0aWNzKGtleSkge1xyXG4gICAgLy8gQ2hlY2sgaW4tbWVtb3J5IGNhY2hlIGZpcnN0XHJcbiAgICBpZiAodGhpcy5hbmFseXRpY3NDYWNoZS5oYXMoa2V5KSkge1xyXG4gICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmFuYWx5dGljc0NhY2hlLmdldChrZXkpO1xyXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIGNhY2hlZC50aW1lc3RhbXAgPCB0aGlzLmNhY2hlVFRMLkRFVEFJTEVEKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZC5kYXRhO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYW5hbHl0aWNzQ2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgUmVkaXMgY2FjaGVcclxuICAgIHJldHVybiBhd2FpdCBjYWNoZS5nZXQoa2V5KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNldENhY2hlZEFuYWx5dGljcyhrZXksIGRhdGEsIHR0bCkge1xyXG4gICAgLy8gU2V0IGluLW1lbW9yeSBjYWNoZVxyXG4gICAgdGhpcy5hbmFseXRpY3NDYWNoZS5zZXQoa2V5LCB7XHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNldCBpbiBSZWRpc1xyXG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlLnNldChrZXksIGRhdGEsIHR0bCAvIDEwMDApO1xyXG4gIH1cclxuXHJcbiAgLy8gSGVscGVyIG1ldGhvZHNcclxuICBjYXRlZ29yaXplSXNzdWVTaXplKHNpemUpIHtcclxuICAgIGlmIChzaXplIDwgNTAwICogMTAwMDAwMDApIHJldHVybiBcInNtYWxsXCI7IC8vIDwgNTAwIENyXHJcbiAgICBpZiAoc2l6ZSA8IDIwMDAgKiAxMDAwMDAwMCkgcmV0dXJuIFwibWVkaXVtXCI7IC8vIDwgMjAwMCBDclxyXG4gICAgcmV0dXJuIFwibGFyZ2VcIjsgLy8gPj0gMjAwMCBDclxyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlRHVyYXRpb24oc3RhcnREYXRlLCBlbmREYXRlKSB7XHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZShlbmREYXRlKTtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcbiAgfVxyXG5cclxuICBjYXRlZ29yaXplUmlza0xldmVsKHNjb3JlKSB7XHJcbiAgICBpZiAoc2NvcmUgPCAzMCkgcmV0dXJuIFwibG93XCI7XHJcbiAgICBpZiAoc2NvcmUgPCA2MCkgcmV0dXJuIFwibWVkaXVtXCI7XHJcbiAgICByZXR1cm4gXCJoaWdoXCI7XHJcbiAgfVxyXG5cclxuICBnZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIGNvbnN0IGxhdGVzdCA9IHt9O1xyXG5cclxuICAgIHN1YnNjcmlwdGlvbkRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSBpdGVtLmNhdGVnb3J5ICsgKGl0ZW0uc3ViQ2F0ZWdvcnkgfHwgXCJcIik7XHJcbiAgICAgIGlmICghbGF0ZXN0W2tleV0gfHwgaXRlbS50aW1lc3RhbXAgPiBsYXRlc3Rba2V5XS50aW1lc3RhbXApIHtcclxuICAgICAgICBsYXRlc3Rba2V5XSA9IGl0ZW07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBsYXRlc3Q7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVPdmVyYWxsU3Vic2NyaXB0aW9uKGxhdGVzdEJ5Q2F0ZWdvcnkpIHtcclxuICAgIGNvbnN0IHJhdGlvcyA9IE9iamVjdC52YWx1ZXMobGF0ZXN0QnlDYXRlZ29yeSkubWFwKFxyXG4gICAgICAoaXRlbSkgPT4gaXRlbS5zdWJzY3JpcHRpb25SYXRpbyB8fCAwXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJhdGlvcy5sZW5ndGggPiAwID8gTWF0aC5tYXgoLi4ucmF0aW9zKSA6IDA7XHJcbiAgfVxyXG5cclxuICAvLyBQZXJmb3JtYW5jZSB0cmFja2luZ1xyXG4gIHVwZGF0ZU1ldHJpY3MoY29tcHV0YXRpb25UaW1lKSB7XHJcbiAgICB0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkKys7XHJcbiAgICB0aGlzLm1ldHJpY3MuYXZlcmFnZUNvbXB1dGF0aW9uVGltZSA9XHJcbiAgICAgICh0aGlzLm1ldHJpY3MuYXZlcmFnZUNvbXB1dGF0aW9uVGltZSAqXHJcbiAgICAgICAgKHRoaXMubWV0cmljcy5jb21wdXRhdGlvbnNQZXJmb3JtZWQgLSAxKSArXHJcbiAgICAgICAgY29tcHV0YXRpb25UaW1lKSAvXHJcbiAgICAgIHRoaXMubWV0cmljcy5jb21wdXRhdGlvbnNQZXJmb3JtZWQ7XHJcbiAgfVxyXG5cclxuICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKSB7XHJcbiAgICBjb25zdCBoaXRSYXRlID1cclxuICAgICAgdGhpcy5tZXRyaWNzLmNhY2hlSGl0cyArIHRoaXMubWV0cmljcy5jYWNoZU1pc3NlcyA+IDBcclxuICAgICAgICA/IChcclxuICAgICAgICAgICAgKHRoaXMubWV0cmljcy5jYWNoZUhpdHMgL1xyXG4gICAgICAgICAgICAgICh0aGlzLm1ldHJpY3MuY2FjaGVIaXRzICsgdGhpcy5tZXRyaWNzLmNhY2hlTWlzc2VzKSkgKlxyXG4gICAgICAgICAgICAxMDBcclxuICAgICAgICAgICkudG9GaXhlZCgyKVxyXG4gICAgICAgIDogXCIwLjAwXCI7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5tZXRyaWNzLFxyXG4gICAgICBjYWNoZUhpdFJhdGU6IGAke2hpdFJhdGV9JWAsXHJcbiAgICAgIGF2ZXJhZ2VDb21wdXRhdGlvblRpbWU6IE1hdGgucm91bmQodGhpcy5tZXRyaWNzLmF2ZXJhZ2VDb21wdXRhdGlvblRpbWUpLFxyXG4gICAgICBzdWNjZXNzUmF0ZTpcclxuICAgICAgICB0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkID4gMFxyXG4gICAgICAgICAgPyAoXHJcbiAgICAgICAgICAgICAgKCh0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkIC0gdGhpcy5tZXRyaWNzLmVycm9ycykgL1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRyaWNzLmNvbXB1dGF0aW9uc1BlcmZvcm1lZCkgKlxyXG4gICAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgICApLnRvRml4ZWQoMilcclxuICAgICAgICAgIDogXCIxMDAuMDBcIixcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBQbGFjZWhvbGRlciBtZXRob2RzIGZvciBhZHZhbmNlZCBmZWF0dXJlcyAodG8gYmUgaW1wbGVtZW50ZWQpXHJcbiAgYXN5bmMgZ2V0Q29tcGFyYWJsZUlQT3MoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICBhc3luYyBjYWxjdWxhdGVIaXN0b3JpY2FsTWV0cmljcyhpcG9JZCwgdGltZVJhbmdlKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG4gIGFzeW5jIGNhbGN1bGF0ZUhpc3RvcmljYWxUcmVuZHMoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuICBhc3luYyBjYWxjdWxhdGVCZW5jaG1hcmtzKGNvbXBhcmFibGVJUE9zKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG4gIGFzeW5jIGZpbmRTaW1pbGFySVBPcyhpcG9EYXRhKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIGFzeW5jIGNhbGN1bGF0ZVJlbGF0aXZlUGVyZm9ybWFuY2UoaXBvRGF0YSwgc2ltaWxhcklQT3MpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbiAgY2FsY3VsYXRlTWFya2V0UG9zaXRpb25pbmcoaXBvRGF0YSwgc2ltaWxhcklQT3MpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbiAgYXN5bmMgY2FsY3VsYXRlSW5kdXN0cnlCZW5jaG1hcmtzKGlzc3VlVHlwZSkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgcHJlZGljdExpc3RpbmdHYWluKGFuYWx5dGljcykge1xyXG4gICAgY29uc3QgZ21wID0gYW5hbHl0aWNzLmdtcEFuYWx5dGljcy5zdGF0aXN0aWNzPy5jdXJyZW50IHx8IDA7XHJcbiAgICBjb25zdCByaXNrID0gYW5hbHl0aWNzLnJpc2tBc3Nlc3NtZW50Lm92ZXJhbGxSaXNrU2NvcmUgfHwgNTA7XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPVxyXG4gICAgICBhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzLm92ZXJhbGw/LnRvdGFsU3Vic2NyaXB0aW9uIHx8IDE7XHJcblxyXG4gICAgLy8gU2ltcGxlIHByZWRpY3Rpb24gbW9kZWwgKGVuaGFuY2Ugd2l0aCBNTClcclxuICAgIGxldCBwcmVkaWN0aW9uID0gZ21wICogMC44OyAvLyBDb25zZXJ2YXRpdmUgZXN0aW1hdGVcclxuXHJcbiAgICAvLyBBZGp1c3QgZm9yIHJpc2tcclxuICAgIHByZWRpY3Rpb24gKj0gMSAtIHJpc2sgLyAyMDA7IC8vIFJlZHVjZSBieSBoYWxmIHRoZSByaXNrIHBlcmNlbnRhZ2VcclxuXHJcbiAgICAvLyBBZGp1c3QgZm9yIHN1YnNjcmlwdGlvblxyXG4gICAgaWYgKHN1YnNjcmlwdGlvbiA+IDUpXHJcbiAgICAgIHByZWRpY3Rpb24gKj0gMC45OyAvLyBIaWdoIHN1YnNjcmlwdGlvbiBtYXkgbGltaXQgZ2FpbnNcclxuICAgIGVsc2UgaWYgKHN1YnNjcmlwdGlvbiA8IDEpIHByZWRpY3Rpb24gKj0gMC43OyAvLyBMb3cgc3Vic2NyaXB0aW9uIGlzIGJlYXJpc2hcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWx1ZTogTWF0aC5yb3VuZChwcmVkaWN0aW9uKSxcclxuICAgICAgY29uZmlkZW5jZTogMC42LCAvLyA2MCUgY29uZmlkZW5jZVxyXG4gICAgICByYW5nZToge1xyXG4gICAgICAgIG1pbjogTWF0aC5yb3VuZChwcmVkaWN0aW9uICogMC43KSxcclxuICAgICAgICBtYXg6IE1hdGgucm91bmQocHJlZGljdGlvbiAqIDEuMyksXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJlZGljdEFsbG90bWVudFByb2JhYmlsaXR5KGFuYWx5dGljcykge1xyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID1cclxuICAgICAgYW5hbHl0aWNzLnN1YnNjcmlwdGlvbkFuYWx5dGljcy5vdmVyYWxsPy50b3RhbFN1YnNjcmlwdGlvbiB8fCAxO1xyXG5cclxuICAgIGxldCBwcm9iYWJpbGl0eSA9IDEwMDtcclxuICAgIGlmIChzdWJzY3JpcHRpb24gPiAxKSB7XHJcbiAgICAgIHByb2JhYmlsaXR5ID0gTWF0aC5taW4oOTUsIDEwMCAvIHN1YnNjcmlwdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmV0YWlsOiBNYXRoLnJvdW5kKHByb2JhYmlsaXR5KSxcclxuICAgICAgY29uZmlkZW5jZTogMC44LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByZWRpY3RQcmljZVRhcmdldHMoYW5hbHl0aWNzKSB7XHJcbiAgICBjb25zdCBnbXAgPSBhbmFseXRpY3MuZ21wQW5hbHl0aWNzLnN0YXRpc3RpY3M/LmN1cnJlbnQgfHwgMDtcclxuICAgIGNvbnN0IGJhc2VQcmljZSA9IGFuYWx5dGljcy5iYXNpY01ldHJpY3M/LnByaWNlUmFuZ2U/Lm1heCB8fCAwO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbnNlcnZhdGl2ZTogYmFzZVByaWNlICsgZ21wICogMC41LFxyXG4gICAgICBtb2RlcmF0ZTogYmFzZVByaWNlICsgZ21wICogMC44LFxyXG4gICAgICBhZ2dyZXNzaXZlOiBiYXNlUHJpY2UgKyBnbXAgKiAxLjIsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlUmlza0FkanVzdGVkUmV0dXJucyhsaXN0aW5nR2Fpbiwgcmlza1Njb3JlKSB7XHJcbiAgICBjb25zdCBnYWluID0gbGlzdGluZ0dhaW4udmFsdWUgfHwgMDtcclxuICAgIGNvbnN0IHJpc2sgPSByaXNrU2NvcmUgfHwgNTA7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmlza0FkanVzdGVkUmV0dXJuOiBnYWluICogKDEgLSByaXNrIC8gMTAwKSxcclxuICAgICAgc2hhcnBlUmF0aW86IHJpc2sgPiAwID8gZ2FpbiAvIHJpc2sgOiAwLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUNvbmZpZGVuY2VJbnRlcnZhbHMocHJlZGljdGlvbnMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxpc3RpbmdHYWluOiB7XHJcbiAgICAgICAgY29uZmlkZW5jZTkwOiB7XHJcbiAgICAgICAgICBtaW46IHByZWRpY3Rpb25zLmxpc3RpbmdHYWluPy5yYW5nZT8ubWluIHx8IDAsXHJcbiAgICAgICAgICBtYXg6IHByZWRpY3Rpb25zLmxpc3RpbmdHYWluPy5yYW5nZT8ubWF4IHx8IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBBZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzXHJcbiAgYW5hbHl6ZVZvbHVtZSh2b2x1bWVzLCB2YWx1ZXMpIHtcclxuICAgIHJldHVybiB7IGNvcnJlbGF0aW9uOiAwLCB0cmVuZDogXCJzdGFibGVcIiB9O1xyXG4gIH1cclxuICBjYWxjdWxhdGVQcmljZVRhcmdldHMoc3RhdHMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1cHBvcnQ6IHN0YXRzLm1pbixcclxuICAgICAgcmVzaXN0YW5jZTogc3RhdHMubWF4LFxyXG4gICAgICBwaXZvdDogc3RhdHMuYXZlcmFnZSxcclxuICAgIH07XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUdNUFJpc2tNZXRyaWNzKHZhbHVlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsdWVBdFJpc2s6IHRoaXMuY2FsY3VsYXRlU3RhbmRhcmREZXZpYXRpb24odmFsdWVzKSAqIDEuNjQ1LCAvLyA5NSUgVmFSXHJcbiAgICAgIG1heERyYXdkb3duOiB0aGlzLmNhbGN1bGF0ZU1heERyYXdkb3duKHZhbHVlcyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlTWF4RHJhd2Rvd24odmFsdWVzKSB7XHJcbiAgICBsZXQgbWF4RHJhd2Rvd24gPSAwO1xyXG4gICAgbGV0IHBlYWsgPSB2YWx1ZXNbMF07XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHZhbHVlc1tpXSA+IHBlYWspIHtcclxuICAgICAgICBwZWFrID0gdmFsdWVzW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGRyYXdkb3duID0gKHBlYWsgLSB2YWx1ZXNbaV0pIC8gcGVhaztcclxuICAgICAgICBtYXhEcmF3ZG93biA9IE1hdGgubWF4KG1heERyYXdkb3duLCBkcmF3ZG93bik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWF4RHJhd2Rvd24gKiAxMDA7IC8vIFJldHVybiBhcyBwZXJjZW50YWdlXHJcbiAgfVxyXG5cclxuICBhbmFseXplU3Vic2NyaXB0aW9uUGF0dGVybnMoc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgdHJlbmQ6IFwiaW5jcmVhc2luZ1wiIH07XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUFsbG90bWVudFByb2JhYmlsaXRpZXMobGF0ZXN0QnlDYXRlZ29yeSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0QnlDYXRlZ29yeSkpIHtcclxuICAgICAgY29uc3QgcmF0aW8gPSBkYXRhLnN1YnNjcmlwdGlvblJhdGlvIHx8IDE7XHJcbiAgICAgIHJlc3VsdFtjYXRlZ29yeV0gPSByYXRpbyA+IDEgPyBNYXRoLm1pbig5NSwgMTAwIC8gcmF0aW8pIDogOTU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVTdWJzY3JpcHRpb25JbnNpZ2h0cyhvdmVyYWxsLCBjYXRlZ29yaWVzKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIGFuYWx5emVQcmljZVdpc2VEZW1hbmQoZGVtYW5kRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgZGlzdHJpYnV0aW9uOiBcIm5vcm1hbFwiIH07XHJcbiAgfVxyXG4gIGFuYWx5emVDdXRPZmZEZW1hbmQoZGVtYW5kRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgcGVyY2VudGFnZTogMCB9O1xyXG4gIH1cclxuICBhbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uKGRlbWFuZERhdGEpIHtcclxuICAgIHJldHVybiB7IGNvbmNlbnRyYXRpb246IFwiZGlzdHJpYnV0ZWRcIiB9O1xyXG4gIH1cclxuICBhbmFseXplQmlkQ29uY2VudHJhdGlvbihkZW1hbmREYXRhKSB7XHJcbiAgICByZXR1cm4geyBoZXJmaW5kYWhsSW5kZXg6IDAgfTtcclxuICB9XHJcbiAgY2FsY3VsYXRlTWFya2V0U2VudGltZW50KGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIHJldHVybiAwLjU7XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoKHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIHJldHVybiAwLjU7XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUxpc3RpbmdSZWFkaW5lc3MoaXBvRGF0YSwgc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgcmV0dXJuIDAuODtcclxuICB9XHJcbiAgY2FsY3VsYXRlQXR0cmFjdGl2ZW5lc3NTY29yZShpbmRpY2F0b3JzKSB7XHJcbiAgICByZXR1cm4gMC43O1xyXG4gIH1cclxuICBjYWxjdWxhdGVUaW1lc3BhbihkYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGZpcnN0ID0gbmV3IERhdGUoZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnRpbWVzdGFtcCk7XHJcbiAgICBjb25zdCBsYXN0ID0gbmV3IERhdGUoZGF0YVswXS50aW1lc3RhbXApO1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCgobGFzdCAtIGZpcnN0KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcbiAgfVxyXG4gIGdlbmVyYXRlUmlza1JlY29tbWVuZGF0aW9uKHNjb3JlLCBmYWN0b3JzKSB7XHJcbiAgICBpZiAoc2NvcmUgPCAzMClcclxuICAgICAgcmV0dXJuIFwiTG93IHJpc2sgaW52ZXN0bWVudCwgc3VpdGFibGUgZm9yIGNvbnNlcnZhdGl2ZSBpbnZlc3RvcnNcIjtcclxuICAgIGlmIChzY29yZSA8IDYwKSByZXR1cm4gXCJNb2RlcmF0ZSByaXNrLCBzdWl0YWJsZSBmb3IgYmFsYW5jZWQgcG9ydGZvbGlvc1wiO1xyXG4gICAgcmV0dXJuIFwiSGlnaCByaXNrIGludmVzdG1lbnQsIHN1aXRhYmxlIG9ubHkgZm9yIGFnZ3Jlc3NpdmUgaW52ZXN0b3JzXCI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXHJcbmV4cG9ydCBjb25zdCBhbmFseXRpY3NTZXJ2aWNlID0gbmV3IEFuYWx5dGljc1NlcnZpY2UoKTtcclxuXHJcbi8vIENsZWFudXAgb2xkIGNhY2hlIGVudHJpZXMgcGVyaW9kaWNhbGx5XHJcbnNldEludGVydmFsKFxyXG4gICgpID0+IHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhbmFseXRpY3NTZXJ2aWNlLmFuYWx5dGljc0NhY2hlLmVudHJpZXMoKSkge1xyXG4gICAgICBpZiAobm93IC0gdmFsdWUudGltZXN0YW1wID4gYW5hbHl0aWNzU2VydmljZS5jYWNoZVRUTC5ERVRBSUxFRCkge1xyXG4gICAgICAgIGFuYWx5dGljc1NlcnZpY2UuYW5hbHl0aWNzQ2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIDEwICogNjAgKiAxMDAwXHJcbik7IC8vIEV2ZXJ5IDEwIG1pbnV0ZXNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFuYWx5dGljc1NlcnZpY2U7XHJcbiJdLCJuYW1lcyI6WyJwcmlzbWEiLCJjYWNoZSIsIkFuYWx5dGljc1NlcnZpY2UiLCJjb25zdHJ1Y3RvciIsIm1ldHJpY3MiLCJjb21wdXRhdGlvbnNQZXJmb3JtZWQiLCJjYWNoZUhpdHMiLCJjYWNoZU1pc3NlcyIsImF2ZXJhZ2VDb21wdXRhdGlvblRpbWUiLCJlcnJvcnMiLCJhbmFseXRpY3NDYWNoZSIsIk1hcCIsImNhY2hlVFRMIiwiQkFTSUMiLCJERVRBSUxFRCIsIkhJU1RPUklDQUwiLCJQUkVESUNUSU9OUyIsInJpc2tXZWlnaHRzIiwiR01QX1ZPTEFUSUxJVFkiLCJTVUJTQ1JJUFRJT05fUkFUSU8iLCJJU1NVRV9TSVpFIiwiTUFSS0VUX0NPTkRJVElPTlMiLCJTRUNUT1JfUEVSRk9STUFOQ0UiLCJwcmVkaWN0aW9uTW9kZWxzIiwiTElTVElOR19HQUlOIiwiZmFjdG9ycyIsIndlaWdodHMiLCJBTExPVE1FTlRfUFJPQkFCSUxJVFkiLCJjb21wdXRlSVBPQW5hbHl0aWNzIiwiaXBvSWQiLCJvcHRpb25zIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImluY2x1ZGVIaXN0b3JpY2FsIiwiaW5jbHVkZVByZWRpY3Rpb25zIiwidGltZVJhbmdlIiwicmVmcmVzaENhY2hlIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJnZXRDYWNoZWRBbmFseXRpY3MiLCJpcG9EYXRhIiwiZ21wRGF0YSIsInN1YnNjcmlwdGlvbkRhdGEiLCJkZW1hbmREYXRhIiwiY2F0ZWdvcnlEYXRhIiwiUHJvbWlzZSIsImFsbCIsImdldElQT0Jhc2ljRGF0YSIsImdldEdNUERhdGEiLCJnZXRTdWJzY3JpcHRpb25EYXRhIiwiZ2V0RGVtYW5kRGF0YSIsImdldElQT0NhdGVnb3JpZXMiLCJFcnJvciIsImFuYWx5dGljcyIsInN5bWJvbCIsIm5hbWUiLCJzdGF0dXMiLCJjb21wdXRlZEF0IiwidG9JU09TdHJpbmciLCJiYXNpY01ldHJpY3MiLCJjb21wdXRlQmFzaWNNZXRyaWNzIiwiZ21wQW5hbHl0aWNzIiwiY29tcHV0ZUdNUEFuYWx5dGljcyIsInN1YnNjcmlwdGlvbkFuYWx5dGljcyIsImNvbXB1dGVTdWJzY3JpcHRpb25BbmFseXRpY3MiLCJkZW1hbmRBbmFseXRpY3MiLCJjb21wdXRlRGVtYW5kQW5hbHl0aWNzIiwicmlza0Fzc2Vzc21lbnQiLCJjb21wdXRlUmlza0Fzc2Vzc21lbnQiLCJwZXJmb3JtYW5jZUluZGljYXRvcnMiLCJjb21wdXRlUGVyZm9ybWFuY2VJbmRpY2F0b3JzIiwiaGlzdG9yaWNhbEFuYWx5c2lzIiwiY29tcHV0ZUhpc3RvcmljYWxBbmFseXNpcyIsInByZWRpY3Rpb25zIiwiY29tcHV0ZVByZWRpY3Rpb25zIiwiY29tcGFyYXRpdmVBbmFseXNpcyIsImNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzIiwiaW5zaWdodHMiLCJnZW5lcmF0ZUluc2lnaHRzIiwicmVjb21tZW5kYXRpb25zIiwiZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMiLCJzZXRDYWNoZWRBbmFseXRpY3MiLCJjb21wdXRhdGlvblRpbWUiLCJ1cGRhdGVNZXRyaWNzIiwiZXJyb3IiLCJjb25zb2xlIiwicHJpY2VSYW5nZSIsIm1heFByaWNlIiwibWluUHJpY2UiLCJpc3N1ZVNpemUiLCJOdW1iZXIiLCJsb3RWYWx1ZSIsImxvdFNpemUiLCJtaW4iLCJtYXgiLCJzcHJlYWQiLCJzcHJlYWRQZXJjZW50YWdlIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJpc3N1ZSIsInNpemUiLCJzaXplQ2F0ZWdvcnkiLCJjYXRlZ29yaXplSXNzdWVTaXplIiwiZmFjZVZhbHVlIiwidGltZWxpbmUiLCJvcGVuRGF0ZSIsImNsb3NlRGF0ZSIsImxpc3RpbmdEYXRlIiwiZHVyYXRpb25EYXlzIiwiY2FsY3VsYXRlRHVyYXRpb24iLCJkYXlzVG9MaXN0aW5nIiwidHlwZSIsImlzc3VlVHlwZSIsInN1YlR5cGUiLCJyZWdpc3RyYXIiLCJsZW5ndGgiLCJtZXNzYWdlIiwidmFsdWVzIiwibWFwIiwiZyIsInZhbHVlIiwicGVyY2VudGFnZXMiLCJwZXJjZW50YWdlIiwidm9sdW1lcyIsInZvbHVtZSIsInN0YXRzIiwiY3VycmVudCIsImF2ZXJhZ2UiLCJjYWxjdWxhdGVBdmVyYWdlIiwibWVkaWFuIiwiY2FsY3VsYXRlTWVkaWFuIiwibW9kZSIsImNhbGN1bGF0ZU1vZGUiLCJNYXRoIiwicmFuZ2UiLCJzdGFuZGFyZERldmlhdGlvbiIsImNhbGN1bGF0ZVN0YW5kYXJkRGV2aWF0aW9uIiwidmFyaWFuY2UiLCJjYWxjdWxhdGVWYXJpYW5jZSIsImNvZWZmaWNpZW50IiwiY2FsY3VsYXRlQ29lZmZpY2llbnRPZlZhcmlhdGlvbiIsInRyZW5kIiwiYW5hbHl6ZVRyZW5kIiwidm9sYXRpbGl0eSIsImFuYWx5emVWb2xhdGlsaXR5IiwidGltZXN0YW1wIiwidm9sdW1lQW5hbHlzaXMiLCJhbmFseXplVm9sdW1lIiwibW9tZW50dW0iLCJjYWxjdWxhdGVNb21lbnR1bSIsInJlY29yZENvdW50IiwidGltZXNwYW4iLCJjYWxjdWxhdGVUaW1lc3BhbiIsInN0YXRpc3RpY3MiLCJwcmljZVRhcmdldHMiLCJjYWxjdWxhdGVQcmljZVRhcmdldHMiLCJyaXNrTWV0cmljcyIsImNhbGN1bGF0ZUdNUFJpc2tNZXRyaWNzIiwibGF0ZXN0QnlDYXRlZ29yeSIsImdldExhdGVzdFN1YnNjcmlwdGlvbkJ5Q2F0ZWdvcnkiLCJvdmVyYWxsTWV0cmljcyIsInRvdGFsU3Vic2NyaXB0aW9uIiwiY2FsY3VsYXRlT3ZlcmFsbFN1YnNjcmlwdGlvbiIsImlzT3ZlcnN1YnNjcmliZWQiLCJvdmVyc3Vic2NyaXB0aW9uUmF0aW8iLCJ0b3RhbEFwcGxpY2F0aW9ucyIsInRvdGFsUXVhbnRpdHkiLCJCaWdJbnQiLCJjYXRlZ29yeUFuYWx5c2lzIiwiY2F0ZWdvcnkiLCJkYXRhIiwiT2JqZWN0IiwiZW50cmllcyIsInN1YnNjcmlwdGlvblJhdGlvIiwicXVhbnRpdHkiLCJ0b1N0cmluZyIsImJpZENvdW50IiwiYXZlcmFnZUJpZFNpemUiLCJwYXR0ZXJucyIsImFuYWx5emVTdWJzY3JpcHRpb25QYXR0ZXJucyIsImFsbG90bWVudFByb2JhYmlsaXR5IiwiY2FsY3VsYXRlQWxsb3RtZW50UHJvYmFiaWxpdGllcyIsIm92ZXJhbGwiLCJjYXRlZ29yaWVzIiwiZ2VuZXJhdGVTdWJzY3JpcHRpb25JbnNpZ2h0cyIsInByaWNlV2lzZURlbWFuZCIsImFuYWx5emVQcmljZVdpc2VEZW1hbmQiLCJjdXRPZmZBbmFseXNpcyIsImFuYWx5emVDdXRPZmZEZW1hbmQiLCJkaXN0cmlidXRpb24iLCJhbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uIiwiY29uY2VudHJhdGlvbiIsImFuYWx5emVCaWRDb25jZW50cmF0aW9uIiwic3VtbWFyeSIsInJlZHVjZSIsInN1bSIsImQiLCJhYnNvbHV0ZVF1YW50aXR5IiwidG90YWxCaWRzIiwiYWJzb2x1dGVCaWRDb3VudCIsInByaWNlIiwiZmlsdGVyIiwicCIsInJpc2tTY29yZSIsInJpc2tGYWN0b3JzIiwiZ21wVmFsdWVzIiwiYXZnR01QIiwidm9sYXRpbGl0eVJhdGlvIiwicHVzaCIsImltcGFjdCIsImRlc2NyaXB0aW9uIiwibWl0aWdhdGlvbiIsImxhdGVzdFN1YnNjcmlwdGlvbiIsIm92ZXJhbGxTdWJzY3JpcHRpb24iLCJvdmVyYWxsUmlza1Njb3JlIiwicmlza0xldmVsIiwiY2F0ZWdvcml6ZVJpc2tMZXZlbCIsInJlY29tbWVuZGF0aW9uIiwiZ2VuZXJhdGVSaXNrUmVjb21tZW5kYXRpb24iLCJsYXN0VXBkYXRlZCIsImluZGljYXRvcnMiLCJtYXJrZXRTZW50aW1lbnQiLCJjYWxjdWxhdGVNYXJrZXRTZW50aW1lbnQiLCJkZW1hbmRTdHJlbmd0aCIsImNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoIiwicHJpY2VNb21lbnR1bSIsImxpc3RpbmdSZWFkaW5lc3MiLCJjYWxjdWxhdGVMaXN0aW5nUmVhZGluZXNzIiwiYXR0cmFjdGl2ZW5lc3NTY29yZSIsImNhbGN1bGF0ZUF0dHJhY3RpdmVuZXNzU2NvcmUiLCJjb21wYXJhYmxlSVBPcyIsImdldENvbXBhcmFibGVJUE9zIiwiaGlzdG9yaWNhbE1ldHJpY3MiLCJjYWxjdWxhdGVIaXN0b3JpY2FsTWV0cmljcyIsInRyZW5kcyIsImNhbGN1bGF0ZUhpc3RvcmljYWxUcmVuZHMiLCJiZW5jaG1hcmtzIiwiY2FsY3VsYXRlQmVuY2htYXJrcyIsImxpc3RpbmdHYWluIiwicHJlZGljdExpc3RpbmdHYWluIiwicHJlZGljdEFsbG90bWVudFByb2JhYmlsaXR5IiwicHJlZGljdFByaWNlVGFyZ2V0cyIsInJpc2tBZGp1c3RlZFJldHVybnMiLCJjYWxjdWxhdGVSaXNrQWRqdXN0ZWRSZXR1cm5zIiwiY29uZmlkZW5jZUludGVydmFscyIsImNhbGN1bGF0ZUNvbmZpZGVuY2VJbnRlcnZhbHMiLCJtb2RlbCIsInNpbWlsYXJJUE9zIiwiZmluZFNpbWlsYXJJUE9zIiwicmVsYXRpdmVQZXJmb3JtYW5jZSIsImNhbGN1bGF0ZVJlbGF0aXZlUGVyZm9ybWFuY2UiLCJtYXJrZXRQb3NpdGlvbmluZyIsImNhbGN1bGF0ZU1hcmtldFBvc2l0aW9uaW5nIiwic2ltaWxhcklQT3NDb3VudCIsImNhbGN1bGF0ZUluZHVzdHJ5QmVuY2htYXJrcyIsImdtcCIsInRpdGxlIiwibGV2ZWwiLCJzdWIiLCJyaXNrIiwic3Vic2NyaXB0aW9uIiwiY29uZmlkZW5jZSIsInJlYXNvbmluZyIsImFjdGlvbiIsInZhbCIsInNvcnRlZCIsInNvcnQiLCJhIiwiYiIsIm1pZCIsImZsb29yIiwiZnJlcXVlbmN5IiwiZm9yRWFjaCIsImtleXMiLCJhdmciLCJwb3ciLCJzcXJ0Iiwic3RkRGV2IiwiZGlyZWN0aW9uIiwic3RyZW5ndGgiLCJyZWNlbnQiLCJzbGljZSIsIm9sZGVyIiwicmVjZW50QXZnIiwib2xkZXJBdmciLCJjaGFuZ2UiLCJjaGFuZ2VQZXJjZW50IiwiYWJzIiwidGltZXN0YW1wcyIsInNjb3JlIiwibW9tZW50dW1QZXJjZW50IiwiYWJzb2x1dGUiLCJpUE8iLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJpZCIsImluY2x1ZGUiLCJkYXlzIiwic3RhcnREYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJnTVAiLCJmaW5kTWFueSIsImd0ZSIsIm9yZGVyQnkiLCJtYXJrZXREZW1hbmQiLCJpUE9DYXRlZ29yeSIsImtleSIsImhhcyIsImdldCIsImRlbGV0ZSIsInR0bCIsInNldCIsImVuZERhdGUiLCJzdGFydCIsImVuZCIsImNlaWwiLCJsYXRlc3QiLCJpdGVtIiwic3ViQ2F0ZWdvcnkiLCJyYXRpb3MiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJoaXRSYXRlIiwiY2FjaGVIaXRSYXRlIiwicm91bmQiLCJzdWNjZXNzUmF0ZSIsInByZWRpY3Rpb24iLCJwcm9iYWJpbGl0eSIsInJldGFpbCIsImJhc2VQcmljZSIsImNvbnNlcnZhdGl2ZSIsIm1vZGVyYXRlIiwiYWdncmVzc2l2ZSIsImdhaW4iLCJyaXNrQWRqdXN0ZWRSZXR1cm4iLCJzaGFycGVSYXRpbyIsImNvbmZpZGVuY2U5MCIsImNvcnJlbGF0aW9uIiwic3VwcG9ydCIsInJlc2lzdGFuY2UiLCJwaXZvdCIsInZhbHVlQXRSaXNrIiwibWF4RHJhd2Rvd24iLCJjYWxjdWxhdGVNYXhEcmF3ZG93biIsInBlYWsiLCJpIiwiZHJhd2Rvd24iLCJyZXN1bHQiLCJyYXRpbyIsImhlcmZpbmRhaGxJbmRleCIsImZpcnN0IiwibGFzdCIsImFuYWx5dGljc1NlcnZpY2UiLCJzZXRJbnRlcnZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/analytics.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/auth.js":
/*!*************************!*\
  !*** ./src/lib/auth.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authService: () => (/* binding */ authService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   optionalAuth: () => (/* binding */ optionalAuth),\n/* harmony export */   requireAdmin: () => (/* binding */ requireAdmin),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth)\n/* harmony export */ });\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\n\n\n\nclass AuthService {\n    constructor(){\n        this.jwtSecret = process.env.JWT_SECRET || crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(64).toString(\"hex\");\n        this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(64).toString(\"hex\");\n        this.tokenExpiry = process.env.JWT_EXPIRY || \"15m\"; // 15 minutes\n        this.refreshTokenExpiry = process.env.JWT_REFRESH_EXPIRY || \"7d\"; // 7 days\n        this.maxLoginAttempts = parseInt(process.env.MAX_LOGIN_ATTEMPTS) || 5;\n        this.lockoutDuration = parseInt(process.env.LOCKOUT_DURATION) || 15 * 60 * 1000; // 15 minutes\n        // Session management\n        this.activeSessions = new Map();\n        this.maxSessionsPerUser = parseInt(process.env.MAX_SESSIONS_PER_USER) || 5;\n        // Rate limiting for auth operations\n        this.rateLimitMap = new Map();\n        this.authAttempts = new Map();\n        // Password policy\n        this.passwordPolicy = {\n            minLength: 8,\n            requireUppercase: true,\n            requireLowercase: true,\n            requireNumbers: true,\n            requireSpecialChars: true,\n            maxAge: 90 * 24 * 60 * 60 * 1000\n        };\n        // Security metrics\n        this.metrics = {\n            totalLogins: 0,\n            failedLogins: 0,\n            successfulLogins: 0,\n            blockedAttempts: 0,\n            activeUsers: 0,\n            suspiciousActivities: 0\n        };\n        console.log(\"\\uD83D\\uDD10 Auth service initialized\");\n    }\n    // User registration with enhanced validation\n    async register(userData) {\n        try {\n            const { email, password, name, role = \"user\" } = userData;\n            // Validate input\n            this.validateRegistrationInput({\n                email,\n                password,\n                name\n            });\n            // Check if user already exists\n            const existingUser = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    email: email.toLowerCase()\n                }\n            });\n            if (existingUser) {\n                throw new Error(\"User already exists with this email\");\n            }\n            // Validate password strength\n            this.validatePasswordStrength(password);\n            // Hash password\n            const hashedPassword = await this.hashPassword(password);\n            // Create user with secure defaults\n            const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.create({\n                data: {\n                    email: email.toLowerCase(),\n                    password: hashedPassword,\n                    name: name.trim(),\n                    role,\n                    isActive: true,\n                    emailVerified: false,\n                    twoFactorEnabled: false,\n                    lastPasswordChange: new Date(),\n                    createdAt: new Date()\n                }\n            });\n            // Generate email verification token\n            const verificationToken = await this.generateVerificationToken(user.id);\n            // Remove sensitive data from response\n            const safeUser = this.sanitizeUser(user);\n            console.log(`✅ User registered: ${email}`);\n            return {\n                success: true,\n                user: safeUser,\n                verificationToken,\n                message: \"Registration successful. Please verify your email.\"\n            };\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw new Error(`Registration failed: ${error.message}`);\n        }\n    }\n    // Enhanced login with security features\n    async login(credentials) {\n        const { email, password, rememberMe = false, userAgent, ipAddress } = credentials;\n        const loginAttemptKey = `login:${email.toLowerCase()}:${ipAddress}`;\n        try {\n            // Rate limiting check\n            if (this.isRateLimited(loginAttemptKey)) {\n                this.metrics.blockedAttempts++;\n                throw new Error(\"Too many login attempts. Please try again later.\");\n            }\n            // Find user\n            const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    email: email.toLowerCase()\n                },\n                include: {\n                    sessions: {\n                        where: {\n                            isActive: true\n                        },\n                        orderBy: {\n                            createdAt: \"desc\"\n                        }\n                    }\n                }\n            });\n            if (!user) {\n                await this.recordFailedAttempt(loginAttemptKey);\n                this.metrics.failedLogins++;\n                throw new Error(\"Invalid email or password\");\n            }\n            // Check if account is active\n            if (!user.isActive) {\n                throw new Error(\"Account is deactivated. Please contact support.\");\n            }\n            // Check if account is locked\n            if (await this.isAccountLocked(user.id)) {\n                throw new Error(\"Account is temporarily locked due to multiple failed login attempts.\");\n            }\n            // Verify password\n            const isPasswordValid = await this.verifyPassword(password, user.password);\n            if (!isPasswordValid) {\n                await this.recordFailedAttempt(loginAttemptKey);\n                await this.incrementFailedLoginAttempts(user.id);\n                this.metrics.failedLogins++;\n                throw new Error(\"Invalid email or password\");\n            }\n            // Check if email is verified (optional)\n            if (!user.emailVerified && process.env.REQUIRE_EMAIL_VERIFICATION === \"true\") {\n                throw new Error(\"Please verify your email before logging in.\");\n            }\n            // Check password age\n            if (this.isPasswordExpired(user.lastPasswordChange)) {\n                return {\n                    success: false,\n                    requirePasswordReset: true,\n                    message: \"Password has expired. Please reset your password.\"\n                };\n            }\n            // Clear failed attempts on successful login\n            await this.clearFailedLoginAttempts(user.id);\n            this.clearRateLimit(loginAttemptKey);\n            // Generate tokens\n            const { accessToken, refreshToken } = await this.generateTokens(user, rememberMe);\n            // Create or update session\n            const session = await this.createSession(user.id, {\n                accessToken,\n                refreshToken,\n                userAgent,\n                ipAddress,\n                rememberMe\n            });\n            // Update user login info\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.update({\n                where: {\n                    id: user.id\n                },\n                data: {\n                    lastLoginAt: new Date(),\n                    lastLoginIp: ipAddress,\n                    loginCount: {\n                        increment: 1\n                    }\n                }\n            });\n            // Cache user session\n            await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.cacheUserSession(user.id, {\n                userId: user.id,\n                sessionId: session.id,\n                role: user.role,\n                permissions: await this.getUserPermissions(user.role),\n                loginTime: Date.now()\n            });\n            // Track active session\n            this.trackActiveSession(user.id, session.id);\n            // Update metrics\n            this.metrics.successfulLogins++;\n            this.metrics.totalLogins++;\n            this.updateActiveUsersCount();\n            const safeUser = this.sanitizeUser(user);\n            console.log(`✅ User logged in: ${email} from ${ipAddress}`);\n            return {\n                success: true,\n                user: safeUser,\n                accessToken,\n                refreshToken,\n                expiresIn: this.getTokenExpiry(),\n                sessionId: session.id,\n                message: \"Login successful\"\n            };\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            this.recordSuspiciousActivity(email, ipAddress, \"failed_login\", error.message);\n            throw error;\n        }\n    }\n    // Token refresh with security validation\n    async refreshAccessToken(refreshToken) {\n        try {\n            if (!refreshToken) {\n                throw new Error(\"Refresh token is required\");\n            }\n            // Verify refresh token\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify(refreshToken, this.jwtRefreshSecret);\n            // Find active session\n            const session = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.findFirst({\n                where: {\n                    refreshToken,\n                    isActive: true,\n                    expiresAt: {\n                        gt: new Date()\n                    }\n                },\n                include: {\n                    user: true\n                }\n            });\n            if (!session) {\n                throw new Error(\"Invalid or expired refresh token\");\n            }\n            // Check if user is still active\n            if (!session.user.isActive) {\n                await this.invalidateSession(session.id);\n                throw new Error(\"User account is no longer active\");\n            }\n            // Check session validity\n            if (session.userId !== decoded.userId) {\n                await this.invalidateSession(session.id);\n                throw new Error(\"Token mismatch. Please login again.\");\n            }\n            // Generate new access token\n            const newAccessToken = this.generateAccessToken(session.user);\n            // Update session\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.update({\n                where: {\n                    id: session.id\n                },\n                data: {\n                    lastActivityAt: new Date(),\n                    accessToken: newAccessToken\n                }\n            });\n            // Update cached session\n            await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.cacheUserSession(session.user.id, {\n                userId: session.user.id,\n                sessionId: session.id,\n                role: session.user.role,\n                permissions: await this.getUserPermissions(session.user.role),\n                refreshTime: Date.now()\n            });\n            console.log(`🔄 Token refreshed for user: ${session.user.email}`);\n            return {\n                success: true,\n                accessToken: newAccessToken,\n                expiresIn: this.getTokenExpiry(),\n                message: \"Token refreshed successfully\"\n            };\n        } catch (error) {\n            console.error(\"Token refresh error:\", error);\n            throw new Error(`Token refresh failed: ${error.message}`);\n        }\n    }\n    // Enhanced logout with session cleanup\n    async logout(userId, sessionId, logoutAll = false) {\n        try {\n            if (logoutAll) {\n                // Logout from all sessions\n                await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.updateMany({\n                    where: {\n                        userId,\n                        isActive: true\n                    },\n                    data: {\n                        isActive: false,\n                        loggedOutAt: new Date()\n                    }\n                });\n                // Clear all cached sessions\n                const sessions = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.findMany({\n                    where: {\n                        userId\n                    },\n                    select: {\n                        id: true\n                    }\n                });\n                for (const session of sessions){\n                    await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.del(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"USER\", `session:${userId}:${session.id}`));\n                    this.removeActiveSession(userId, session.id);\n                }\n                console.log(`🚪 User logged out from all sessions: ${userId}`);\n            } else {\n                // Logout from specific session\n                await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.update({\n                    where: {\n                        id: sessionId\n                    },\n                    data: {\n                        isActive: false,\n                        loggedOutAt: new Date()\n                    }\n                });\n                // Clear cached session\n                await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.del(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"USER\", `session:${userId}:${sessionId}`));\n                this.removeActiveSession(userId, sessionId);\n                console.log(`🚪 User logged out: ${userId} (session: ${sessionId})`);\n            }\n            this.updateActiveUsersCount();\n            return {\n                success: true,\n                message: logoutAll ? \"Logged out from all sessions\" : \"Logout successful\"\n            };\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n            throw new Error(`Logout failed: ${error.message}`);\n        }\n    }\n    // Password reset with secure token generation\n    async initiatePasswordReset(email) {\n        try {\n            const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    email: email.toLowerCase()\n                }\n            });\n            if (!user) {\n                // Don't reveal if user exists or not for security\n                return {\n                    success: true,\n                    message: \"If an account with this email exists, a password reset link has been sent.\"\n                };\n            }\n            // Generate secure reset token\n            const resetToken = crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(32).toString(\"hex\");\n            const resetTokenHash = crypto__WEBPACK_IMPORTED_MODULE_4__.createHash(\"sha256\").update(resetToken).digest(\"hex\");\n            const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n            // Store reset token\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.passwordResetToken.create({\n                data: {\n                    userId: user.id,\n                    tokenHash: resetTokenHash,\n                    expiresAt\n                }\n            });\n            // Cache reset token for faster validation\n            await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.set(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `reset:${resetTokenHash}`), {\n                userId: user.id,\n                email: user.email\n            }, 3600 // 1 hour\n            );\n            console.log(`🔑 Password reset initiated for: ${email}`);\n            return {\n                success: true,\n                resetToken,\n                message: \"Password reset link has been sent to your email.\"\n            };\n        } catch (error) {\n            console.error(\"Password reset initiation error:\", error);\n            throw new Error(\"Failed to initiate password reset\");\n        }\n    }\n    // Complete password reset with validation\n    async completePasswordReset(resetToken, newPassword) {\n        try {\n            if (!resetToken || !newPassword) {\n                throw new Error(\"Reset token and new password are required\");\n            }\n            // Hash the token to match stored hash\n            const resetTokenHash = crypto__WEBPACK_IMPORTED_MODULE_4__.createHash(\"sha256\").update(resetToken).digest(\"hex\");\n            // Check cached token first\n            let cachedTokenData = await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.get(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `reset:${resetTokenHash}`));\n            if (!cachedTokenData) {\n                // Fallback to database\n                const tokenRecord = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.passwordResetToken.findFirst({\n                    where: {\n                        tokenHash: resetTokenHash,\n                        expiresAt: {\n                            gt: new Date()\n                        },\n                        used: false\n                    },\n                    include: {\n                        user: true\n                    }\n                });\n                if (!tokenRecord) {\n                    throw new Error(\"Invalid or expired reset token\");\n                }\n                cachedTokenData = {\n                    userId: tokenRecord.user.id,\n                    email: tokenRecord.user.email\n                };\n            }\n            // Validate new password\n            this.validatePasswordStrength(newPassword);\n            // Hash new password\n            const hashedPassword = await this.hashPassword(newPassword);\n            // Update user password\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.update({\n                where: {\n                    id: cachedTokenData.userId\n                },\n                data: {\n                    password: hashedPassword,\n                    lastPasswordChange: new Date(),\n                    failedLoginAttempts: 0\n                }\n            });\n            // Mark token as used\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.passwordResetToken.updateMany({\n                where: {\n                    userId: cachedTokenData.userId,\n                    used: false\n                },\n                data: {\n                    used: true\n                }\n            });\n            // Clear cached token\n            await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.del(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `reset:${resetTokenHash}`));\n            // Invalidate all user sessions for security\n            await this.logout(cachedTokenData.userId, null, true);\n            console.log(`🔒 Password reset completed for: ${cachedTokenData.email}`);\n            return {\n                success: true,\n                message: \"Password reset successful. Please login with your new password.\"\n            };\n        } catch (error) {\n            console.error(\"Password reset completion error:\", error);\n            throw error;\n        }\n    }\n    // Token verification and user extraction\n    async verifyToken(token) {\n        try {\n            if (!token) {\n                throw new Error(\"Token is required\");\n            }\n            // Remove 'Bearer ' prefix if present\n            const cleanToken = token.replace(/^Bearer\\s+/i, \"\");\n            // Verify JWT token\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify(cleanToken, this.jwtSecret);\n            // Check if token is blacklisted\n            const isBlacklisted = await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.get(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `blacklist:${cleanToken}`));\n            if (isBlacklisted) {\n                throw new Error(\"Token has been revoked\");\n            }\n            // Get cached session\n            let sessionData = await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.getCachedUserSession(decoded.userId);\n            if (!sessionData) {\n                // Fallback to database\n                const session = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.findFirst({\n                    where: {\n                        userId: decoded.userId,\n                        accessToken: cleanToken,\n                        isActive: true,\n                        expiresAt: {\n                            gt: new Date()\n                        }\n                    },\n                    include: {\n                        user: true\n                    }\n                });\n                if (!session) {\n                    throw new Error(\"Session not found or expired\");\n                }\n                sessionData = {\n                    userId: session.user.id,\n                    sessionId: session.id,\n                    role: session.user.role,\n                    permissions: await this.getUserPermissions(session.user.role)\n                };\n            }\n            // Update last activity\n            await this.updateSessionActivity(sessionData.sessionId);\n            return {\n                valid: true,\n                user: {\n                    id: decoded.userId,\n                    email: decoded.email,\n                    role: decoded.role,\n                    permissions: sessionData.permissions\n                },\n                sessionId: sessionData.sessionId,\n                decoded\n            };\n        } catch (error) {\n            console.error(\"Token verification error:\", error);\n            return {\n                valid: false,\n                error: error.message\n            };\n        }\n    }\n    // Enhanced middleware for route protection\n    requireAuth(options = {}) {\n        const { roles = [], permissions = [], optional = false } = options;\n        return async (req, res, next)=>{\n            try {\n                const token = this.extractTokenFromRequest(req);\n                if (!token) {\n                    if (optional) {\n                        req.user = null;\n                        return next();\n                    }\n                    return res.status(401).json({\n                        error: \"Access token required\",\n                        code: \"TOKEN_MISSING\"\n                    });\n                }\n                const verification = await this.verifyToken(token);\n                if (!verification.valid) {\n                    return res.status(401).json({\n                        error: verification.error,\n                        code: \"TOKEN_INVALID\"\n                    });\n                }\n                // Check role authorization\n                if (roles.length > 0 && !roles.includes(verification.user.role)) {\n                    return res.status(403).json({\n                        error: \"Insufficient role permissions\",\n                        code: \"ROLE_INSUFFICIENT\",\n                        required: roles,\n                        current: verification.user.role\n                    });\n                }\n                // Check permission authorization\n                if (permissions.length > 0) {\n                    const userPermissions = verification.user.permissions || [];\n                    const hasPermission = permissions.some((perm)=>userPermissions.includes(perm));\n                    if (!hasPermission) {\n                        return res.status(403).json({\n                            error: \"Insufficient permissions\",\n                            code: \"PERMISSION_INSUFFICIENT\",\n                            required: permissions,\n                            current: userPermissions\n                        });\n                    }\n                }\n                // Attach user to request\n                req.user = verification.user;\n                req.sessionId = verification.sessionId;\n                // Rate limiting per user\n                if (!this.checkUserRateLimit(verification.user.id)) {\n                    return res.status(429).json({\n                        error: \"Rate limit exceeded\",\n                        code: \"RATE_LIMIT_EXCEEDED\"\n                    });\n                }\n                next();\n            } catch (error) {\n                console.error(\"Auth middleware error:\", error);\n                return res.status(500).json({\n                    error: \"Internal authentication error\",\n                    code: \"AUTH_INTERNAL_ERROR\"\n                });\n            }\n        };\n    }\n    // Admin middleware for administrative routes\n    requireAdmin() {\n        return this.requireAuth({\n            roles: [\n                \"admin\",\n                \"super_admin\"\n            ]\n        });\n    }\n    // Optional authentication middleware\n    optionalAuth() {\n        return this.requireAuth({\n            optional: true\n        });\n    }\n    // Two-factor authentication setup\n    async setupTwoFactor(userId) {\n        try {\n            const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    id: userId\n                }\n            });\n            if (!user) {\n                throw new Error(\"User not found\");\n            }\n            // Generate secret key\n            const secret = crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(20).toString(\"base32\");\n            // Store secret temporarily (will be confirmed later)\n            await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.set(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `2fa:setup:${userId}`), {\n                secret,\n                confirmed: false\n            }, 600 // 10 minutes\n            );\n            return {\n                success: true,\n                secret,\n                qrCode: this.generateQRCodeUrl(user.email, secret),\n                message: \"Scan QR code with your authenticator app\"\n            };\n        } catch (error) {\n            console.error(\"2FA setup error:\", error);\n            throw error;\n        }\n    }\n    // Verify two-factor authentication token\n    async verifyTwoFactor(userId, token, confirm = false) {\n        try {\n            if (confirm) {\n                // Confirming 2FA setup\n                const setupData = await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.get(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `2fa:setup:${userId}`));\n                if (!setupData) {\n                    throw new Error(\"2FA setup not found or expired\");\n                }\n                const isValid = this.verifyTOTP(token, setupData.secret);\n                if (!isValid) {\n                    throw new Error(\"Invalid 2FA token\");\n                }\n                // Enable 2FA for user\n                await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.update({\n                    where: {\n                        id: userId\n                    },\n                    data: {\n                        twoFactorEnabled: true,\n                        twoFactorSecret: setupData.secret\n                    }\n                });\n                // Clear setup data\n                await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.del(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `2fa:setup:${userId}`));\n                return {\n                    success: true,\n                    message: \"2FA enabled successfully\"\n                };\n            } else {\n                // Verifying 2FA during login\n                const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                    where: {\n                        id: userId\n                    }\n                });\n                if (!user || !user.twoFactorEnabled) {\n                    throw new Error(\"2FA not enabled for this user\");\n                }\n                const isValid = this.verifyTOTP(token, user.twoFactorSecret);\n                return {\n                    success: isValid,\n                    message: isValid ? \"2FA verified\" : \"Invalid 2FA token\"\n                };\n            }\n        } catch (error) {\n            console.error(\"2FA verification error:\", error);\n            throw error;\n        }\n    }\n    // Session management utilities\n    async createSession(userId, sessionData) {\n        const { accessToken, refreshToken, userAgent, ipAddress, rememberMe } = sessionData;\n        // Check session limit\n        await this.enforceSessionLimit(userId);\n        const expiresAt = new Date();\n        expiresAt.setTime(expiresAt.getTime() + (rememberMe ? 7 * 24 * 60 * 60 * 1000 // 7 days\n         : 24 * 60 * 60 * 1000)); // 1 day\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.create({\n            data: {\n                userId,\n                accessToken,\n                refreshToken,\n                userAgent: userAgent || \"Unknown\",\n                ipAddress: ipAddress || \"Unknown\",\n                expiresAt,\n                lastActivityAt: new Date(),\n                isActive: true\n            }\n        });\n    }\n    async enforceSessionLimit(userId) {\n        const activeSessions = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.findMany({\n            where: {\n                userId,\n                isActive: true\n            },\n            orderBy: {\n                createdAt: \"asc\"\n            }\n        });\n        if (activeSessions.length >= this.maxSessionsPerUser) {\n            // Deactivate oldest sessions\n            const sessionsToDeactivate = activeSessions.slice(0, activeSessions.length - this.maxSessionsPerUser + 1);\n            for (const session of sessionsToDeactivate){\n                await this.invalidateSession(session.id);\n            }\n        }\n    }\n    async invalidateSession(sessionId) {\n        await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.update({\n            where: {\n                id: sessionId\n            },\n            data: {\n                isActive: false,\n                loggedOutAt: new Date()\n            }\n        });\n    }\n    async updateSessionActivity(sessionId) {\n        await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.update({\n            where: {\n                id: sessionId\n            },\n            data: {\n                lastActivityAt: new Date()\n            }\n        });\n    }\n    // Security utilities\n    async hashPassword(password) {\n        const saltRounds = parseInt(process.env.BCRYPT_ROUNDS) || 12;\n        return await bcryptjs__WEBPACK_IMPORTED_MODULE_3__.hash(password, saltRounds);\n    }\n    async verifyPassword(plainPassword, hashedPassword) {\n        return await bcryptjs__WEBPACK_IMPORTED_MODULE_3__.compare(plainPassword, hashedPassword);\n    }\n    validatePasswordStrength(password) {\n        const policy = this.passwordPolicy;\n        const errors = [];\n        if (password.length < policy.minLength) {\n            errors.push(`Password must be at least ${policy.minLength} characters long`);\n        }\n        if (policy.requireUppercase && !/[A-Z]/.test(password)) {\n            errors.push(\"Password must contain at least one uppercase letter\");\n        }\n        if (policy.requireLowercase && !/[a-z]/.test(password)) {\n            errors.push(\"Password must contain at least one lowercase letter\");\n        }\n        if (policy.requireNumbers && !/\\d/.test(password)) {\n            errors.push(\"Password must contain at least one number\");\n        }\n        if (policy.requireSpecialChars && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n            errors.push(\"Password must contain at least one special character\");\n        }\n        // Check for common passwords\n        if (this.isCommonPassword(password)) {\n            errors.push(\"Password is too common. Please choose a stronger password\");\n        }\n        if (errors.length > 0) {\n            throw new Error(`Password validation failed: ${errors.join(\", \")}`);\n        }\n    }\n    isCommonPassword(password) {\n        const commonPasswords = [\n            \"password\",\n            \"123456\",\n            \"12345678\",\n            \"qwerty\",\n            \"abc123\",\n            \"password123\",\n            \"admin\",\n            \"letmein\",\n            \"welcome\",\n            \"monkey\"\n        ];\n        return commonPasswords.includes(password.toLowerCase());\n    }\n    isPasswordExpired(lastPasswordChange) {\n        if (!lastPasswordChange) return true;\n        const now = Date.now();\n        const passwordAge = now - new Date(lastPasswordChange).getTime();\n        return passwordAge > this.passwordPolicy.maxAge;\n    }\n    // Token generation utilities\n    generateAccessToken(user) {\n        const payload = {\n            userId: user.id,\n            email: user.email,\n            role: user.role,\n            type: \"access\"\n        };\n        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.sign(payload, this.jwtSecret, {\n            expiresIn: this.tokenExpiry,\n            issuer: process.env.JWT_ISSUER || \"ipo-tracker\",\n            audience: process.env.JWT_AUDIENCE || \"ipo-platform\"\n        });\n    }\n    generateRefreshToken(user) {\n        const payload = {\n            userId: user.id,\n            email: user.email,\n            type: \"refresh\"\n        };\n        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.sign(payload, this.jwtRefreshSecret, {\n            expiresIn: this.refreshTokenExpiry,\n            issuer: process.env.JWT_ISSUER || \"ipo-tracker\",\n            audience: process.env.JWT_AUDIENCE || \"ipo-platform\"\n        });\n    }\n    async generateTokens(user, rememberMe = false) {\n        const accessToken = this.generateAccessToken(user);\n        const refreshTokenExpiry = rememberMe ? \"30d\" : this.refreshTokenExpiry;\n        const refreshPayload = {\n            userId: user.id,\n            email: user.email,\n            type: \"refresh\"\n        };\n        const refreshToken = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.sign(refreshPayload, this.jwtRefreshSecret, {\n            expiresIn: refreshTokenExpiry,\n            issuer: process.env.JWT_ISSUER || \"ipo-tracker\",\n            audience: process.env.JWT_AUDIENCE || \"ipo-platform\"\n        });\n        return {\n            accessToken,\n            refreshToken\n        };\n    }\n    async generateVerificationToken(userId) {\n        const token = crypto__WEBPACK_IMPORTED_MODULE_4__.randomBytes(32).toString(\"hex\");\n        const tokenHash = crypto__WEBPACK_IMPORTED_MODULE_4__.createHash(\"sha256\").update(token).digest(\"hex\");\n        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n        await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.emailVerificationToken.create({\n            data: {\n                userId,\n                tokenHash,\n                expiresAt\n            }\n        });\n        return token;\n    }\n    getTokenExpiry() {\n        // Convert JWT expiry to seconds\n        const expiry = this.tokenExpiry;\n        if (expiry.endsWith(\"m\")) {\n            return parseInt(expiry) * 60;\n        } else if (expiry.endsWith(\"h\")) {\n            return parseInt(expiry) * 60 * 60;\n        } else if (expiry.endsWith(\"d\")) {\n            return parseInt(expiry) * 24 * 60 * 60;\n        }\n        return 900; // 15 minutes default\n    }\n    // Rate limiting utilities\n    isRateLimited(key, maxAttempts = 5, windowMs = 15 * 60 * 1000) {\n        const now = Date.now();\n        const windowStart = Math.floor(now / windowMs) * windowMs;\n        const rateLimitKey = `${key}:${windowStart}`;\n        if (!this.rateLimitMap.has(rateLimitKey)) {\n            this.rateLimitMap.set(rateLimitKey, {\n                count: 0,\n                windowStart\n            });\n        }\n        const rateLimitData = this.rateLimitMap.get(rateLimitKey);\n        if (rateLimitData.windowStart !== windowStart) {\n            rateLimitData.count = 0;\n            rateLimitData.windowStart = windowStart;\n        }\n        return rateLimitData.count >= maxAttempts;\n    }\n    async recordFailedAttempt(key) {\n        const now = Date.now();\n        const windowStart = Math.floor(now / (15 * 60 * 1000)) * (15 * 60 * 1000);\n        const rateLimitKey = `${key}:${windowStart}`;\n        if (!this.rateLimitMap.has(rateLimitKey)) {\n            this.rateLimitMap.set(rateLimitKey, {\n                count: 0,\n                windowStart\n            });\n        }\n        const rateLimitData = this.rateLimitMap.get(rateLimitKey);\n        rateLimitData.count++;\n        // Cleanup old entries\n        setTimeout(()=>{\n            this.rateLimitMap.delete(rateLimitKey);\n        }, 15 * 60 * 1000);\n    }\n    clearRateLimit(key) {\n        const keysToDelete = [];\n        for (const [mapKey] of this.rateLimitMap){\n            if (mapKey.startsWith(key)) {\n                keysToDelete.push(mapKey);\n            }\n        }\n        keysToDelete.forEach((k)=>this.rateLimitMap.delete(k));\n    }\n    checkUserRateLimit(userId, maxRequests = 100, windowMs = 60 * 1000) {\n        return !this.isRateLimited(`user:${userId}`, maxRequests, windowMs);\n    }\n    // Account security utilities\n    async isAccountLocked(userId) {\n        const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                failedLoginAttempts: true,\n                lockedAt: true\n            }\n        });\n        if (!user) return false;\n        if (user.failedLoginAttempts >= this.maxLoginAttempts) {\n            if (user.lockedAt && Date.now() - new Date(user.lockedAt).getTime() < this.lockoutDuration) {\n                return true;\n            } else {\n                // Reset lock if lockout duration has passed\n                await this.clearFailedLoginAttempts(userId);\n            }\n        }\n        return false;\n    }\n    async incrementFailedLoginAttempts(userId) {\n        const user = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                failedLoginAttempts: true\n            }\n        });\n        const newAttempts = (user?.failedLoginAttempts || 0) + 1;\n        const updateData = {\n            failedLoginAttempts: newAttempts\n        };\n        if (newAttempts >= this.maxLoginAttempts) {\n            updateData.lockedAt = new Date();\n        }\n        await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.update({\n            where: {\n                id: userId\n            },\n            data: updateData\n        });\n    }\n    async clearFailedLoginAttempts(userId) {\n        await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.user.update({\n            where: {\n                id: userId\n            },\n            data: {\n                failedLoginAttempts: 0,\n                lockedAt: null\n            }\n        });\n    }\n    // Utility functions\n    validateRegistrationInput({ email, password, name }) {\n        if (!email || !password || !name) {\n            throw new Error(\"Email, password, and name are required\");\n        }\n        if (!this.isValidEmail(email)) {\n            throw new Error(\"Invalid email format\");\n        }\n        if (name.trim().length < 2) {\n            throw new Error(\"Name must be at least 2 characters long\");\n        }\n    }\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n    sanitizeUser(user) {\n        const { password, twoFactorSecret, ...safeUser } = user;\n        return safeUser;\n    }\n    extractTokenFromRequest(req) {\n        const authHeader = req.headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Bearer \")) {\n            return authHeader.substring(7);\n        }\n        // Check cookies as fallback\n        if (req.cookies && req.cookies.access_token) {\n            return req.cookies.access_token;\n        }\n        return null;\n    }\n    async getUserPermissions(role) {\n        const rolePermissions = {\n            user: [\n                \"read:own_profile\",\n                \"update:own_profile\",\n                \"read:ipos\",\n                \"create:watchlist\"\n            ],\n            admin: [\n                \"read:all\",\n                \"update:all\",\n                \"delete:all\",\n                \"manage:users\"\n            ],\n            super_admin: [\n                \"*\"\n            ]\n        };\n        return rolePermissions[role] || rolePermissions.user;\n    }\n    // 2FA utilities\n    verifyTOTP(token, secret) {\n        // Simplified TOTP verification - use a proper library like 'speakeasy' in production\n        const timeWindow = Math.floor(Date.now() / 1000 / 30);\n        const expectedToken = this.generateTOTP(secret, timeWindow);\n        // Allow for time drift (check current and previous/next windows)\n        return token === expectedToken || token === this.generateTOTP(secret, timeWindow - 1) || token === this.generateTOTP(secret, timeWindow + 1);\n    }\n    generateTOTP(secret, timeWindow) {\n        // Simplified TOTP generation - replace with proper implementation\n        const crypto = require(\"crypto\");\n        const hash = crypto.createHmac(\"sha1\", secret).update(timeWindow.toString()).digest(\"hex\");\n        const offset = parseInt(hash.slice(-1), 16);\n        const code = parseInt(hash.slice(offset * 2, offset * 2 + 8), 16) % 1000000;\n        return code.toString().padStart(6, \"0\");\n    }\n    generateQRCodeUrl(email, secret) {\n        const issuer = encodeURIComponent(process.env.APP_NAME || \"IPO Tracker\");\n        const account = encodeURIComponent(email);\n        return `otpauth://totp/${issuer}:${account}?secret=${secret}&issuer=${issuer}`;\n    }\n    // Activity tracking\n    trackActiveSession(userId, sessionId) {\n        if (!this.activeSessions.has(userId)) {\n            this.activeSessions.set(userId, new Set());\n        }\n        this.activeSessions.get(userId).add(sessionId);\n    }\n    removeActiveSession(userId, sessionId) {\n        if (this.activeSessions.has(userId)) {\n            this.activeSessions.get(userId).delete(sessionId);\n            if (this.activeSessions.get(userId).size === 0) {\n                this.activeSessions.delete(userId);\n            }\n        }\n    }\n    updateActiveUsersCount() {\n        this.metrics.activeUsers = this.activeSessions.size;\n    }\n    recordSuspiciousActivity(email, ipAddress, type, details) {\n        this.metrics.suspiciousActivities++;\n        console.warn(`🚨 Suspicious activity: ${type} for ${email} from ${ipAddress}: ${details}`);\n    // In production, you might want to store this in the database\n    // or send alerts to security monitoring systems\n    }\n    // Get authentication metrics\n    getMetrics() {\n        return {\n            ...this.metrics,\n            activeSessions: this.activeSessions.size,\n            totalSessions: Array.from(this.activeSessions.values()).reduce((total, sessions)=>total + sessions.size, 0),\n            loginSuccessRate: this.metrics.totalLogins > 0 ? (this.metrics.successfulLogins / this.metrics.totalLogins * 100).toFixed(2) + \"%\" : \"0%\",\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            // Test JWT functionality\n            const testToken = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.sign({\n                test: true\n            }, this.jwtSecret, {\n                expiresIn: \"1s\"\n            });\n            jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__.verify(testToken, this.jwtSecret);\n            // Test database connection\n            await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.$queryRaw`SELECT 1`;\n            // Test cache connection\n            const cacheHealthy = await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.healthCheck();\n            return {\n                status: \"healthy\",\n                jwt: \"functional\",\n                database: \"connected\",\n                cache: cacheHealthy.status,\n                metrics: this.getMetrics(),\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: \"unhealthy\",\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Cleanup expired sessions periodically\n    async cleanupExpiredSessions() {\n        try {\n            const result = await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.userSession.deleteMany({\n                where: {\n                    OR: [\n                        {\n                            expiresAt: {\n                                lt: new Date()\n                            }\n                        },\n                        {\n                            isActive: false,\n                            loggedOutAt: {\n                                lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n                            }\n                        }\n                    ]\n                }\n            });\n            console.log(`🧹 Cleaned up ${result.count} expired sessions`);\n            return result.count;\n        } catch (error) {\n            console.error(\"Session cleanup error:\", error);\n            return 0;\n        }\n    }\n    // Blacklist token (for logout/security)\n    async blacklistToken(token, expiryTime) {\n        const cleanToken = token.replace(/^Bearer\\s+/i, \"\");\n        await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.set(_cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.key(\"AUTH\", `blacklist:${cleanToken}`), {\n            blacklisted: true,\n            timestamp: Date.now()\n        }, expiryTime || this.getTokenExpiry());\n    }\n}\n// Export singleton instance\nconst authService = new AuthService();\n// Middleware exports\nconst requireAuth = (options)=>authService.requireAuth(options);\nconst requireAdmin = ()=>authService.requireAdmin();\nconst optionalAuth = ()=>authService.optionalAuth();\n// Periodic cleanup (every 6 hours)\nsetInterval(async ()=>{\n    try {\n        await authService.cleanupExpiredSessions();\n        // Clean up rate limit map\n        const now = Date.now();\n        for (const [key, data] of authService.rateLimitMap){\n            if (now - data.windowStart > 15 * 60 * 1000) {\n                authService.rateLimitMap.delete(key);\n            }\n        }\n    } catch (error) {\n        console.error(\"Auth service cleanup failed:\", error);\n    }\n}, 6 * 60 * 60 * 1000);\n// Graceful shutdown\nprocess.on(\"SIGTERM\", ()=>{\n    console.log(\"\\uD83D\\uDD10 Auth service shutting down...\");\n// Cleanup resources if needed\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (authService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RTdELG1DQUFtQztBQUNuQ2lILFlBQ0U7SUFDRSxJQUFJO1FBQ0YsTUFBTUQsWUFBWVIsc0JBQXNCO1FBRXhDLDBCQUEwQjtRQUMxQixNQUFNakwsTUFBTTlDLEtBQUs4QyxHQUFHO1FBQ3BCLEtBQUssTUFBTSxDQUFDeUIsS0FBSzdFLEtBQUssSUFBSTZPLFlBQVloUixZQUFZLENBQUU7WUFDbEQsSUFBSXVGLE1BQU1wRCxLQUFLeUssV0FBVyxHQUFHLEtBQUssS0FBSyxNQUFNO2dCQUMzQ29FLFlBQVloUixZQUFZLENBQUNvTixNQUFNLENBQUNwRztZQUNsQztRQUNGO0lBQ0YsRUFBRSxPQUFPOUQsT0FBTztRQUNkbEMsUUFBUWtDLEtBQUssQ0FBQyxnQ0FBZ0NBO0lBQ2hEO0FBQ0YsR0FDQSxJQUFJLEtBQUssS0FBSztBQUdoQixvQkFBb0I7QUFDcEJ0RSxRQUFRc1MsRUFBRSxDQUFDLFdBQVc7SUFDcEJsUSxRQUFRQyxHQUFHLENBQUM7QUFDWiw4QkFBOEI7QUFDaEM7QUFFQSxpRUFBZStQLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcG8tdHJhY2tlci8uL3NyYy9saWIvYXV0aC5qcz84N2JkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gXCIuL2RiLmpzXCI7XHJcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSBcIi4vY2FjaGUuanNcIjtcclxuaW1wb3J0IGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XHJcbmltcG9ydCBiY3J5cHQgZnJvbSBcImJjcnlwdGpzXCI7XHJcbmltcG9ydCBjcnlwdG8gZnJvbSBcImNyeXB0b1wiO1xyXG5cclxuY2xhc3MgQXV0aFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5qd3RTZWNyZXQgPVxyXG4gICAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVUIHx8IGNyeXB0by5yYW5kb21CeXRlcyg2NCkudG9TdHJpbmcoXCJoZXhcIik7XHJcbiAgICB0aGlzLmp3dFJlZnJlc2hTZWNyZXQgPVxyXG4gICAgICBwcm9jZXNzLmVudi5KV1RfUkVGUkVTSF9TRUNSRVQgfHwgY3J5cHRvLnJhbmRvbUJ5dGVzKDY0KS50b1N0cmluZyhcImhleFwiKTtcclxuICAgIHRoaXMudG9rZW5FeHBpcnkgPSBwcm9jZXNzLmVudi5KV1RfRVhQSVJZIHx8IFwiMTVtXCI7IC8vIDE1IG1pbnV0ZXNcclxuICAgIHRoaXMucmVmcmVzaFRva2VuRXhwaXJ5ID0gcHJvY2Vzcy5lbnYuSldUX1JFRlJFU0hfRVhQSVJZIHx8IFwiN2RcIjsgLy8gNyBkYXlzXHJcbiAgICB0aGlzLm1heExvZ2luQXR0ZW1wdHMgPSBwYXJzZUludChwcm9jZXNzLmVudi5NQVhfTE9HSU5fQVRURU1QVFMpIHx8IDU7XHJcbiAgICB0aGlzLmxvY2tvdXREdXJhdGlvbiA9XHJcbiAgICAgIHBhcnNlSW50KHByb2Nlc3MuZW52LkxPQ0tPVVRfRFVSQVRJT04pIHx8IDE1ICogNjAgKiAxMDAwOyAvLyAxNSBtaW51dGVzXHJcblxyXG4gICAgLy8gU2Vzc2lvbiBtYW5hZ2VtZW50XHJcbiAgICB0aGlzLmFjdGl2ZVNlc3Npb25zID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5tYXhTZXNzaW9uc1BlclVzZXIgPSBwYXJzZUludChwcm9jZXNzLmVudi5NQVhfU0VTU0lPTlNfUEVSX1VTRVIpIHx8IDU7XHJcblxyXG4gICAgLy8gUmF0ZSBsaW1pdGluZyBmb3IgYXV0aCBvcGVyYXRpb25zXHJcbiAgICB0aGlzLnJhdGVMaW1pdE1hcCA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuYXV0aEF0dGVtcHRzID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8vIFBhc3N3b3JkIHBvbGljeVxyXG4gICAgdGhpcy5wYXNzd29yZFBvbGljeSA9IHtcclxuICAgICAgbWluTGVuZ3RoOiA4LFxyXG4gICAgICByZXF1aXJlVXBwZXJjYXNlOiB0cnVlLFxyXG4gICAgICByZXF1aXJlTG93ZXJjYXNlOiB0cnVlLFxyXG4gICAgICByZXF1aXJlTnVtYmVyczogdHJ1ZSxcclxuICAgICAgcmVxdWlyZVNwZWNpYWxDaGFyczogdHJ1ZSxcclxuICAgICAgbWF4QWdlOiA5MCAqIDI0ICogNjAgKiA2MCAqIDEwMDAsIC8vIDkwIGRheXNcclxuICAgIH07XHJcblxyXG4gICAgLy8gU2VjdXJpdHkgbWV0cmljc1xyXG4gICAgdGhpcy5tZXRyaWNzID0ge1xyXG4gICAgICB0b3RhbExvZ2luczogMCxcclxuICAgICAgZmFpbGVkTG9naW5zOiAwLFxyXG4gICAgICBzdWNjZXNzZnVsTG9naW5zOiAwLFxyXG4gICAgICBibG9ja2VkQXR0ZW1wdHM6IDAsXHJcbiAgICAgIGFjdGl2ZVVzZXJzOiAwLFxyXG4gICAgICBzdXNwaWNpb3VzQWN0aXZpdGllczogMCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coXCLwn5SQIEF1dGggc2VydmljZSBpbml0aWFsaXplZFwiKTtcclxuICB9XHJcblxyXG4gIC8vIFVzZXIgcmVnaXN0cmF0aW9uIHdpdGggZW5oYW5jZWQgdmFsaWRhdGlvblxyXG4gIGFzeW5jIHJlZ2lzdGVyKHVzZXJEYXRhKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSwgcm9sZSA9IFwidXNlclwiIH0gPSB1c2VyRGF0YTtcclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIGlucHV0XHJcbiAgICAgIHRoaXMudmFsaWRhdGVSZWdpc3RyYXRpb25JbnB1dCh7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSB9KTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdHNcclxuICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXNlciBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoaXMgZW1haWxcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIHBhc3N3b3JkIHN0cmVuZ3RoXHJcbiAgICAgIHRoaXMudmFsaWRhdGVQYXNzd29yZFN0cmVuZ3RoKHBhc3N3b3JkKTtcclxuXHJcbiAgICAgIC8vIEhhc2ggcGFzc3dvcmRcclxuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmhhc2hQYXNzd29yZChwYXNzd29yZCk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdXNlciB3aXRoIHNlY3VyZSBkZWZhdWx0c1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuY3JlYXRlKHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcclxuICAgICAgICAgIG5hbWU6IG5hbWUudHJpbSgpLFxyXG4gICAgICAgICAgcm9sZSxcclxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgZW1haWxWZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICB0d29GYWN0b3JFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICAgIGxhc3RQYXNzd29yZENoYW5nZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIGVtYWlsIHZlcmlmaWNhdGlvbiB0b2tlblxyXG4gICAgICBjb25zdCB2ZXJpZmljYXRpb25Ub2tlbiA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVWZXJpZmljYXRpb25Ub2tlbih1c2VyLmlkKTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSBzZW5zaXRpdmUgZGF0YSBmcm9tIHJlc3BvbnNlXHJcbiAgICAgIGNvbnN0IHNhZmVVc2VyID0gdGhpcy5zYW5pdGl6ZVVzZXIodXNlcik7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIFVzZXIgcmVnaXN0ZXJlZDogJHtlbWFpbH1gKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICB1c2VyOiBzYWZlVXNlcixcclxuICAgICAgICB2ZXJpZmljYXRpb25Ub2tlbixcclxuICAgICAgICBtZXNzYWdlOiBcIlJlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsLiBQbGVhc2UgdmVyaWZ5IHlvdXIgZW1haWwuXCIsXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiUmVnaXN0cmF0aW9uIGVycm9yOlwiLCBlcnJvcik7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVnaXN0cmF0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRW5oYW5jZWQgbG9naW4gd2l0aCBzZWN1cml0eSBmZWF0dXJlc1xyXG4gIGFzeW5jIGxvZ2luKGNyZWRlbnRpYWxzKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGVtYWlsLFxyXG4gICAgICBwYXNzd29yZCxcclxuICAgICAgcmVtZW1iZXJNZSA9IGZhbHNlLFxyXG4gICAgICB1c2VyQWdlbnQsXHJcbiAgICAgIGlwQWRkcmVzcyxcclxuICAgIH0gPSBjcmVkZW50aWFscztcclxuICAgIGNvbnN0IGxvZ2luQXR0ZW1wdEtleSA9IGBsb2dpbjoke2VtYWlsLnRvTG93ZXJDYXNlKCl9OiR7aXBBZGRyZXNzfWA7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gUmF0ZSBsaW1pdGluZyBjaGVja1xyXG4gICAgICBpZiAodGhpcy5pc1JhdGVMaW1pdGVkKGxvZ2luQXR0ZW1wdEtleSkpIHtcclxuICAgICAgICB0aGlzLm1ldHJpY3MuYmxvY2tlZEF0dGVtcHRzKys7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vIG1hbnkgbG9naW4gYXR0ZW1wdHMuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBGaW5kIHVzZXJcclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xyXG4gICAgICAgIHdoZXJlOiB7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sXHJcbiAgICAgICAgaW5jbHVkZToge1xyXG4gICAgICAgICAgc2Vzc2lvbnM6IHtcclxuICAgICAgICAgICAgd2hlcmU6IHsgaXNBY3RpdmU6IHRydWUgfSxcclxuICAgICAgICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6IFwiZGVzY1wiIH0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZWNvcmRGYWlsZWRBdHRlbXB0KGxvZ2luQXR0ZW1wdEtleSk7XHJcbiAgICAgICAgdGhpcy5tZXRyaWNzLmZhaWxlZExvZ2lucysrO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZW1haWwgb3IgcGFzc3dvcmRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIGFjY291bnQgaXMgYWN0aXZlXHJcbiAgICAgIGlmICghdXNlci5pc0FjdGl2ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFjY291bnQgaXMgZGVhY3RpdmF0ZWQuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQuXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBhY2NvdW50IGlzIGxvY2tlZFxyXG4gICAgICBpZiAoYXdhaXQgdGhpcy5pc0FjY291bnRMb2NrZWQodXNlci5pZCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICBcIkFjY291bnQgaXMgdGVtcG9yYXJpbHkgbG9ja2VkIGR1ZSB0byBtdWx0aXBsZSBmYWlsZWQgbG9naW4gYXR0ZW1wdHMuXCJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBWZXJpZnkgcGFzc3dvcmRcclxuICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdGhpcy52ZXJpZnlQYXNzd29yZChcclxuICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICB1c2VyLnBhc3N3b3JkXHJcbiAgICAgICk7XHJcbiAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZWNvcmRGYWlsZWRBdHRlbXB0KGxvZ2luQXR0ZW1wdEtleSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbmNyZW1lbnRGYWlsZWRMb2dpbkF0dGVtcHRzKHVzZXIuaWQpO1xyXG4gICAgICAgIHRoaXMubWV0cmljcy5mYWlsZWRMb2dpbnMrKztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBlbWFpbCBpcyB2ZXJpZmllZCAob3B0aW9uYWwpXHJcbiAgICAgIGlmIChcclxuICAgICAgICAhdXNlci5lbWFpbFZlcmlmaWVkICYmXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuUkVRVUlSRV9FTUFJTF9WRVJJRklDQVRJT04gPT09IFwidHJ1ZVwiXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSB2ZXJpZnkgeW91ciBlbWFpbCBiZWZvcmUgbG9nZ2luZyBpbi5cIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIHBhc3N3b3JkIGFnZVxyXG4gICAgICBpZiAodGhpcy5pc1Bhc3N3b3JkRXhwaXJlZCh1c2VyLmxhc3RQYXNzd29yZENoYW5nZSkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICByZXF1aXJlUGFzc3dvcmRSZXNldDogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgaGFzIGV4cGlyZWQuIFBsZWFzZSByZXNldCB5b3VyIHBhc3N3b3JkLlwiLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENsZWFyIGZhaWxlZCBhdHRlbXB0cyBvbiBzdWNjZXNzZnVsIGxvZ2luXHJcbiAgICAgIGF3YWl0IHRoaXMuY2xlYXJGYWlsZWRMb2dpbkF0dGVtcHRzKHVzZXIuaWQpO1xyXG4gICAgICB0aGlzLmNsZWFyUmF0ZUxpbWl0KGxvZ2luQXR0ZW1wdEtleSk7XHJcblxyXG4gICAgICAvLyBHZW5lcmF0ZSB0b2tlbnNcclxuICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH0gPSBhd2FpdCB0aGlzLmdlbmVyYXRlVG9rZW5zKFxyXG4gICAgICAgIHVzZXIsXHJcbiAgICAgICAgcmVtZW1iZXJNZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIG9yIHVwZGF0ZSBzZXNzaW9uXHJcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLmNyZWF0ZVNlc3Npb24odXNlci5pZCwge1xyXG4gICAgICAgIGFjY2Vzc1Rva2VuLFxyXG4gICAgICAgIHJlZnJlc2hUb2tlbixcclxuICAgICAgICB1c2VyQWdlbnQsXHJcbiAgICAgICAgaXBBZGRyZXNzLFxyXG4gICAgICAgIHJlbWVtYmVyTWUsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHVzZXIgbG9naW4gaW5mb1xyXG4gICAgICBhd2FpdCBwcmlzbWEudXNlci51cGRhdGUoe1xyXG4gICAgICAgIHdoZXJlOiB7IGlkOiB1c2VyLmlkIH0sXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgbGFzdExvZ2luQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICBsYXN0TG9naW5JcDogaXBBZGRyZXNzLFxyXG4gICAgICAgICAgbG9naW5Db3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENhY2hlIHVzZXIgc2Vzc2lvblxyXG4gICAgICBhd2FpdCBjYWNoZS5jYWNoZVVzZXJTZXNzaW9uKHVzZXIuaWQsIHtcclxuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXHJcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLFxyXG4gICAgICAgIHJvbGU6IHVzZXIucm9sZSxcclxuICAgICAgICBwZXJtaXNzaW9uczogYXdhaXQgdGhpcy5nZXRVc2VyUGVybWlzc2lvbnModXNlci5yb2xlKSxcclxuICAgICAgICBsb2dpblRpbWU6IERhdGUubm93KCksXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVHJhY2sgYWN0aXZlIHNlc3Npb25cclxuICAgICAgdGhpcy50cmFja0FjdGl2ZVNlc3Npb24odXNlci5pZCwgc2Vzc2lvbi5pZCk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgbWV0cmljc1xyXG4gICAgICB0aGlzLm1ldHJpY3Muc3VjY2Vzc2Z1bExvZ2lucysrO1xyXG4gICAgICB0aGlzLm1ldHJpY3MudG90YWxMb2dpbnMrKztcclxuICAgICAgdGhpcy51cGRhdGVBY3RpdmVVc2Vyc0NvdW50KCk7XHJcblxyXG4gICAgICBjb25zdCBzYWZlVXNlciA9IHRoaXMuc2FuaXRpemVVc2VyKHVzZXIpO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBVc2VyIGxvZ2dlZCBpbjogJHtlbWFpbH0gZnJvbSAke2lwQWRkcmVzc31gKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICB1c2VyOiBzYWZlVXNlcixcclxuICAgICAgICBhY2Nlc3NUb2tlbixcclxuICAgICAgICByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgZXhwaXJlc0luOiB0aGlzLmdldFRva2VuRXhwaXJ5KCksXHJcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiTG9naW4gc3VjY2Vzc2Z1bFwiLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkxvZ2luIGVycm9yOlwiLCBlcnJvcik7XHJcbiAgICAgIHRoaXMucmVjb3JkU3VzcGljaW91c0FjdGl2aXR5KFxyXG4gICAgICAgIGVtYWlsLFxyXG4gICAgICAgIGlwQWRkcmVzcyxcclxuICAgICAgICBcImZhaWxlZF9sb2dpblwiLFxyXG4gICAgICAgIGVycm9yLm1lc3NhZ2VcclxuICAgICAgKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBUb2tlbiByZWZyZXNoIHdpdGggc2VjdXJpdHkgdmFsaWRhdGlvblxyXG4gIGFzeW5jIHJlZnJlc2hBY2Nlc3NUb2tlbihyZWZyZXNoVG9rZW4pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghcmVmcmVzaFRva2VuKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVmcmVzaCB0b2tlbiBpcyByZXF1aXJlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVmVyaWZ5IHJlZnJlc2ggdG9rZW5cclxuICAgICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkocmVmcmVzaFRva2VuLCB0aGlzLmp3dFJlZnJlc2hTZWNyZXQpO1xyXG5cclxuICAgICAgLy8gRmluZCBhY3RpdmUgc2Vzc2lvblxyXG4gICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgcHJpc21hLnVzZXJTZXNzaW9uLmZpbmRGaXJzdCh7XHJcbiAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgIHJlZnJlc2hUb2tlbixcclxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgZXhwaXJlc0F0OiB7IGd0OiBuZXcgRGF0ZSgpIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlOiB7IHVzZXI6IHRydWUgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoIXNlc3Npb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9yIGV4cGlyZWQgcmVmcmVzaCB0b2tlblwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBzdGlsbCBhY3RpdmVcclxuICAgICAgaWYgKCFzZXNzaW9uLnVzZXIuaXNBY3RpdmUpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmludmFsaWRhdGVTZXNzaW9uKHNlc3Npb24uaWQpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVzZXIgYWNjb3VudCBpcyBubyBsb25nZXIgYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBzZXNzaW9uIHZhbGlkaXR5XHJcbiAgICAgIGlmIChzZXNzaW9uLnVzZXJJZCAhPT0gZGVjb2RlZC51c2VySWQpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmludmFsaWRhdGVTZXNzaW9uKHNlc3Npb24uaWQpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG1pc21hdGNoLiBQbGVhc2UgbG9naW4gYWdhaW4uXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZW5lcmF0ZSBuZXcgYWNjZXNzIHRva2VuXHJcbiAgICAgIGNvbnN0IG5ld0FjY2Vzc1Rva2VuID0gdGhpcy5nZW5lcmF0ZUFjY2Vzc1Rva2VuKHNlc3Npb24udXNlcik7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgc2Vzc2lvblxyXG4gICAgICBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24udXBkYXRlKHtcclxuICAgICAgICB3aGVyZTogeyBpZDogc2Vzc2lvbi5pZCB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIGxhc3RBY3Rpdml0eUF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgYWNjZXNzVG9rZW46IG5ld0FjY2Vzc1Rva2VuLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIGNhY2hlZCBzZXNzaW9uXHJcbiAgICAgIGF3YWl0IGNhY2hlLmNhY2hlVXNlclNlc3Npb24oc2Vzc2lvbi51c2VyLmlkLCB7XHJcbiAgICAgICAgdXNlcklkOiBzZXNzaW9uLnVzZXIuaWQsXHJcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLFxyXG4gICAgICAgIHJvbGU6IHNlc3Npb24udXNlci5yb2xlLFxyXG4gICAgICAgIHBlcm1pc3Npb25zOiBhd2FpdCB0aGlzLmdldFVzZXJQZXJtaXNzaW9ucyhzZXNzaW9uLnVzZXIucm9sZSksXHJcbiAgICAgICAgcmVmcmVzaFRpbWU6IERhdGUubm93KCksXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCflIQgVG9rZW4gcmVmcmVzaGVkIGZvciB1c2VyOiAke3Nlc3Npb24udXNlci5lbWFpbH1gKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBhY2Nlc3NUb2tlbjogbmV3QWNjZXNzVG9rZW4sXHJcbiAgICAgICAgZXhwaXJlc0luOiB0aGlzLmdldFRva2VuRXhwaXJ5KCksXHJcbiAgICAgICAgbWVzc2FnZTogXCJUb2tlbiByZWZyZXNoZWQgc3VjY2Vzc2Z1bGx5XCIsXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiVG9rZW4gcmVmcmVzaCBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRva2VuIHJlZnJlc2ggZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBFbmhhbmNlZCBsb2dvdXQgd2l0aCBzZXNzaW9uIGNsZWFudXBcclxuICBhc3luYyBsb2dvdXQodXNlcklkLCBzZXNzaW9uSWQsIGxvZ291dEFsbCA9IGZhbHNlKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAobG9nb3V0QWxsKSB7XHJcbiAgICAgICAgLy8gTG9nb3V0IGZyb20gYWxsIHNlc3Npb25zXHJcbiAgICAgICAgYXdhaXQgcHJpc21hLnVzZXJTZXNzaW9uLnVwZGF0ZU1hbnkoe1xyXG4gICAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgICAgdXNlcklkLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIGlzQWN0aXZlOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9nZ2VkT3V0QXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBDbGVhciBhbGwgY2FjaGVkIHNlc3Npb25zXHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24uZmluZE1hbnkoe1xyXG4gICAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXHJcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIHNlc3Npb25zKSB7XHJcbiAgICAgICAgICBhd2FpdCBjYWNoZS5kZWwoY2FjaGUua2V5KFwiVVNFUlwiLCBgc2Vzc2lvbjoke3VzZXJJZH06JHtzZXNzaW9uLmlkfWApKTtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlQWN0aXZlU2Vzc2lvbih1c2VySWQsIHNlc3Npb24uaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYPCfmqogVXNlciBsb2dnZWQgb3V0IGZyb20gYWxsIHNlc3Npb25zOiAke3VzZXJJZH1gKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBMb2dvdXQgZnJvbSBzcGVjaWZpYyBzZXNzaW9uXHJcbiAgICAgICAgYXdhaXQgcHJpc21hLnVzZXJTZXNzaW9uLnVwZGF0ZSh7XHJcbiAgICAgICAgICB3aGVyZTogeyBpZDogc2Vzc2lvbklkIH0sXHJcbiAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIGlzQWN0aXZlOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9nZ2VkT3V0QXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBDbGVhciBjYWNoZWQgc2Vzc2lvblxyXG4gICAgICAgIGF3YWl0IGNhY2hlLmRlbChjYWNoZS5rZXkoXCJVU0VSXCIsIGBzZXNzaW9uOiR7dXNlcklkfToke3Nlc3Npb25JZH1gKSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBY3RpdmVTZXNzaW9uKHVzZXJJZCwgc2Vzc2lvbklkKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYPCfmqogVXNlciBsb2dnZWQgb3V0OiAke3VzZXJJZH0gKHNlc3Npb246ICR7c2Vzc2lvbklkfSlgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51cGRhdGVBY3RpdmVVc2Vyc0NvdW50KCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgbWVzc2FnZTogbG9nb3V0QWxsXHJcbiAgICAgICAgICA/IFwiTG9nZ2VkIG91dCBmcm9tIGFsbCBzZXNzaW9uc1wiXHJcbiAgICAgICAgICA6IFwiTG9nb3V0IHN1Y2Nlc3NmdWxcIixcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb2dvdXQgZXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMb2dvdXQgZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBQYXNzd29yZCByZXNldCB3aXRoIHNlY3VyZSB0b2tlbiBnZW5lcmF0aW9uXHJcbiAgYXN5bmMgaW5pdGlhdGVQYXNzd29yZFJlc2V0KGVtYWlsKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICAvLyBEb24ndCByZXZlYWwgaWYgdXNlciBleGlzdHMgb3Igbm90IGZvciBzZWN1cml0eVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTpcclxuICAgICAgICAgICAgXCJJZiBhbiBhY2NvdW50IHdpdGggdGhpcyBlbWFpbCBleGlzdHMsIGEgcGFzc3dvcmQgcmVzZXQgbGluayBoYXMgYmVlbiBzZW50LlwiLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIHNlY3VyZSByZXNldCB0b2tlblxyXG4gICAgICBjb25zdCByZXNldFRva2VuID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDMyKS50b1N0cmluZyhcImhleFwiKTtcclxuICAgICAgY29uc3QgcmVzZXRUb2tlbkhhc2ggPSBjcnlwdG9cclxuICAgICAgICAuY3JlYXRlSGFzaChcInNoYTI1NlwiKVxyXG4gICAgICAgIC51cGRhdGUocmVzZXRUb2tlbilcclxuICAgICAgICAuZGlnZXN0KFwiaGV4XCIpO1xyXG4gICAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgNjAgKiA2MCAqIDEwMDApOyAvLyAxIGhvdXJcclxuXHJcbiAgICAgIC8vIFN0b3JlIHJlc2V0IHRva2VuXHJcbiAgICAgIGF3YWl0IHByaXNtYS5wYXNzd29yZFJlc2V0VG9rZW4uY3JlYXRlKHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXHJcbiAgICAgICAgICB0b2tlbkhhc2g6IHJlc2V0VG9rZW5IYXNoLFxyXG4gICAgICAgICAgZXhwaXJlc0F0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ2FjaGUgcmVzZXQgdG9rZW4gZm9yIGZhc3RlciB2YWxpZGF0aW9uXHJcbiAgICAgIGF3YWl0IGNhY2hlLnNldChcclxuICAgICAgICBjYWNoZS5rZXkoXCJBVVRIXCIsIGByZXNldDoke3Jlc2V0VG9rZW5IYXNofWApLFxyXG4gICAgICAgIHsgdXNlcklkOiB1c2VyLmlkLCBlbWFpbDogdXNlci5lbWFpbCB9LFxyXG4gICAgICAgIDM2MDAgLy8gMSBob3VyXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+UkSBQYXNzd29yZCByZXNldCBpbml0aWF0ZWQgZm9yOiAke2VtYWlsfWApO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIHJlc2V0VG9rZW4sIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgYmUgc2VudCB2aWEgZW1haWxcclxuICAgICAgICBtZXNzYWdlOiBcIlBhc3N3b3JkIHJlc2V0IGxpbmsgaGFzIGJlZW4gc2VudCB0byB5b3VyIGVtYWlsLlwiLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIlBhc3N3b3JkIHJlc2V0IGluaXRpYXRpb24gZXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGluaXRpYXRlIHBhc3N3b3JkIHJlc2V0XCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ29tcGxldGUgcGFzc3dvcmQgcmVzZXQgd2l0aCB2YWxpZGF0aW9uXHJcbiAgYXN5bmMgY29tcGxldGVQYXNzd29yZFJlc2V0KHJlc2V0VG9rZW4sIG5ld1Bhc3N3b3JkKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoIXJlc2V0VG9rZW4gfHwgIW5ld1Bhc3N3b3JkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzZXQgdG9rZW4gYW5kIG5ldyBwYXNzd29yZCBhcmUgcmVxdWlyZWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEhhc2ggdGhlIHRva2VuIHRvIG1hdGNoIHN0b3JlZCBoYXNoXHJcbiAgICAgIGNvbnN0IHJlc2V0VG9rZW5IYXNoID0gY3J5cHRvXHJcbiAgICAgICAgLmNyZWF0ZUhhc2goXCJzaGEyNTZcIilcclxuICAgICAgICAudXBkYXRlKHJlc2V0VG9rZW4pXHJcbiAgICAgICAgLmRpZ2VzdChcImhleFwiKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGNhY2hlZCB0b2tlbiBmaXJzdFxyXG4gICAgICBsZXQgY2FjaGVkVG9rZW5EYXRhID0gYXdhaXQgY2FjaGUuZ2V0KFxyXG4gICAgICAgIGNhY2hlLmtleShcIkFVVEhcIiwgYHJlc2V0OiR7cmVzZXRUb2tlbkhhc2h9YClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICghY2FjaGVkVG9rZW5EYXRhKSB7XHJcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gZGF0YWJhc2VcclxuICAgICAgICBjb25zdCB0b2tlblJlY29yZCA9IGF3YWl0IHByaXNtYS5wYXNzd29yZFJlc2V0VG9rZW4uZmluZEZpcnN0KHtcclxuICAgICAgICAgIHdoZXJlOiB7XHJcbiAgICAgICAgICAgIHRva2VuSGFzaDogcmVzZXRUb2tlbkhhc2gsXHJcbiAgICAgICAgICAgIGV4cGlyZXNBdDogeyBndDogbmV3IERhdGUoKSB9LFxyXG4gICAgICAgICAgICB1c2VkOiBmYWxzZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBpbmNsdWRlOiB7IHVzZXI6IHRydWUgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCF0b2tlblJlY29yZCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBvciBleHBpcmVkIHJlc2V0IHRva2VuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FjaGVkVG9rZW5EYXRhID0ge1xyXG4gICAgICAgICAgdXNlcklkOiB0b2tlblJlY29yZC51c2VyLmlkLFxyXG4gICAgICAgICAgZW1haWw6IHRva2VuUmVjb3JkLnVzZXIuZW1haWwsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVmFsaWRhdGUgbmV3IHBhc3N3b3JkXHJcbiAgICAgIHRoaXMudmFsaWRhdGVQYXNzd29yZFN0cmVuZ3RoKG5ld1Bhc3N3b3JkKTtcclxuXHJcbiAgICAgIC8vIEhhc2ggbmV3IHBhc3N3b3JkXHJcbiAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgdGhpcy5oYXNoUGFzc3dvcmQobmV3UGFzc3dvcmQpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHVzZXIgcGFzc3dvcmRcclxuICAgICAgYXdhaXQgcHJpc21hLnVzZXIudXBkYXRlKHtcclxuICAgICAgICB3aGVyZTogeyBpZDogY2FjaGVkVG9rZW5EYXRhLnVzZXJJZCB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcclxuICAgICAgICAgIGxhc3RQYXNzd29yZENoYW5nZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgIGZhaWxlZExvZ2luQXR0ZW1wdHM6IDAsIC8vIFJlc2V0IGZhaWxlZCBhdHRlbXB0c1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gTWFyayB0b2tlbiBhcyB1c2VkXHJcbiAgICAgIGF3YWl0IHByaXNtYS5wYXNzd29yZFJlc2V0VG9rZW4udXBkYXRlTWFueSh7XHJcbiAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgIHVzZXJJZDogY2FjaGVkVG9rZW5EYXRhLnVzZXJJZCxcclxuICAgICAgICAgIHVzZWQ6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YTogeyB1c2VkOiB0cnVlIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ2xlYXIgY2FjaGVkIHRva2VuXHJcbiAgICAgIGF3YWl0IGNhY2hlLmRlbChjYWNoZS5rZXkoXCJBVVRIXCIsIGByZXNldDoke3Jlc2V0VG9rZW5IYXNofWApKTtcclxuXHJcbiAgICAgIC8vIEludmFsaWRhdGUgYWxsIHVzZXIgc2Vzc2lvbnMgZm9yIHNlY3VyaXR5XHJcbiAgICAgIGF3YWl0IHRoaXMubG9nb3V0KGNhY2hlZFRva2VuRGF0YS51c2VySWQsIG51bGwsIHRydWUpO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCflJIgUGFzc3dvcmQgcmVzZXQgY29tcGxldGVkIGZvcjogJHtjYWNoZWRUb2tlbkRhdGEuZW1haWx9YCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgbWVzc2FnZTpcclxuICAgICAgICAgIFwiUGFzc3dvcmQgcmVzZXQgc3VjY2Vzc2Z1bC4gUGxlYXNlIGxvZ2luIHdpdGggeW91ciBuZXcgcGFzc3dvcmQuXCIsXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiUGFzc3dvcmQgcmVzZXQgY29tcGxldGlvbiBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFRva2VuIHZlcmlmaWNhdGlvbiBhbmQgdXNlciBleHRyYWN0aW9uXHJcbiAgYXN5bmMgdmVyaWZ5VG9rZW4odG9rZW4pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghdG9rZW4pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb2tlbiBpcyByZXF1aXJlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlICdCZWFyZXIgJyBwcmVmaXggaWYgcHJlc2VudFxyXG4gICAgICBjb25zdCBjbGVhblRva2VuID0gdG9rZW4ucmVwbGFjZSgvXkJlYXJlclxccysvaSwgXCJcIik7XHJcblxyXG4gICAgICAvLyBWZXJpZnkgSldUIHRva2VuXHJcbiAgICAgIGNvbnN0IGRlY29kZWQgPSBqd3QudmVyaWZ5KGNsZWFuVG9rZW4sIHRoaXMuand0U2VjcmV0KTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRva2VuIGlzIGJsYWNrbGlzdGVkXHJcbiAgICAgIGNvbnN0IGlzQmxhY2tsaXN0ZWQgPSBhd2FpdCBjYWNoZS5nZXQoXHJcbiAgICAgICAgY2FjaGUua2V5KFwiQVVUSFwiLCBgYmxhY2tsaXN0OiR7Y2xlYW5Ub2tlbn1gKVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoaXNCbGFja2xpc3RlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRva2VuIGhhcyBiZWVuIHJldm9rZWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdldCBjYWNoZWQgc2Vzc2lvblxyXG4gICAgICBsZXQgc2Vzc2lvbkRhdGEgPSBhd2FpdCBjYWNoZS5nZXRDYWNoZWRVc2VyU2Vzc2lvbihkZWNvZGVkLnVzZXJJZCk7XHJcblxyXG4gICAgICBpZiAoIXNlc3Npb25EYXRhKSB7XHJcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gZGF0YWJhc2VcclxuICAgICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgcHJpc21hLnVzZXJTZXNzaW9uLmZpbmRGaXJzdCh7XHJcbiAgICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgICB1c2VySWQ6IGRlY29kZWQudXNlcklkLFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogY2xlYW5Ub2tlbixcclxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIGV4cGlyZXNBdDogeyBndDogbmV3IERhdGUoKSB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGluY2x1ZGU6IHsgdXNlcjogdHJ1ZSB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXNlc3Npb24pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlc3Npb24gbm90IGZvdW5kIG9yIGV4cGlyZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXNzaW9uRGF0YSA9IHtcclxuICAgICAgICAgIHVzZXJJZDogc2Vzc2lvbi51c2VyLmlkLFxyXG4gICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLmlkLFxyXG4gICAgICAgICAgcm9sZTogc2Vzc2lvbi51c2VyLnJvbGUsXHJcbiAgICAgICAgICBwZXJtaXNzaW9uczogYXdhaXQgdGhpcy5nZXRVc2VyUGVybWlzc2lvbnMoc2Vzc2lvbi51c2VyLnJvbGUpLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBsYXN0IGFjdGl2aXR5XHJcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2Vzc2lvbkFjdGl2aXR5KHNlc3Npb25EYXRhLnNlc3Npb25JZCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgIGlkOiBkZWNvZGVkLnVzZXJJZCxcclxuICAgICAgICAgIGVtYWlsOiBkZWNvZGVkLmVtYWlsLFxyXG4gICAgICAgICAgcm9sZTogZGVjb2RlZC5yb2xlLFxyXG4gICAgICAgICAgcGVybWlzc2lvbnM6IHNlc3Npb25EYXRhLnBlcm1pc3Npb25zLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uRGF0YS5zZXNzaW9uSWQsXHJcbiAgICAgICAgZGVjb2RlZCxcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUb2tlbiB2ZXJpZmljYXRpb24gZXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBFbmhhbmNlZCBtaWRkbGV3YXJlIGZvciByb3V0ZSBwcm90ZWN0aW9uXHJcbiAgcmVxdWlyZUF1dGgob3B0aW9ucyA9IHt9KSB7XHJcbiAgICBjb25zdCB7IHJvbGVzID0gW10sIHBlcm1pc3Npb25zID0gW10sIG9wdGlvbmFsID0gZmFsc2UgfSA9IG9wdGlvbnM7XHJcblxyXG4gICAgcmV0dXJuIGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5leHRyYWN0VG9rZW5Gcm9tUmVxdWVzdChyZXEpO1xyXG5cclxuICAgICAgICBpZiAoIXRva2VuKSB7XHJcbiAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgcmVxLnVzZXIgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcclxuICAgICAgICAgICAgZXJyb3I6IFwiQWNjZXNzIHRva2VuIHJlcXVpcmVkXCIsXHJcbiAgICAgICAgICAgIGNvZGU6IFwiVE9LRU5fTUlTU0lOR1wiLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB2ZXJpZmljYXRpb24gPSBhd2FpdCB0aGlzLnZlcmlmeVRva2VuKHRva2VuKTtcclxuXHJcbiAgICAgICAgaWYgKCF2ZXJpZmljYXRpb24udmFsaWQpIHtcclxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XHJcbiAgICAgICAgICAgIGVycm9yOiB2ZXJpZmljYXRpb24uZXJyb3IsXHJcbiAgICAgICAgICAgIGNvZGU6IFwiVE9LRU5fSU5WQUxJRFwiLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayByb2xlIGF1dGhvcml6YXRpb25cclxuICAgICAgICBpZiAocm9sZXMubGVuZ3RoID4gMCAmJiAhcm9sZXMuaW5jbHVkZXModmVyaWZpY2F0aW9uLnVzZXIucm9sZSkpIHtcclxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XHJcbiAgICAgICAgICAgIGVycm9yOiBcIkluc3VmZmljaWVudCByb2xlIHBlcm1pc3Npb25zXCIsXHJcbiAgICAgICAgICAgIGNvZGU6IFwiUk9MRV9JTlNVRkZJQ0lFTlRcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHJvbGVzLFxyXG4gICAgICAgICAgICBjdXJyZW50OiB2ZXJpZmljYXRpb24udXNlci5yb2xlLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBwZXJtaXNzaW9uIGF1dGhvcml6YXRpb25cclxuICAgICAgICBpZiAocGVybWlzc2lvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgdXNlclBlcm1pc3Npb25zID0gdmVyaWZpY2F0aW9uLnVzZXIucGVybWlzc2lvbnMgfHwgW107XHJcbiAgICAgICAgICBjb25zdCBoYXNQZXJtaXNzaW9uID0gcGVybWlzc2lvbnMuc29tZSgocGVybSkgPT5cclxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKHBlcm0pXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGlmICghaGFzUGVybWlzc2lvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xyXG4gICAgICAgICAgICAgIGVycm9yOiBcIkluc3VmZmljaWVudCBwZXJtaXNzaW9uc1wiLFxyXG4gICAgICAgICAgICAgIGNvZGU6IFwiUEVSTUlTU0lPTl9JTlNVRkZJQ0lFTlRcIixcclxuICAgICAgICAgICAgICByZXF1aXJlZDogcGVybWlzc2lvbnMsXHJcbiAgICAgICAgICAgICAgY3VycmVudDogdXNlclBlcm1pc3Npb25zLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEF0dGFjaCB1c2VyIHRvIHJlcXVlc3RcclxuICAgICAgICByZXEudXNlciA9IHZlcmlmaWNhdGlvbi51c2VyO1xyXG4gICAgICAgIHJlcS5zZXNzaW9uSWQgPSB2ZXJpZmljYXRpb24uc2Vzc2lvbklkO1xyXG5cclxuICAgICAgICAvLyBSYXRlIGxpbWl0aW5nIHBlciB1c2VyXHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrVXNlclJhdGVMaW1pdCh2ZXJpZmljYXRpb24udXNlci5pZCkpIHtcclxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQyOSkuanNvbih7XHJcbiAgICAgICAgICAgIGVycm9yOiBcIlJhdGUgbGltaXQgZXhjZWVkZWRcIixcclxuICAgICAgICAgICAgY29kZTogXCJSQVRFX0xJTUlUX0VYQ0VFREVEXCIsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5leHQoKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiQXV0aCBtaWRkbGV3YXJlIGVycm9yOlwiLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcclxuICAgICAgICAgIGVycm9yOiBcIkludGVybmFsIGF1dGhlbnRpY2F0aW9uIGVycm9yXCIsXHJcbiAgICAgICAgICBjb2RlOiBcIkFVVEhfSU5URVJOQUxfRVJST1JcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEFkbWluIG1pZGRsZXdhcmUgZm9yIGFkbWluaXN0cmF0aXZlIHJvdXRlc1xyXG4gIHJlcXVpcmVBZG1pbigpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVpcmVBdXRoKHsgcm9sZXM6IFtcImFkbWluXCIsIFwic3VwZXJfYWRtaW5cIl0gfSk7XHJcbiAgfVxyXG5cclxuICAvLyBPcHRpb25hbCBhdXRoZW50aWNhdGlvbiBtaWRkbGV3YXJlXHJcbiAgb3B0aW9uYWxBdXRoKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWlyZUF1dGgoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICB9XHJcblxyXG4gIC8vIFR3by1mYWN0b3IgYXV0aGVudGljYXRpb24gc2V0dXBcclxuICBhc3luYyBzZXR1cFR3b0ZhY3Rvcih1c2VySWQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHsgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9IH0pO1xyXG4gICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc2VyIG5vdCBmb3VuZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2VuZXJhdGUgc2VjcmV0IGtleVxyXG4gICAgICBjb25zdCBzZWNyZXQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMjApLnRvU3RyaW5nKFwiYmFzZTMyXCIpO1xyXG5cclxuICAgICAgLy8gU3RvcmUgc2VjcmV0IHRlbXBvcmFyaWx5ICh3aWxsIGJlIGNvbmZpcm1lZCBsYXRlcilcclxuICAgICAgYXdhaXQgY2FjaGUuc2V0KFxyXG4gICAgICAgIGNhY2hlLmtleShcIkFVVEhcIiwgYDJmYTpzZXR1cDoke3VzZXJJZH1gKSxcclxuICAgICAgICB7IHNlY3JldCwgY29uZmlybWVkOiBmYWxzZSB9LFxyXG4gICAgICAgIDYwMCAvLyAxMCBtaW51dGVzXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgc2VjcmV0LFxyXG4gICAgICAgIHFyQ29kZTogdGhpcy5nZW5lcmF0ZVFSQ29kZVVybCh1c2VyLmVtYWlsLCBzZWNyZXQpLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiU2NhbiBRUiBjb2RlIHdpdGggeW91ciBhdXRoZW50aWNhdG9yIGFwcFwiLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIjJGQSBzZXR1cCBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFZlcmlmeSB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIHRva2VuXHJcbiAgYXN5bmMgdmVyaWZ5VHdvRmFjdG9yKHVzZXJJZCwgdG9rZW4sIGNvbmZpcm0gPSBmYWxzZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKGNvbmZpcm0pIHtcclxuICAgICAgICAvLyBDb25maXJtaW5nIDJGQSBzZXR1cFxyXG4gICAgICAgIGNvbnN0IHNldHVwRGF0YSA9IGF3YWl0IGNhY2hlLmdldChcclxuICAgICAgICAgIGNhY2hlLmtleShcIkFVVEhcIiwgYDJmYTpzZXR1cDoke3VzZXJJZH1gKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCFzZXR1cERhdGEpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIjJGQSBzZXR1cCBub3QgZm91bmQgb3IgZXhwaXJlZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLnZlcmlmeVRPVFAodG9rZW4sIHNldHVwRGF0YS5zZWNyZXQpO1xyXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCAyRkEgdG9rZW5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFbmFibGUgMkZBIGZvciB1c2VyXHJcbiAgICAgICAgYXdhaXQgcHJpc21hLnVzZXIudXBkYXRlKHtcclxuICAgICAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcclxuICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgdHdvRmFjdG9yRW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgdHdvRmFjdG9yU2VjcmV0OiBzZXR1cERhdGEuc2VjcmV0LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQ2xlYXIgc2V0dXAgZGF0YVxyXG4gICAgICAgIGF3YWl0IGNhY2hlLmRlbChjYWNoZS5rZXkoXCJBVVRIXCIsIGAyZmE6c2V0dXA6JHt1c2VySWR9YCkpO1xyXG5cclxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiBcIjJGQSBlbmFibGVkIHN1Y2Nlc3NmdWxseVwiIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVmVyaWZ5aW5nIDJGQSBkdXJpbmcgbG9naW5cclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSB9KTtcclxuICAgICAgICBpZiAoIXVzZXIgfHwgIXVzZXIudHdvRmFjdG9yRW5hYmxlZCkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiMkZBIG5vdCBlbmFibGVkIGZvciB0aGlzIHVzZXJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy52ZXJpZnlUT1RQKHRva2VuLCB1c2VyLnR3b0ZhY3RvclNlY3JldCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN1Y2Nlc3M6IGlzVmFsaWQsXHJcbiAgICAgICAgICBtZXNzYWdlOiBpc1ZhbGlkID8gXCIyRkEgdmVyaWZpZWRcIiA6IFwiSW52YWxpZCAyRkEgdG9rZW5cIixcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiMkZBIHZlcmlmaWNhdGlvbiBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNlc3Npb24gbWFuYWdlbWVudCB1dGlsaXRpZXNcclxuICBhc3luYyBjcmVhdGVTZXNzaW9uKHVzZXJJZCwgc2Vzc2lvbkRhdGEpIHtcclxuICAgIGNvbnN0IHsgYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiwgdXNlckFnZW50LCBpcEFkZHJlc3MsIHJlbWVtYmVyTWUgfSA9XHJcbiAgICAgIHNlc3Npb25EYXRhO1xyXG5cclxuICAgIC8vIENoZWNrIHNlc3Npb24gbGltaXRcclxuICAgIGF3YWl0IHRoaXMuZW5mb3JjZVNlc3Npb25MaW1pdCh1c2VySWQpO1xyXG5cclxuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKCk7XHJcbiAgICBleHBpcmVzQXQuc2V0VGltZShcclxuICAgICAgZXhwaXJlc0F0LmdldFRpbWUoKSArXHJcbiAgICAgICAgKHJlbWVtYmVyTWVcclxuICAgICAgICAgID8gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDAgLy8gNyBkYXlzXHJcbiAgICAgICAgICA6IDI0ICogNjAgKiA2MCAqIDEwMDApXHJcbiAgICApOyAvLyAxIGRheVxyXG5cclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24uY3JlYXRlKHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICBhY2Nlc3NUb2tlbixcclxuICAgICAgICByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgdXNlckFnZW50OiB1c2VyQWdlbnQgfHwgXCJVbmtub3duXCIsXHJcbiAgICAgICAgaXBBZGRyZXNzOiBpcEFkZHJlc3MgfHwgXCJVbmtub3duXCIsXHJcbiAgICAgICAgZXhwaXJlc0F0LFxyXG4gICAgICAgIGxhc3RBY3Rpdml0eUF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBlbmZvcmNlU2Vzc2lvbkxpbWl0KHVzZXJJZCkge1xyXG4gICAgY29uc3QgYWN0aXZlU2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24uZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6IFwiYXNjXCIgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChhY3RpdmVTZXNzaW9ucy5sZW5ndGggPj0gdGhpcy5tYXhTZXNzaW9uc1BlclVzZXIpIHtcclxuICAgICAgLy8gRGVhY3RpdmF0ZSBvbGRlc3Qgc2Vzc2lvbnNcclxuICAgICAgY29uc3Qgc2Vzc2lvbnNUb0RlYWN0aXZhdGUgPSBhY3RpdmVTZXNzaW9ucy5zbGljZShcclxuICAgICAgICAwLFxyXG4gICAgICAgIGFjdGl2ZVNlc3Npb25zLmxlbmd0aCAtIHRoaXMubWF4U2Vzc2lvbnNQZXJVc2VyICsgMVxyXG4gICAgICApO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIHNlc3Npb25zVG9EZWFjdGl2YXRlKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbnZhbGlkYXRlU2Vzc2lvbihzZXNzaW9uLmlkKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgaW52YWxpZGF0ZVNlc3Npb24oc2Vzc2lvbklkKSB7XHJcbiAgICBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24udXBkYXRlKHtcclxuICAgICAgd2hlcmU6IHsgaWQ6IHNlc3Npb25JZCB9LFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGxvZ2dlZE91dEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVTZXNzaW9uQWN0aXZpdHkoc2Vzc2lvbklkKSB7XHJcbiAgICBhd2FpdCBwcmlzbWEudXNlclNlc3Npb24udXBkYXRlKHtcclxuICAgICAgd2hlcmU6IHsgaWQ6IHNlc3Npb25JZCB9LFxyXG4gICAgICBkYXRhOiB7IGxhc3RBY3Rpdml0eUF0OiBuZXcgRGF0ZSgpIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFNlY3VyaXR5IHV0aWxpdGllc1xyXG4gIGFzeW5jIGhhc2hQYXNzd29yZChwYXNzd29yZCkge1xyXG4gICAgY29uc3Qgc2FsdFJvdW5kcyA9IHBhcnNlSW50KHByb2Nlc3MuZW52LkJDUllQVF9ST1VORFMpIHx8IDEyO1xyXG4gICAgcmV0dXJuIGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCBzYWx0Um91bmRzKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHZlcmlmeVBhc3N3b3JkKHBsYWluUGFzc3dvcmQsIGhhc2hlZFBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGxhaW5QYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGVQYXNzd29yZFN0cmVuZ3RoKHBhc3N3b3JkKSB7XHJcbiAgICBjb25zdCBwb2xpY3kgPSB0aGlzLnBhc3N3b3JkUG9saWN5O1xyXG4gICAgY29uc3QgZXJyb3JzID0gW107XHJcblxyXG4gICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IHBvbGljeS5taW5MZW5ndGgpIHtcclxuICAgICAgZXJyb3JzLnB1c2goXHJcbiAgICAgICAgYFBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgJHtwb2xpY3kubWluTGVuZ3RofSBjaGFyYWN0ZXJzIGxvbmdgXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBvbGljeS5yZXF1aXJlVXBwZXJjYXNlICYmICEvW0EtWl0vLnRlc3QocGFzc3dvcmQpKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKFwiUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwb2xpY3kucmVxdWlyZUxvd2VyY2FzZSAmJiAhL1thLXpdLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4gICAgICBlcnJvcnMucHVzaChcIlBhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlclwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocG9saWN5LnJlcXVpcmVOdW1iZXJzICYmICEvXFxkLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4gICAgICBlcnJvcnMucHVzaChcIlBhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbnVtYmVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgcG9saWN5LnJlcXVpcmVTcGVjaWFsQ2hhcnMgJiZcclxuICAgICAgIS9bIUAjJCVeJiooKSwuP1wiOnt9fDw+XS8udGVzdChwYXNzd29yZClcclxuICAgICkge1xyXG4gICAgICBlcnJvcnMucHVzaChcIlBhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGNvbW1vbiBwYXNzd29yZHNcclxuICAgIGlmICh0aGlzLmlzQ29tbW9uUGFzc3dvcmQocGFzc3dvcmQpKSB7XHJcbiAgICAgIGVycm9ycy5wdXNoKFwiUGFzc3dvcmQgaXMgdG9vIGNvbW1vbi4gUGxlYXNlIGNob29zZSBhIHN0cm9uZ2VyIHBhc3N3b3JkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhc3N3b3JkIHZhbGlkYXRpb24gZmFpbGVkOiAke2Vycm9ycy5qb2luKFwiLCBcIil9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0NvbW1vblBhc3N3b3JkKHBhc3N3b3JkKSB7XHJcbiAgICBjb25zdCBjb21tb25QYXNzd29yZHMgPSBbXHJcbiAgICAgIFwicGFzc3dvcmRcIixcclxuICAgICAgXCIxMjM0NTZcIixcclxuICAgICAgXCIxMjM0NTY3OFwiLFxyXG4gICAgICBcInF3ZXJ0eVwiLFxyXG4gICAgICBcImFiYzEyM1wiLFxyXG4gICAgICBcInBhc3N3b3JkMTIzXCIsXHJcbiAgICAgIFwiYWRtaW5cIixcclxuICAgICAgXCJsZXRtZWluXCIsXHJcbiAgICAgIFwid2VsY29tZVwiLFxyXG4gICAgICBcIm1vbmtleVwiLFxyXG4gICAgXTtcclxuICAgIHJldHVybiBjb21tb25QYXNzd29yZHMuaW5jbHVkZXMocGFzc3dvcmQudG9Mb3dlckNhc2UoKSk7XHJcbiAgfVxyXG5cclxuICBpc1Bhc3N3b3JkRXhwaXJlZChsYXN0UGFzc3dvcmRDaGFuZ2UpIHtcclxuICAgIGlmICghbGFzdFBhc3N3b3JkQ2hhbmdlKSByZXR1cm4gdHJ1ZTtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBwYXNzd29yZEFnZSA9IG5vdyAtIG5ldyBEYXRlKGxhc3RQYXNzd29yZENoYW5nZSkuZ2V0VGltZSgpO1xyXG4gICAgcmV0dXJuIHBhc3N3b3JkQWdlID4gdGhpcy5wYXNzd29yZFBvbGljeS5tYXhBZ2U7XHJcbiAgfVxyXG5cclxuICAvLyBUb2tlbiBnZW5lcmF0aW9uIHV0aWxpdGllc1xyXG4gIGdlbmVyYXRlQWNjZXNzVG9rZW4odXNlcikge1xyXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgdXNlcklkOiB1c2VyLmlkLFxyXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCxcclxuICAgICAgcm9sZTogdXNlci5yb2xlLFxyXG4gICAgICB0eXBlOiBcImFjY2Vzc1wiLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gand0LnNpZ24ocGF5bG9hZCwgdGhpcy5qd3RTZWNyZXQsIHtcclxuICAgICAgZXhwaXJlc0luOiB0aGlzLnRva2VuRXhwaXJ5LFxyXG4gICAgICBpc3N1ZXI6IHByb2Nlc3MuZW52LkpXVF9JU1NVRVIgfHwgXCJpcG8tdHJhY2tlclwiLFxyXG4gICAgICBhdWRpZW5jZTogcHJvY2Vzcy5lbnYuSldUX0FVRElFTkNFIHx8IFwiaXBvLXBsYXRmb3JtXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlUmVmcmVzaFRva2VuKHVzZXIpIHtcclxuICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgIHVzZXJJZDogdXNlci5pZCxcclxuICAgICAgZW1haWw6IHVzZXIuZW1haWwsXHJcbiAgICAgIHR5cGU6IFwicmVmcmVzaFwiLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gand0LnNpZ24ocGF5bG9hZCwgdGhpcy5qd3RSZWZyZXNoU2VjcmV0LCB7XHJcbiAgICAgIGV4cGlyZXNJbjogdGhpcy5yZWZyZXNoVG9rZW5FeHBpcnksXHJcbiAgICAgIGlzc3VlcjogcHJvY2Vzcy5lbnYuSldUX0lTU1VFUiB8fCBcImlwby10cmFja2VyXCIsXHJcbiAgICAgIGF1ZGllbmNlOiBwcm9jZXNzLmVudi5KV1RfQVVESUVOQ0UgfHwgXCJpcG8tcGxhdGZvcm1cIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2VuZXJhdGVUb2tlbnModXNlciwgcmVtZW1iZXJNZSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHRoaXMuZ2VuZXJhdGVBY2Nlc3NUb2tlbih1c2VyKTtcclxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbkV4cGlyeSA9IHJlbWVtYmVyTWUgPyBcIjMwZFwiIDogdGhpcy5yZWZyZXNoVG9rZW5FeHBpcnk7XHJcblxyXG4gICAgY29uc3QgcmVmcmVzaFBheWxvYWQgPSB7XHJcbiAgICAgIHVzZXJJZDogdXNlci5pZCxcclxuICAgICAgZW1haWw6IHVzZXIuZW1haWwsXHJcbiAgICAgIHR5cGU6IFwicmVmcmVzaFwiLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBqd3Quc2lnbihyZWZyZXNoUGF5bG9hZCwgdGhpcy5qd3RSZWZyZXNoU2VjcmV0LCB7XHJcbiAgICAgIGV4cGlyZXNJbjogcmVmcmVzaFRva2VuRXhwaXJ5LFxyXG4gICAgICBpc3N1ZXI6IHByb2Nlc3MuZW52LkpXVF9JU1NVRVIgfHwgXCJpcG8tdHJhY2tlclwiLFxyXG4gICAgICBhdWRpZW5jZTogcHJvY2Vzcy5lbnYuSldUX0FVRElFTkNFIHx8IFwiaXBvLXBsYXRmb3JtXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4geyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZW5lcmF0ZVZlcmlmaWNhdGlvblRva2VuKHVzZXJJZCkge1xyXG4gICAgY29uc3QgdG9rZW4gPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKFwiaGV4XCIpO1xyXG4gICAgY29uc3QgdG9rZW5IYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKHRva2VuKS5kaWdlc3QoXCJoZXhcIik7XHJcbiAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCk7IC8vIDI0IGhvdXJzXHJcblxyXG4gICAgYXdhaXQgcHJpc21hLmVtYWlsVmVyaWZpY2F0aW9uVG9rZW4uY3JlYXRlKHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICB0b2tlbkhhc2gsXHJcbiAgICAgICAgZXhwaXJlc0F0LFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRva2VuO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9rZW5FeHBpcnkoKSB7XHJcbiAgICAvLyBDb252ZXJ0IEpXVCBleHBpcnkgdG8gc2Vjb25kc1xyXG4gICAgY29uc3QgZXhwaXJ5ID0gdGhpcy50b2tlbkV4cGlyeTtcclxuICAgIGlmIChleHBpcnkuZW5kc1dpdGgoXCJtXCIpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUludChleHBpcnkpICogNjA7XHJcbiAgICB9IGVsc2UgaWYgKGV4cGlyeS5lbmRzV2l0aChcImhcIikpIHtcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KGV4cGlyeSkgKiA2MCAqIDYwO1xyXG4gICAgfSBlbHNlIGlmIChleHBpcnkuZW5kc1dpdGgoXCJkXCIpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUludChleHBpcnkpICogMjQgKiA2MCAqIDYwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDkwMDsgLy8gMTUgbWludXRlcyBkZWZhdWx0XHJcbiAgfVxyXG5cclxuICAvLyBSYXRlIGxpbWl0aW5nIHV0aWxpdGllc1xyXG4gIGlzUmF0ZUxpbWl0ZWQoa2V5LCBtYXhBdHRlbXB0cyA9IDUsIHdpbmRvd01zID0gMTUgKiA2MCAqIDEwMDApIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCB3aW5kb3dTdGFydCA9IE1hdGguZmxvb3Iobm93IC8gd2luZG93TXMpICogd2luZG93TXM7XHJcbiAgICBjb25zdCByYXRlTGltaXRLZXkgPSBgJHtrZXl9OiR7d2luZG93U3RhcnR9YDtcclxuXHJcbiAgICBpZiAoIXRoaXMucmF0ZUxpbWl0TWFwLmhhcyhyYXRlTGltaXRLZXkpKSB7XHJcbiAgICAgIHRoaXMucmF0ZUxpbWl0TWFwLnNldChyYXRlTGltaXRLZXksIHsgY291bnQ6IDAsIHdpbmRvd1N0YXJ0IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJhdGVMaW1pdERhdGEgPSB0aGlzLnJhdGVMaW1pdE1hcC5nZXQocmF0ZUxpbWl0S2V5KTtcclxuXHJcbiAgICBpZiAocmF0ZUxpbWl0RGF0YS53aW5kb3dTdGFydCAhPT0gd2luZG93U3RhcnQpIHtcclxuICAgICAgcmF0ZUxpbWl0RGF0YS5jb3VudCA9IDA7XHJcbiAgICAgIHJhdGVMaW1pdERhdGEud2luZG93U3RhcnQgPSB3aW5kb3dTdGFydDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmF0ZUxpbWl0RGF0YS5jb3VudCA+PSBtYXhBdHRlbXB0cztcclxuICB9XHJcblxyXG4gIGFzeW5jIHJlY29yZEZhaWxlZEF0dGVtcHQoa2V5KSB7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3Qgd2luZG93U3RhcnQgPSBNYXRoLmZsb29yKG5vdyAvICgxNSAqIDYwICogMTAwMCkpICogKDE1ICogNjAgKiAxMDAwKTtcclxuICAgIGNvbnN0IHJhdGVMaW1pdEtleSA9IGAke2tleX06JHt3aW5kb3dTdGFydH1gO1xyXG5cclxuICAgIGlmICghdGhpcy5yYXRlTGltaXRNYXAuaGFzKHJhdGVMaW1pdEtleSkpIHtcclxuICAgICAgdGhpcy5yYXRlTGltaXRNYXAuc2V0KHJhdGVMaW1pdEtleSwgeyBjb3VudDogMCwgd2luZG93U3RhcnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmF0ZUxpbWl0RGF0YSA9IHRoaXMucmF0ZUxpbWl0TWFwLmdldChyYXRlTGltaXRLZXkpO1xyXG4gICAgcmF0ZUxpbWl0RGF0YS5jb3VudCsrO1xyXG5cclxuICAgIC8vIENsZWFudXAgb2xkIGVudHJpZXNcclxuICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICB0aGlzLnJhdGVMaW1pdE1hcC5kZWxldGUocmF0ZUxpbWl0S2V5KTtcclxuICAgICAgfSxcclxuICAgICAgMTUgKiA2MCAqIDEwMDBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjbGVhclJhdGVMaW1pdChrZXkpIHtcclxuICAgIGNvbnN0IGtleXNUb0RlbGV0ZSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBbbWFwS2V5XSBvZiB0aGlzLnJhdGVMaW1pdE1hcCkge1xyXG4gICAgICBpZiAobWFwS2V5LnN0YXJ0c1dpdGgoa2V5KSkge1xyXG4gICAgICAgIGtleXNUb0RlbGV0ZS5wdXNoKG1hcEtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGtleXNUb0RlbGV0ZS5mb3JFYWNoKChrKSA9PiB0aGlzLnJhdGVMaW1pdE1hcC5kZWxldGUoaykpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tVc2VyUmF0ZUxpbWl0KHVzZXJJZCwgbWF4UmVxdWVzdHMgPSAxMDAsIHdpbmRvd01zID0gNjAgKiAxMDAwKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuaXNSYXRlTGltaXRlZChgdXNlcjoke3VzZXJJZH1gLCBtYXhSZXF1ZXN0cywgd2luZG93TXMpO1xyXG4gIH1cclxuXHJcbiAgLy8gQWNjb3VudCBzZWN1cml0eSB1dGlsaXRpZXNcclxuICBhc3luYyBpc0FjY291bnRMb2NrZWQodXNlcklkKSB7XHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcclxuICAgICAgc2VsZWN0OiB7IGZhaWxlZExvZ2luQXR0ZW1wdHM6IHRydWUsIGxvY2tlZEF0OiB0cnVlIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXVzZXIpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBpZiAodXNlci5mYWlsZWRMb2dpbkF0dGVtcHRzID49IHRoaXMubWF4TG9naW5BdHRlbXB0cykge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdXNlci5sb2NrZWRBdCAmJlxyXG4gICAgICAgIERhdGUubm93KCkgLSBuZXcgRGF0ZSh1c2VyLmxvY2tlZEF0KS5nZXRUaW1lKCkgPCB0aGlzLmxvY2tvdXREdXJhdGlvblxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBSZXNldCBsb2NrIGlmIGxvY2tvdXQgZHVyYXRpb24gaGFzIHBhc3NlZFxyXG4gICAgICAgIGF3YWl0IHRoaXMuY2xlYXJGYWlsZWRMb2dpbkF0dGVtcHRzKHVzZXJJZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbmNyZW1lbnRGYWlsZWRMb2dpbkF0dGVtcHRzKHVzZXJJZCkge1xyXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xyXG4gICAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXHJcbiAgICAgIHNlbGVjdDogeyBmYWlsZWRMb2dpbkF0dGVtcHRzOiB0cnVlIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBuZXdBdHRlbXB0cyA9ICh1c2VyPy5mYWlsZWRMb2dpbkF0dGVtcHRzIHx8IDApICsgMTtcclxuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7IGZhaWxlZExvZ2luQXR0ZW1wdHM6IG5ld0F0dGVtcHRzIH07XHJcblxyXG4gICAgaWYgKG5ld0F0dGVtcHRzID49IHRoaXMubWF4TG9naW5BdHRlbXB0cykge1xyXG4gICAgICB1cGRhdGVEYXRhLmxvY2tlZEF0ID0gbmV3IERhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBwcmlzbWEudXNlci51cGRhdGUoe1xyXG4gICAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXHJcbiAgICAgIGRhdGE6IHVwZGF0ZURhdGEsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNsZWFyRmFpbGVkTG9naW5BdHRlbXB0cyh1c2VySWQpIHtcclxuICAgIGF3YWl0IHByaXNtYS51c2VyLnVwZGF0ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGZhaWxlZExvZ2luQXR0ZW1wdHM6IDAsXHJcbiAgICAgICAgbG9ja2VkQXQ6IG51bGwsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb25zXHJcbiAgdmFsaWRhdGVSZWdpc3RyYXRpb25JbnB1dCh7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSB9KSB7XHJcbiAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCB8fCAhbmFtZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbWFpbCwgcGFzc3dvcmQsIGFuZCBuYW1lIGFyZSByZXF1aXJlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuaXNWYWxpZEVtYWlsKGVtYWlsKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVtYWlsIGZvcm1hdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmFtZS50cmltKCkubGVuZ3RoIDwgMikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lIG11c3QgYmUgYXQgbGVhc3QgMiBjaGFyYWN0ZXJzIGxvbmdcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc1ZhbGlkRW1haWwoZW1haWwpIHtcclxuICAgIGNvbnN0IGVtYWlsUmVnZXggPSAvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLztcclxuICAgIHJldHVybiBlbWFpbFJlZ2V4LnRlc3QoZW1haWwpO1xyXG4gIH1cclxuXHJcbiAgc2FuaXRpemVVc2VyKHVzZXIpIHtcclxuICAgIGNvbnN0IHsgcGFzc3dvcmQsIHR3b0ZhY3RvclNlY3JldCwgLi4uc2FmZVVzZXIgfSA9IHVzZXI7XHJcbiAgICByZXR1cm4gc2FmZVVzZXI7XHJcbiAgfVxyXG5cclxuICBleHRyYWN0VG9rZW5Gcm9tUmVxdWVzdChyZXEpIHtcclxuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xyXG4gICAgaWYgKGF1dGhIZWFkZXIgJiYgYXV0aEhlYWRlci5zdGFydHNXaXRoKFwiQmVhcmVyIFwiKSkge1xyXG4gICAgICByZXR1cm4gYXV0aEhlYWRlci5zdWJzdHJpbmcoNyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgY29va2llcyBhcyBmYWxsYmFja1xyXG4gICAgaWYgKHJlcS5jb29raWVzICYmIHJlcS5jb29raWVzLmFjY2Vzc190b2tlbikge1xyXG4gICAgICByZXR1cm4gcmVxLmNvb2tpZXMuYWNjZXNzX3Rva2VuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0VXNlclBlcm1pc3Npb25zKHJvbGUpIHtcclxuICAgIGNvbnN0IHJvbGVQZXJtaXNzaW9ucyA9IHtcclxuICAgICAgdXNlcjogW1xyXG4gICAgICAgIFwicmVhZDpvd25fcHJvZmlsZVwiLFxyXG4gICAgICAgIFwidXBkYXRlOm93bl9wcm9maWxlXCIsXHJcbiAgICAgICAgXCJyZWFkOmlwb3NcIixcclxuICAgICAgICBcImNyZWF0ZTp3YXRjaGxpc3RcIixcclxuICAgICAgXSxcclxuICAgICAgYWRtaW46IFtcInJlYWQ6YWxsXCIsIFwidXBkYXRlOmFsbFwiLCBcImRlbGV0ZTphbGxcIiwgXCJtYW5hZ2U6dXNlcnNcIl0sXHJcbiAgICAgIHN1cGVyX2FkbWluOiBbXCIqXCJdLCAvLyBBbGwgcGVybWlzc2lvbnNcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJvbGVQZXJtaXNzaW9uc1tyb2xlXSB8fCByb2xlUGVybWlzc2lvbnMudXNlcjtcclxuICB9XHJcblxyXG4gIC8vIDJGQSB1dGlsaXRpZXNcclxuICB2ZXJpZnlUT1RQKHRva2VuLCBzZWNyZXQpIHtcclxuICAgIC8vIFNpbXBsaWZpZWQgVE9UUCB2ZXJpZmljYXRpb24gLSB1c2UgYSBwcm9wZXIgbGlicmFyeSBsaWtlICdzcGVha2Vhc3knIGluIHByb2R1Y3Rpb25cclxuICAgIGNvbnN0IHRpbWVXaW5kb3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwIC8gMzApO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRUb2tlbiA9IHRoaXMuZ2VuZXJhdGVUT1RQKHNlY3JldCwgdGltZVdpbmRvdyk7XHJcblxyXG4gICAgLy8gQWxsb3cgZm9yIHRpbWUgZHJpZnQgKGNoZWNrIGN1cnJlbnQgYW5kIHByZXZpb3VzL25leHQgd2luZG93cylcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRva2VuID09PSBleHBlY3RlZFRva2VuIHx8XHJcbiAgICAgIHRva2VuID09PSB0aGlzLmdlbmVyYXRlVE9UUChzZWNyZXQsIHRpbWVXaW5kb3cgLSAxKSB8fFxyXG4gICAgICB0b2tlbiA9PT0gdGhpcy5nZW5lcmF0ZVRPVFAoc2VjcmV0LCB0aW1lV2luZG93ICsgMSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZVRPVFAoc2VjcmV0LCB0aW1lV2luZG93KSB7XHJcbiAgICAvLyBTaW1wbGlmaWVkIFRPVFAgZ2VuZXJhdGlvbiAtIHJlcGxhY2Ugd2l0aCBwcm9wZXIgaW1wbGVtZW50YXRpb25cclxuICAgIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XHJcbiAgICBjb25zdCBoYXNoID0gY3J5cHRvXHJcbiAgICAgIC5jcmVhdGVIbWFjKFwic2hhMVwiLCBzZWNyZXQpXHJcbiAgICAgIC51cGRhdGUodGltZVdpbmRvdy50b1N0cmluZygpKVxyXG4gICAgICAuZGlnZXN0KFwiaGV4XCIpO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gcGFyc2VJbnQoaGFzaC5zbGljZSgtMSksIDE2KTtcclxuICAgIGNvbnN0IGNvZGUgPSBwYXJzZUludChoYXNoLnNsaWNlKG9mZnNldCAqIDIsIG9mZnNldCAqIDIgKyA4KSwgMTYpICUgMTAwMDAwMDtcclxuICAgIHJldHVybiBjb2RlLnRvU3RyaW5nKCkucGFkU3RhcnQoNiwgXCIwXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVRUkNvZGVVcmwoZW1haWwsIHNlY3JldCkge1xyXG4gICAgY29uc3QgaXNzdWVyID0gZW5jb2RlVVJJQ29tcG9uZW50KHByb2Nlc3MuZW52LkFQUF9OQU1FIHx8IFwiSVBPIFRyYWNrZXJcIik7XHJcbiAgICBjb25zdCBhY2NvdW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKTtcclxuICAgIHJldHVybiBgb3RwYXV0aDovL3RvdHAvJHtpc3N1ZXJ9OiR7YWNjb3VudH0/c2VjcmV0PSR7c2VjcmV0fSZpc3N1ZXI9JHtpc3N1ZXJ9YDtcclxuICB9XHJcblxyXG4gIC8vIEFjdGl2aXR5IHRyYWNraW5nXHJcbiAgdHJhY2tBY3RpdmVTZXNzaW9uKHVzZXJJZCwgc2Vzc2lvbklkKSB7XHJcbiAgICBpZiAoIXRoaXMuYWN0aXZlU2Vzc2lvbnMuaGFzKHVzZXJJZCkpIHtcclxuICAgICAgdGhpcy5hY3RpdmVTZXNzaW9ucy5zZXQodXNlcklkLCBuZXcgU2V0KCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hY3RpdmVTZXNzaW9ucy5nZXQodXNlcklkKS5hZGQoc2Vzc2lvbklkKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUFjdGl2ZVNlc3Npb24odXNlcklkLCBzZXNzaW9uSWQpIHtcclxuICAgIGlmICh0aGlzLmFjdGl2ZVNlc3Npb25zLmhhcyh1c2VySWQpKSB7XHJcbiAgICAgIHRoaXMuYWN0aXZlU2Vzc2lvbnMuZ2V0KHVzZXJJZCkuZGVsZXRlKHNlc3Npb25JZCk7XHJcbiAgICAgIGlmICh0aGlzLmFjdGl2ZVNlc3Npb25zLmdldCh1c2VySWQpLnNpemUgPT09IDApIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZVNlc3Npb25zLmRlbGV0ZSh1c2VySWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVBY3RpdmVVc2Vyc0NvdW50KCkge1xyXG4gICAgdGhpcy5tZXRyaWNzLmFjdGl2ZVVzZXJzID0gdGhpcy5hY3RpdmVTZXNzaW9ucy5zaXplO1xyXG4gIH1cclxuXHJcbiAgcmVjb3JkU3VzcGljaW91c0FjdGl2aXR5KGVtYWlsLCBpcEFkZHJlc3MsIHR5cGUsIGRldGFpbHMpIHtcclxuICAgIHRoaXMubWV0cmljcy5zdXNwaWNpb3VzQWN0aXZpdGllcysrO1xyXG4gICAgY29uc29sZS53YXJuKFxyXG4gICAgICBg8J+aqCBTdXNwaWNpb3VzIGFjdGl2aXR5OiAke3R5cGV9IGZvciAke2VtYWlsfSBmcm9tICR7aXBBZGRyZXNzfTogJHtkZXRhaWxzfWBcclxuICAgICk7XHJcblxyXG4gICAgLy8gSW4gcHJvZHVjdGlvbiwgeW91IG1pZ2h0IHdhbnQgdG8gc3RvcmUgdGhpcyBpbiB0aGUgZGF0YWJhc2VcclxuICAgIC8vIG9yIHNlbmQgYWxlcnRzIHRvIHNlY3VyaXR5IG1vbml0b3Jpbmcgc3lzdGVtc1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGF1dGhlbnRpY2F0aW9uIG1ldHJpY3NcclxuICBnZXRNZXRyaWNzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5tZXRyaWNzLFxyXG4gICAgICBhY3RpdmVTZXNzaW9uczogdGhpcy5hY3RpdmVTZXNzaW9ucy5zaXplLFxyXG4gICAgICB0b3RhbFNlc3Npb25zOiBBcnJheS5mcm9tKHRoaXMuYWN0aXZlU2Vzc2lvbnMudmFsdWVzKCkpLnJlZHVjZShcclxuICAgICAgICAodG90YWwsIHNlc3Npb25zKSA9PiB0b3RhbCArIHNlc3Npb25zLnNpemUsXHJcbiAgICAgICAgMFxyXG4gICAgICApLFxyXG4gICAgICBsb2dpblN1Y2Nlc3NSYXRlOlxyXG4gICAgICAgIHRoaXMubWV0cmljcy50b3RhbExvZ2lucyA+IDBcclxuICAgICAgICAgID8gKFxyXG4gICAgICAgICAgICAgICh0aGlzLm1ldHJpY3Muc3VjY2Vzc2Z1bExvZ2lucyAvIHRoaXMubWV0cmljcy50b3RhbExvZ2lucykgKlxyXG4gICAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgICApLnRvRml4ZWQoMikgKyBcIiVcIlxyXG4gICAgICAgICAgOiBcIjAlXCIsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEhlYWx0aCBjaGVja1xyXG4gIGFzeW5jIGhlYWx0aENoZWNrKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVGVzdCBKV1QgZnVuY3Rpb25hbGl0eVxyXG4gICAgICBjb25zdCB0ZXN0VG9rZW4gPSBqd3Quc2lnbih7IHRlc3Q6IHRydWUgfSwgdGhpcy5qd3RTZWNyZXQsIHtcclxuICAgICAgICBleHBpcmVzSW46IFwiMXNcIixcclxuICAgICAgfSk7XHJcbiAgICAgIGp3dC52ZXJpZnkodGVzdFRva2VuLCB0aGlzLmp3dFNlY3JldCk7XHJcblxyXG4gICAgICAvLyBUZXN0IGRhdGFiYXNlIGNvbm5lY3Rpb25cclxuICAgICAgYXdhaXQgcHJpc21hLiRxdWVyeVJhd2BTRUxFQ1QgMWA7XHJcblxyXG4gICAgICAvLyBUZXN0IGNhY2hlIGNvbm5lY3Rpb25cclxuICAgICAgY29uc3QgY2FjaGVIZWFsdGh5ID0gYXdhaXQgY2FjaGUuaGVhbHRoQ2hlY2soKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcImhlYWx0aHlcIixcclxuICAgICAgICBqd3Q6IFwiZnVuY3Rpb25hbFwiLFxyXG4gICAgICAgIGRhdGFiYXNlOiBcImNvbm5lY3RlZFwiLFxyXG4gICAgICAgIGNhY2hlOiBjYWNoZUhlYWx0aHkuc3RhdHVzLFxyXG4gICAgICAgIG1ldHJpY3M6IHRoaXMuZ2V0TWV0cmljcygpLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXM6IFwidW5oZWFsdGh5XCIsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDbGVhbnVwIGV4cGlyZWQgc2Vzc2lvbnMgcGVyaW9kaWNhbGx5XHJcbiAgYXN5bmMgY2xlYW51cEV4cGlyZWRTZXNzaW9ucygpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS51c2VyU2Vzc2lvbi5kZWxldGVNYW55KHtcclxuICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgT1I6IFtcclxuICAgICAgICAgICAgeyBleHBpcmVzQXQ6IHsgbHQ6IG5ldyBEYXRlKCkgfSB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGxvZ2dlZE91dEF0OiB7XHJcbiAgICAgICAgICAgICAgICBsdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKSxcclxuICAgICAgICAgICAgICB9LCAvLyA3IGRheXMgYWdvXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYPCfp7kgQ2xlYW5lZCB1cCAke3Jlc3VsdC5jb3VudH0gZXhwaXJlZCBzZXNzaW9uc2ApO1xyXG4gICAgICByZXR1cm4gcmVzdWx0LmNvdW50O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIlNlc3Npb24gY2xlYW51cCBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJsYWNrbGlzdCB0b2tlbiAoZm9yIGxvZ291dC9zZWN1cml0eSlcclxuICBhc3luYyBibGFja2xpc3RUb2tlbih0b2tlbiwgZXhwaXJ5VGltZSkge1xyXG4gICAgY29uc3QgY2xlYW5Ub2tlbiA9IHRva2VuLnJlcGxhY2UoL15CZWFyZXJcXHMrL2ksIFwiXCIpO1xyXG4gICAgYXdhaXQgY2FjaGUuc2V0KFxyXG4gICAgICBjYWNoZS5rZXkoXCJBVVRIXCIsIGBibGFja2xpc3Q6JHtjbGVhblRva2VufWApLFxyXG4gICAgICB7IGJsYWNrbGlzdGVkOiB0cnVlLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfSxcclxuICAgICAgZXhwaXJ5VGltZSB8fCB0aGlzLmdldFRva2VuRXhwaXJ5KClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXHJcbmV4cG9ydCBjb25zdCBhdXRoU2VydmljZSA9IG5ldyBBdXRoU2VydmljZSgpO1xyXG5cclxuLy8gTWlkZGxld2FyZSBleHBvcnRzXHJcbmV4cG9ydCBjb25zdCByZXF1aXJlQXV0aCA9IChvcHRpb25zKSA9PiBhdXRoU2VydmljZS5yZXF1aXJlQXV0aChvcHRpb25zKTtcclxuZXhwb3J0IGNvbnN0IHJlcXVpcmVBZG1pbiA9ICgpID0+IGF1dGhTZXJ2aWNlLnJlcXVpcmVBZG1pbigpO1xyXG5leHBvcnQgY29uc3Qgb3B0aW9uYWxBdXRoID0gKCkgPT4gYXV0aFNlcnZpY2Uub3B0aW9uYWxBdXRoKCk7XHJcblxyXG4vLyBQZXJpb2RpYyBjbGVhbnVwIChldmVyeSA2IGhvdXJzKVxyXG5zZXRJbnRlcnZhbChcclxuICBhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBhdXRoU2VydmljZS5jbGVhbnVwRXhwaXJlZFNlc3Npb25zKCk7XHJcblxyXG4gICAgICAvLyBDbGVhbiB1cCByYXRlIGxpbWl0IG1hcFxyXG4gICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIGRhdGFdIG9mIGF1dGhTZXJ2aWNlLnJhdGVMaW1pdE1hcCkge1xyXG4gICAgICAgIGlmIChub3cgLSBkYXRhLndpbmRvd1N0YXJ0ID4gMTUgKiA2MCAqIDEwMDApIHtcclxuICAgICAgICAgIGF1dGhTZXJ2aWNlLnJhdGVMaW1pdE1hcC5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJBdXRoIHNlcnZpY2UgY2xlYW51cCBmYWlsZWQ6XCIsIGVycm9yKTtcclxuICAgIH1cclxuICB9LFxyXG4gIDYgKiA2MCAqIDYwICogMTAwMFxyXG4pO1xyXG5cclxuLy8gR3JhY2VmdWwgc2h1dGRvd25cclxucHJvY2Vzcy5vbihcIlNJR1RFUk1cIiwgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwi8J+UkCBBdXRoIHNlcnZpY2Ugc2h1dHRpbmcgZG93bi4uLlwiKTtcclxuICAvLyBDbGVhbnVwIHJlc291cmNlcyBpZiBuZWVkZWRcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhdXRoU2VydmljZTtcclxuIl0sIm5hbWVzIjpbInByaXNtYSIsImNhY2hlIiwiand0IiwiYmNyeXB0IiwiY3J5cHRvIiwiQXV0aFNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImp3dFNlY3JldCIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsImp3dFJlZnJlc2hTZWNyZXQiLCJKV1RfUkVGUkVTSF9TRUNSRVQiLCJ0b2tlbkV4cGlyeSIsIkpXVF9FWFBJUlkiLCJyZWZyZXNoVG9rZW5FeHBpcnkiLCJKV1RfUkVGUkVTSF9FWFBJUlkiLCJtYXhMb2dpbkF0dGVtcHRzIiwicGFyc2VJbnQiLCJNQVhfTE9HSU5fQVRURU1QVFMiLCJsb2Nrb3V0RHVyYXRpb24iLCJMT0NLT1VUX0RVUkFUSU9OIiwiYWN0aXZlU2Vzc2lvbnMiLCJNYXAiLCJtYXhTZXNzaW9uc1BlclVzZXIiLCJNQVhfU0VTU0lPTlNfUEVSX1VTRVIiLCJyYXRlTGltaXRNYXAiLCJhdXRoQXR0ZW1wdHMiLCJwYXNzd29yZFBvbGljeSIsIm1pbkxlbmd0aCIsInJlcXVpcmVVcHBlcmNhc2UiLCJyZXF1aXJlTG93ZXJjYXNlIiwicmVxdWlyZU51bWJlcnMiLCJyZXF1aXJlU3BlY2lhbENoYXJzIiwibWF4QWdlIiwibWV0cmljcyIsInRvdGFsTG9naW5zIiwiZmFpbGVkTG9naW5zIiwic3VjY2Vzc2Z1bExvZ2lucyIsImJsb2NrZWRBdHRlbXB0cyIsImFjdGl2ZVVzZXJzIiwic3VzcGljaW91c0FjdGl2aXRpZXMiLCJjb25zb2xlIiwibG9nIiwicmVnaXN0ZXIiLCJ1c2VyRGF0YSIsImVtYWlsIiwicGFzc3dvcmQiLCJuYW1lIiwicm9sZSIsInZhbGlkYXRlUmVnaXN0cmF0aW9uSW5wdXQiLCJleGlzdGluZ1VzZXIiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsInZhbGlkYXRlUGFzc3dvcmRTdHJlbmd0aCIsImhhc2hlZFBhc3N3b3JkIiwiaGFzaFBhc3N3b3JkIiwiY3JlYXRlIiwiZGF0YSIsInRyaW0iLCJpc0FjdGl2ZSIsImVtYWlsVmVyaWZpZWQiLCJ0d29GYWN0b3JFbmFibGVkIiwibGFzdFBhc3N3b3JkQ2hhbmdlIiwiRGF0ZSIsImNyZWF0ZWRBdCIsInZlcmlmaWNhdGlvblRva2VuIiwiZ2VuZXJhdGVWZXJpZmljYXRpb25Ub2tlbiIsImlkIiwic2FmZVVzZXIiLCJzYW5pdGl6ZVVzZXIiLCJzdWNjZXNzIiwibWVzc2FnZSIsImVycm9yIiwibG9naW4iLCJjcmVkZW50aWFscyIsInJlbWVtYmVyTWUiLCJ1c2VyQWdlbnQiLCJpcEFkZHJlc3MiLCJsb2dpbkF0dGVtcHRLZXkiLCJpc1JhdGVMaW1pdGVkIiwiaW5jbHVkZSIsInNlc3Npb25zIiwib3JkZXJCeSIsInJlY29yZEZhaWxlZEF0dGVtcHQiLCJpc0FjY291bnRMb2NrZWQiLCJpc1Bhc3N3b3JkVmFsaWQiLCJ2ZXJpZnlQYXNzd29yZCIsImluY3JlbWVudEZhaWxlZExvZ2luQXR0ZW1wdHMiLCJSRVFVSVJFX0VNQUlMX1ZFUklGSUNBVElPTiIsImlzUGFzc3dvcmRFeHBpcmVkIiwicmVxdWlyZVBhc3N3b3JkUmVzZXQiLCJjbGVhckZhaWxlZExvZ2luQXR0ZW1wdHMiLCJjbGVhclJhdGVMaW1pdCIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwiZ2VuZXJhdGVUb2tlbnMiLCJzZXNzaW9uIiwiY3JlYXRlU2Vzc2lvbiIsInVwZGF0ZSIsImxhc3RMb2dpbkF0IiwibGFzdExvZ2luSXAiLCJsb2dpbkNvdW50IiwiaW5jcmVtZW50IiwiY2FjaGVVc2VyU2Vzc2lvbiIsInVzZXJJZCIsInNlc3Npb25JZCIsInBlcm1pc3Npb25zIiwiZ2V0VXNlclBlcm1pc3Npb25zIiwibG9naW5UaW1lIiwibm93IiwidHJhY2tBY3RpdmVTZXNzaW9uIiwidXBkYXRlQWN0aXZlVXNlcnNDb3VudCIsImV4cGlyZXNJbiIsImdldFRva2VuRXhwaXJ5IiwicmVjb3JkU3VzcGljaW91c0FjdGl2aXR5IiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwiZGVjb2RlZCIsInZlcmlmeSIsInVzZXJTZXNzaW9uIiwiZmluZEZpcnN0IiwiZXhwaXJlc0F0IiwiZ3QiLCJpbnZhbGlkYXRlU2Vzc2lvbiIsIm5ld0FjY2Vzc1Rva2VuIiwiZ2VuZXJhdGVBY2Nlc3NUb2tlbiIsImxhc3RBY3Rpdml0eUF0IiwicmVmcmVzaFRpbWUiLCJsb2dvdXQiLCJsb2dvdXRBbGwiLCJ1cGRhdGVNYW55IiwibG9nZ2VkT3V0QXQiLCJmaW5kTWFueSIsInNlbGVjdCIsImRlbCIsImtleSIsInJlbW92ZUFjdGl2ZVNlc3Npb24iLCJpbml0aWF0ZVBhc3N3b3JkUmVzZXQiLCJyZXNldFRva2VuIiwicmVzZXRUb2tlbkhhc2giLCJjcmVhdGVIYXNoIiwiZGlnZXN0IiwicGFzc3dvcmRSZXNldFRva2VuIiwidG9rZW5IYXNoIiwic2V0IiwiY29tcGxldGVQYXNzd29yZFJlc2V0IiwibmV3UGFzc3dvcmQiLCJjYWNoZWRUb2tlbkRhdGEiLCJnZXQiLCJ0b2tlblJlY29yZCIsInVzZWQiLCJmYWlsZWRMb2dpbkF0dGVtcHRzIiwidmVyaWZ5VG9rZW4iLCJ0b2tlbiIsImNsZWFuVG9rZW4iLCJyZXBsYWNlIiwiaXNCbGFja2xpc3RlZCIsInNlc3Npb25EYXRhIiwiZ2V0Q2FjaGVkVXNlclNlc3Npb24iLCJ1cGRhdGVTZXNzaW9uQWN0aXZpdHkiLCJ2YWxpZCIsInJlcXVpcmVBdXRoIiwib3B0aW9ucyIsInJvbGVzIiwib3B0aW9uYWwiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXh0cmFjdFRva2VuRnJvbVJlcXVlc3QiLCJzdGF0dXMiLCJqc29uIiwiY29kZSIsInZlcmlmaWNhdGlvbiIsImxlbmd0aCIsImluY2x1ZGVzIiwicmVxdWlyZWQiLCJjdXJyZW50IiwidXNlclBlcm1pc3Npb25zIiwiaGFzUGVybWlzc2lvbiIsInNvbWUiLCJwZXJtIiwiY2hlY2tVc2VyUmF0ZUxpbWl0IiwicmVxdWlyZUFkbWluIiwib3B0aW9uYWxBdXRoIiwic2V0dXBUd29GYWN0b3IiLCJzZWNyZXQiLCJjb25maXJtZWQiLCJxckNvZGUiLCJnZW5lcmF0ZVFSQ29kZVVybCIsInZlcmlmeVR3b0ZhY3RvciIsImNvbmZpcm0iLCJzZXR1cERhdGEiLCJpc1ZhbGlkIiwidmVyaWZ5VE9UUCIsInR3b0ZhY3RvclNlY3JldCIsImVuZm9yY2VTZXNzaW9uTGltaXQiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInNlc3Npb25zVG9EZWFjdGl2YXRlIiwic2xpY2UiLCJzYWx0Um91bmRzIiwiQkNSWVBUX1JPVU5EUyIsImhhc2giLCJwbGFpblBhc3N3b3JkIiwiY29tcGFyZSIsInBvbGljeSIsImVycm9ycyIsInB1c2giLCJ0ZXN0IiwiaXNDb21tb25QYXNzd29yZCIsImpvaW4iLCJjb21tb25QYXNzd29yZHMiLCJwYXNzd29yZEFnZSIsInBheWxvYWQiLCJ0eXBlIiwic2lnbiIsImlzc3VlciIsIkpXVF9JU1NVRVIiLCJhdWRpZW5jZSIsIkpXVF9BVURJRU5DRSIsImdlbmVyYXRlUmVmcmVzaFRva2VuIiwicmVmcmVzaFBheWxvYWQiLCJlbWFpbFZlcmlmaWNhdGlvblRva2VuIiwiZXhwaXJ5IiwiZW5kc1dpdGgiLCJtYXhBdHRlbXB0cyIsIndpbmRvd01zIiwid2luZG93U3RhcnQiLCJNYXRoIiwiZmxvb3IiLCJyYXRlTGltaXRLZXkiLCJoYXMiLCJjb3VudCIsInJhdGVMaW1pdERhdGEiLCJzZXRUaW1lb3V0IiwiZGVsZXRlIiwia2V5c1RvRGVsZXRlIiwibWFwS2V5Iiwic3RhcnRzV2l0aCIsImZvckVhY2giLCJrIiwibWF4UmVxdWVzdHMiLCJsb2NrZWRBdCIsIm5ld0F0dGVtcHRzIiwidXBkYXRlRGF0YSIsImlzVmFsaWRFbWFpbCIsImVtYWlsUmVnZXgiLCJhdXRoSGVhZGVyIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzdWJzdHJpbmciLCJjb29raWVzIiwiYWNjZXNzX3Rva2VuIiwicm9sZVBlcm1pc3Npb25zIiwiYWRtaW4iLCJzdXBlcl9hZG1pbiIsInRpbWVXaW5kb3ciLCJleHBlY3RlZFRva2VuIiwiZ2VuZXJhdGVUT1RQIiwicmVxdWlyZSIsImNyZWF0ZUhtYWMiLCJvZmZzZXQiLCJwYWRTdGFydCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkFQUF9OQU1FIiwiYWNjb3VudCIsIlNldCIsImFkZCIsInNpemUiLCJkZXRhaWxzIiwid2FybiIsImdldE1ldHJpY3MiLCJ0b3RhbFNlc3Npb25zIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwicmVkdWNlIiwidG90YWwiLCJsb2dpblN1Y2Nlc3NSYXRlIiwidG9GaXhlZCIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwiaGVhbHRoQ2hlY2siLCJ0ZXN0VG9rZW4iLCIkcXVlcnlSYXciLCJjYWNoZUhlYWx0aHkiLCJkYXRhYmFzZSIsImNsZWFudXBFeHBpcmVkU2Vzc2lvbnMiLCJyZXN1bHQiLCJkZWxldGVNYW55IiwiT1IiLCJsdCIsImJsYWNrbGlzdFRva2VuIiwiZXhwaXJ5VGltZSIsImJsYWNrbGlzdGVkIiwiYXV0aFNlcnZpY2UiLCJzZXRJbnRlcnZhbCIsIm9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/auth.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache.js":
/*!**************************!*\
  !*** ./src/lib/cache.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cache: () => (/* binding */ cache),\n/* harmony export */   cacheMiddleware: () => (/* binding */ cacheMiddleware),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   invalidateCacheOnUpdate: () => (/* binding */ invalidateCacheOnUpdate)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n\n\nclass CacheService {\n    constructor(){\n        this.redis = new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n            url: process.env.UPSTASH_REDIS_REST_URL,\n            token: process.env.UPSTASH_REDIS_REST_TOKEN\n        });\n        // Memory cache fallback for when Redis is unavailable\n        this.memoryCache = new Map();\n        this.memoryCacheSize = 0;\n        this.maxMemoryCache = 1000; // Maximum items in memory cache\n        // Cache key prefixes for organization\n        this.prefixes = {\n            IPO: \"ipo:\",\n            GMP: \"gmp:\",\n            SUBSCRIPTION: \"sub:\",\n            DEMAND: \"demand:\",\n            ALLOTMENT: \"allot:\",\n            USER: \"user:\",\n            SESSION: \"session:\",\n            API: \"api:\",\n            ANALYTICS: \"analytics:\",\n            REALTIME: \"rt:\",\n            SEARCH: \"search:\",\n            SYSTEM: \"sys:\"\n        };\n        // Default TTL values (in seconds)\n        this.defaultTTL = {\n            IPO_LIST: 300,\n            IPO_DETAIL: 180,\n            GMP_DATA: 60,\n            SUBSCRIPTION: 30,\n            DEMAND: 30,\n            ALLOTMENT: 3600,\n            USER_SESSION: 3600,\n            API_RESPONSE: 60,\n            ANALYTICS: 1800,\n            SEARCH: 600,\n            REALTIME: 15,\n            SYSTEM: 300\n        };\n        // Performance metrics\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Generate cache key with prefix\n    key(prefix, identifier) {\n        return `${this.prefixes[prefix] || \"\"}${identifier}`;\n    }\n    // Enhanced get with fallback to memory cache\n    async get(key) {\n        this.metrics.operations++;\n        try {\n            // Try Redis first\n            const data = await this.redis.get(key);\n            if (data !== null) {\n                this.metrics.hits++;\n                return typeof data === \"string\" ? JSON.parse(data) : data;\n            }\n            // Fallback to memory cache\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                this.metrics.hits++;\n                return memoryData.value;\n            }\n            this.metrics.misses++;\n            return null;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache get error:\", error);\n            // Try memory cache as fallback\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                return memoryData.value;\n            }\n            return null;\n        }\n    }\n    // Enhanced set with memory cache backup\n    async set(key, value, ttl = null) {\n        this.metrics.operations++;\n        try {\n            const serialized = typeof value === \"string\" ? value : JSON.stringify(value);\n            let result;\n            if (ttl) {\n                result = await this.redis.setex(key, ttl, serialized);\n            } else {\n                result = await this.redis.set(key, serialized);\n            }\n            // Also store in memory cache as backup\n            this.setMemoryCache(key, value, ttl);\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache set error:\", error);\n            // Fallback to memory cache only\n            this.setMemoryCache(key, value, ttl);\n            return false;\n        }\n    }\n    // Memory cache management\n    setMemoryCache(key, value, ttl = null) {\n        const expiresAt = ttl ? Date.now() + ttl * 1000 : Date.now() + 5 * 60 * 1000; // Default 5 min\n        // Remove old entry if exists\n        if (this.memoryCache.has(key)) {\n            this.memoryCacheSize--;\n        }\n        // Check if we need to evict items\n        if (this.memoryCacheSize >= this.maxMemoryCache) {\n            this.evictOldestMemoryCache();\n        }\n        this.memoryCache.set(key, {\n            value,\n            expiresAt\n        });\n        this.memoryCacheSize++;\n    }\n    // Evict oldest items from memory cache\n    evictOldestMemoryCache() {\n        const entries = Array.from(this.memoryCache.entries());\n        entries.sort((a, b)=>a[1].expiresAt - b[1].expiresAt);\n        // Remove oldest 10% of items\n        const toRemove = Math.max(1, Math.floor(entries.length * 0.1));\n        for(let i = 0; i < toRemove; i++){\n            this.memoryCache.delete(entries[i][0]);\n            this.memoryCacheSize--;\n        }\n    }\n    // Enhanced delete with memory cache cleanup\n    async del(key) {\n        this.metrics.operations++;\n        try {\n            const result = await this.redis.del(key);\n            // Also remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache delete error:\", error);\n            // Still try to remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return false;\n        }\n    }\n    // Check if key exists\n    async exists(key) {\n        try {\n            const redisExists = await this.redis.exists(key);\n            if (redisExists) return true;\n            // Check memory cache\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        } catch (error) {\n            console.error(\"Cache exists error:\", error);\n            // Check memory cache only\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        }\n    }\n    // IPO-specific cache operations\n    async cacheIPOList(ipos, filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.set(cacheKey, ipos, this.defaultTTL.IPO_LIST);\n    }\n    async getCachedIPOList(filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.get(cacheKey);\n    }\n    async cacheIPODetail(ipoId, data) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.set(cacheKey, data, this.defaultTTL.IPO_DETAIL);\n    }\n    async getCachedIPODetail(ipoId) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Real-time data cache with pub/sub support\n    async cacheRealTimeData(type, identifier, data) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const enrichedData = {\n            ...data,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Cache with short TTL for real-time data\n        await this.set(cacheKey, enrichedData, this.defaultTTL.REALTIME);\n        // Also publish to Redis pub/sub for WebSocket distribution (if available)\n        try {\n            await this.redis.publish(`realtime:${type}:${identifier}`, JSON.stringify(enrichedData));\n        } catch (error) {\n            console.warn(\"Redis publish failed, continuing without pub/sub:\", error.message);\n        }\n        return enrichedData;\n    }\n    async getRealTimeData(type, identifier) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const data = await this.get(cacheKey);\n        // Check if data is fresh (less than TTL)\n        if (data && Date.now() - data.timestamp < this.defaultTTL.REALTIME * 1000) {\n            return data;\n        }\n        return null;\n    }\n    // GMP cache operations\n    async cacheGMPData(ipoId, gmpData) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.set(cacheKey, gmpData, this.defaultTTL.GMP_DATA);\n    }\n    async getCachedGMPData(ipoId) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    async cacheLiveGMP(ipoId, gmpValue) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        const gmpData = {\n            value: gmpValue,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Store with short TTL for real-time updates\n        return this.set(cacheKey, gmpData, 30);\n    }\n    async getCachedLiveGMP(ipoId) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Subscription data cache\n    async cacheSubscriptionData(symbol, data) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.SUBSCRIPTION);\n    }\n    async getCachedSubscriptionData(symbol) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Market demand cache\n    async cacheDemandData(symbol, data) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.DEMAND);\n    }\n    async getCachedDemandData(symbol) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Allotment cache\n    async cacheAllotmentStatus(panNumber, applicationNumber, data) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.set(cacheKey, data, this.defaultTTL.ALLOTMENT);\n    }\n    async getCachedAllotmentStatus(panNumber, applicationNumber) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.get(cacheKey);\n    }\n    // User session cache\n    async cacheUserSession(userId, sessionData) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.set(cacheKey, sessionData, this.defaultTTL.USER_SESSION);\n    }\n    async getCachedUserSession(userId) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.get(cacheKey);\n    }\n    // API response cache\n    async cacheAPIResponse(endpoint, params, data) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.set(cacheKey, data, this.defaultTTL.API_RESPONSE);\n    }\n    async getCachedAPIResponse(endpoint, params) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.get(cacheKey);\n    }\n    // Search results cache\n    async cacheSearchResults(query, results) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.set(cacheKey, results, this.defaultTTL.SEARCH);\n    }\n    async getCachedSearchResults(query) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.get(cacheKey);\n    }\n    // Analytics cache\n    async cacheAnalytics(type, identifier, data) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.set(cacheKey, data, this.defaultTTL.ANALYTICS);\n    }\n    async getCachedAnalytics(type, identifier) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.get(cacheKey);\n    }\n    // Batch operations\n    async mget(keys) {\n        try {\n            return await this.redis.mget(...keys);\n        } catch (error) {\n            console.error(\"Cache mget error:\", error);\n            // Fallback to individual gets from memory cache\n            const results = [];\n            for (const key of keys){\n                const memoryData = this.memoryCache.get(key);\n                if (memoryData && memoryData.expiresAt > Date.now()) {\n                    results.push(memoryData.value);\n                } else {\n                    results.push(null);\n                }\n            }\n            return results;\n        }\n    }\n    async mset(keyValuePairs) {\n        try {\n            const pairs = [];\n            for (const [key, value] of keyValuePairs){\n                pairs.push(key, typeof value === \"string\" ? value : JSON.stringify(value));\n                // Also set in memory cache\n                this.setMemoryCache(key, value);\n            }\n            return await this.redis.mset(...pairs);\n        } catch (error) {\n            console.error(\"Cache mset error:\", error);\n            // Fallback to memory cache only\n            for (const [key, value] of keyValuePairs){\n                this.setMemoryCache(key, value);\n            }\n            return false;\n        }\n    }\n    // Cache invalidation\n    async invalidatePattern(pattern) {\n        try {\n            const keys = await this.redis.keys(pattern);\n            if (keys.length > 0) {\n                // Delete from Redis\n                const redisResult = await this.redis.del(...keys);\n                // Delete from memory cache\n                for (const key of keys){\n                    if (this.memoryCache.has(key)) {\n                        this.memoryCache.delete(key);\n                        this.memoryCacheSize--;\n                    }\n                }\n                return redisResult;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Cache invalidation error:\", error);\n            // Try to clear memory cache patterns (simple string matching)\n            let cleared = 0;\n            for (const [key] of this.memoryCache){\n                if (key.includes(pattern.replace(\"*\", \"\"))) {\n                    this.memoryCache.delete(key);\n                    this.memoryCacheSize--;\n                    cleared++;\n                }\n            }\n            return cleared;\n        }\n    }\n    async invalidateIPOCache(ipoId) {\n        const patterns = [\n            this.key(\"IPO\", `detail:${ipoId}`),\n            this.key(\"IPO\", \"list:*\"),\n            this.key(\"GMP\", `*:${ipoId}`),\n            this.key(\"SUBSCRIPTION\", `*:${ipoId}`),\n            this.key(\"DEMAND\", `*:${ipoId}`),\n            this.key(\"REALTIME\", `*:${ipoId}`)\n        ];\n        const results = await Promise.allSettled(patterns.map((pattern)=>this.invalidatePattern(pattern)));\n        return results.every((result)=>result.status === \"fulfilled\");\n    }\n    // Performance monitoring\n    async getCacheStats() {\n        try {\n            const redisInfo = await this.redis.info();\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: true,\n                redis: {\n                    memory: redisInfo.match(/used_memory_human:(.+)/)?.[1]?.trim(),\n                    keys: redisInfo.match(/db0:keys=(\\d+)/)?.[1],\n                    hits: redisInfo.match(/keyspace_hits:(\\d+)/)?.[1],\n                    misses: redisInfo.match(/keyspace_misses:(\\d+)/)?.[1]\n                },\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: false,\n                error: error.message,\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Cache warming for frequently accessed data\n    async warmCache() {\n        try {\n            console.log(\"\\uD83D\\uDD25 Starting cache warm-up...\");\n            // Cache active IPOs\n            const activeIPOs = await _db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: {\n                    status: {\n                        in: [\n                            \"open\",\n                            \"upcoming\"\n                        ]\n                    },\n                    isActive: true\n                },\n                include: {\n                    gmp: {\n                        take: 10,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscription: {\n                        take: 5,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    analytics: true\n                }\n            });\n            const cachePromises = activeIPOs.map((ipo)=>this.cacheIPODetail(ipo.id, ipo));\n            await Promise.all(cachePromises);\n            // Cache IPO list with common filters\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"open\"), {\n                status: \"open\"\n            });\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"upcoming\"), {\n                status: \"upcoming\"\n            });\n            console.log(`🔥 Cache warmed with ${activeIPOs.length} active IPOs`);\n            return true;\n        } catch (error) {\n            console.error(\"Cache warm-up failed:\", error);\n            return false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const testKey = \"health_check\";\n            const testValue = Date.now().toString();\n            await this.set(testKey, testValue, 10);\n            const retrieved = await this.get(testKey);\n            await this.del(testKey);\n            const isHealthy = retrieved === testValue;\n            return {\n                status: isHealthy ? \"healthy\" : \"degraded\",\n                redis: isHealthy,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Cache health check failed:\", error);\n            return {\n                status: \"unhealthy\",\n                redis: false,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                error: error.message,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Clean expired entries from memory cache\n    cleanExpiredMemoryCache() {\n        const now = Date.now();\n        const toDelete = [];\n        for (const [key, data] of this.memoryCache){\n            if (data.expiresAt <= now) {\n                toDelete.push(key);\n            }\n        }\n        for (const key of toDelete){\n            this.memoryCache.delete(key);\n            this.memoryCacheSize--;\n        }\n        return toDelete.length;\n    }\n    // Reset metrics\n    resetMetrics() {\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Get cache size info\n    getCacheSize() {\n        return {\n            memoryCache: this.memoryCacheSize,\n            maxMemoryCache: this.maxMemoryCache,\n            utilizationPercent: (this.memoryCacheSize / this.maxMemoryCache * 100).toFixed(2)\n        };\n    }\n}\n// Export singleton instance\nconst cache = new CacheService();\n// Utility middleware for cache management\nconst cacheMiddleware = (ttl = 300)=>{\n    return async (req, res, next)=>{\n        const cacheKey = cache.key(\"API\", `${req.path}:${JSON.stringify(req.query)}`);\n        try {\n            const cached = await cache.get(cacheKey);\n            if (cached) {\n                return res.json({\n                    ...cached,\n                    cached: true,\n                    cacheTimestamp: new Date().toISOString()\n                });\n            }\n            // Store original res.json\n            const originalJson = res.json;\n            // Override res.json to cache the response\n            res.json = function(data) {\n                cache.set(cacheKey, data, ttl);\n                return originalJson.call(this, data);\n            };\n            next();\n        } catch (error) {\n            console.error(\"Cache middleware error:\", error);\n            next();\n        }\n    };\n};\n// Middleware to invalidate cache on updates\nconst invalidateCacheOnUpdate = (patterns)=>{\n    return async (req, res, next)=>{\n        // Store original response methods\n        const originalJson = res.json;\n        const originalSend = res.send;\n        const cleanup = async (data)=>{\n            if (res.statusCode >= 200 && res.statusCode < 300) {\n                // Success response, invalidate cache\n                await Promise.all(patterns.map((pattern)=>cache.invalidatePattern(pattern)));\n            }\n            return data;\n        };\n        res.json = function(data) {\n            cleanup(data);\n            return originalJson.call(this, data);\n        };\n        res.send = function(data) {\n            cleanup(data);\n            return originalSend.call(this, data);\n        };\n        next();\n    };\n};\n// Auto-cleanup expired memory cache entries every 5 minutes\nsetInterval(()=>{\n    const cleaned = cache.cleanExpiredMemoryCache();\n    if (cleaned > 0) {\n        console.log(`🧹 Cleaned up ${cleaned} expired memory cache entries`);\n    }\n}, 5 * 60 * 1000);\n// Periodic cache warming (every hour)\nsetInterval(async ()=>{\n    try {\n        await cache.warmCache();\n    } catch (error) {\n        console.error(\"Scheduled cache warming failed:\", error);\n    }\n}, 60 * 60 * 1000);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/db.js":
/*!***********************!*\
  !*** ./src/lib/db.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchOperation: () => (/* binding */ batchOperation),\n/* harmony export */   checkDBHealth: () => (/* binding */ checkDBHealth),\n/* harmony export */   checkDatabaseSeeded: () => (/* binding */ checkDatabaseSeeded),\n/* harmony export */   cleanupExpiredCache: () => (/* binding */ cleanupExpiredCache),\n/* harmony export */   cleanupOldSyncLogs: () => (/* binding */ cleanupOldSyncLogs),\n/* harmony export */   createBackupSnapshot: () => (/* binding */ createBackupSnapshot),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConnectionInfo: () => (/* binding */ getConnectionInfo),\n/* harmony export */   getDatabaseMetrics: () => (/* binding */ getDatabaseMetrics),\n/* harmony export */   getDatabaseSize: () => (/* binding */ getDatabaseSize),\n/* harmony export */   getSlowQueries: () => (/* binding */ getSlowQueries),\n/* harmony export */   optimizeDatabase: () => (/* binding */ optimizeDatabase),\n/* harmony export */   performMaintenance: () => (/* binding */ performMaintenance),\n/* harmony export */   prisma: () => (/* binding */ prisma),\n/* harmony export */   resetTables: () => (/* binding */ resetTables),\n/* harmony export */   withTransaction: () => (/* binding */ withTransaction)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ],\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    },\n    // Connection pool configuration for better performance\n    __internal: {\n        engine: {\n            connectTimeout: 60000,\n            queryTimeout: 60000\n        }\n    }\n});\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n// Database health check\nasync function checkDBHealth() {\n    try {\n        await prisma.$queryRaw`SELECT 1 as health`;\n        return {\n            status: \"healthy\",\n            timestamp: new Date().toISOString(),\n            connection: \"active\",\n            version: await getDatabaseVersion()\n        };\n    } catch (error) {\n        return {\n            status: \"unhealthy\",\n            error: error.message,\n            timestamp: new Date().toISOString(),\n            connection: \"failed\"\n        };\n    }\n}\n// Get database version\nasync function getDatabaseVersion() {\n    try {\n        const result = await prisma.$queryRaw`SELECT VERSION() as version`;\n        return result[0]?.version || \"unknown\";\n    } catch (error) {\n        return \"unknown\";\n    }\n}\n// Database cleanup utility for expired cache entries\nasync function cleanupExpiredCache() {\n    try {\n        const result = await prisma.cacheEntry.deleteMany({\n            where: {\n                expiresAt: {\n                    lt: new Date()\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} expired cache entries`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Cache cleanup failed:\", error);\n        return 0;\n    }\n}\n// Cleanup old sync logs (keep only last 30 days)\nasync function cleanupOldSyncLogs() {\n    try {\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const result = await prisma.syncLog.deleteMany({\n            where: {\n                createdAt: {\n                    lt: thirtyDaysAgo\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} old sync logs`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Sync logs cleanup failed:\", error);\n        return 0;\n    }\n}\n// Transaction helper for complex operations\nasync function withTransaction(callback) {\n    return await prisma.$transaction(callback, {\n        maxWait: 5000,\n        timeout: 10000,\n        isolationLevel: \"ReadCommitted\"\n    });\n}\n// Batch operations helper\nasync function batchOperation(operation, data, batchSize = 100) {\n    const results = [];\n    const errors = [];\n    for(let i = 0; i < data.length; i += batchSize){\n        const batch = data.slice(i, i + batchSize);\n        try {\n            const batchResult = await operation(batch);\n            results.push(batchResult);\n        } catch (error) {\n            errors.push({\n                batchIndex: Math.floor(i / batchSize),\n                error: error.message,\n                data: batch\n            });\n        }\n    }\n    return {\n        results,\n        errors\n    };\n}\n// Connection pool management\nasync function getConnectionInfo() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        count(*) as total_connections,\r\n        count(*) FILTER (WHERE state = 'active') as active_connections,\r\n        count(*) FILTER (WHERE state = 'idle') as idle_connections\r\n      FROM pg_stat_activity \r\n      WHERE datname = current_database()\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get connection info:\", error);\n        return null;\n    }\n}\n// Database performance metrics\nasync function getDatabaseMetrics() {\n    try {\n        const [connectionInfo, tableStats, indexStats] = await Promise.all([\n            getConnectionInfo(),\n            getTableStats(),\n            getIndexStats()\n        ]);\n        return {\n            connections: connectionInfo,\n            tables: tableStats,\n            indexes: indexStats,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Failed to get database metrics:\", error);\n        return {\n            error: error.message\n        };\n    }\n}\n// Get table statistics\nasync function getTableStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        n_tup_ins as inserts,\r\n        n_tup_upd as updates,\r\n        n_tup_del as deletes,\r\n        n_live_tup as live_tuples,\r\n        n_dead_tup as dead_tuples\r\n      FROM pg_stat_user_tables\r\n      ORDER BY n_live_tup DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Get index statistics\nasync function getIndexStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        indexname,\r\n        idx_tup_read as tuples_read,\r\n        idx_tup_fetch as tuples_fetched\r\n      FROM pg_stat_user_indexes\r\n      WHERE idx_tup_read > 0\r\n      ORDER BY idx_tup_read DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Backup and maintenance functions\nasync function createBackupSnapshot() {\n    try {\n        const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n        console.log(`📦 Creating backup snapshot at ${timestamp}`);\n        // This would integrate with your backup solution\n        // For now, we'll just log the operation\n        console.log(\"✅ Backup snapshot created successfully\");\n        return {\n            success: true,\n            timestamp,\n            message: \"Backup snapshot created\"\n        };\n    } catch (error) {\n        console.error(\"Backup snapshot failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Database optimization\nasync function optimizeDatabase() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting database optimization...\");\n        // Analyze tables for better query planning\n        await prisma.$executeRaw`ANALYZE`;\n        // Vacuum to reclaim space (for PostgreSQL)\n        await prisma.$executeRaw`VACUUM (ANALYZE, VERBOSE)`;\n        console.log(\"✅ Database optimization completed\");\n        return {\n            success: true,\n            message: \"Database optimization completed\",\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Database optimization failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Seed check - verify if database has initial data\nasync function checkDatabaseSeeded() {\n    try {\n        const ipoCount = await prisma.iPO.count();\n        const userCount = await prisma.user.count();\n        return {\n            isSeeded: ipoCount > 0 && userCount > 0,\n            counts: {\n                ipos: ipoCount,\n                users: userCount\n            }\n        };\n    } catch (error) {\n        return {\n            isSeeded: false,\n            error: error.message\n        };\n    }\n}\n// Utility function to reset specific tables (for development)\nasync function resetTables(tableNames = []) {\n    if (false) {}\n    try {\n        console.log(`🗑️  Resetting tables: ${tableNames.join(\", \")}`);\n        for (const tableName of tableNames){\n            switch(tableName.toLowerCase()){\n                case \"gmp\":\n                    await prisma.gMP.deleteMany();\n                    break;\n                case \"subscription\":\n                    await prisma.subscriptionData.deleteMany();\n                    break;\n                case \"demand\":\n                    await prisma.marketDemand.deleteMany();\n                    break;\n                case \"allotments\":\n                    await prisma.allotment.deleteMany();\n                    break;\n                case \"analytics\":\n                    await prisma.iPOAnalytics.deleteMany();\n                    break;\n                case \"synclogs\":\n                    await prisma.syncLog.deleteMany();\n                    break;\n                case \"cache\":\n                    await prisma.cacheEntry.deleteMany();\n                    break;\n                default:\n                    console.warn(`Unknown table: ${tableName}`);\n            }\n        }\n        console.log(\"✅ Tables reset successfully\");\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Table reset failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Get database size and usage information\nasync function getDatabaseSize() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        pg_size_pretty(pg_database_size(current_database())) as database_size,\r\n        pg_size_pretty(pg_total_relation_size('ipos')) as ipos_table_size,\r\n        pg_size_pretty(pg_total_relation_size('gmp')) as gmp_table_size,\r\n        pg_size_pretty(pg_total_relation_size('subscription_data')) as subscription_table_size\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get database size:\", error);\n        return null;\n    }\n}\n// Monitor slow queries (if available)\nasync function getSlowQueries(limit = 10) {\n    try {\n        // This requires pg_stat_statements extension\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        query,\r\n        calls,\r\n        total_time,\r\n        mean_time,\r\n        rows\r\n      FROM pg_stat_statements\r\n      ORDER BY mean_time DESC\r\n      LIMIT ${limit}\r\n    `;\n        return result;\n    } catch (error) {\n        // Extension might not be available\n        return [];\n    }\n}\n// Periodic maintenance function\nasync function performMaintenance() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting periodic maintenance...\");\n        const results = await Promise.allSettled([\n            cleanupExpiredCache(),\n            cleanupOldSyncLogs(),\n            optimizeDatabase()\n        ]);\n        const summary = {\n            timestamp: new Date().toISOString(),\n            operations: [\n                {\n                    name: \"cleanupExpiredCache\",\n                    status: results[0].status,\n                    result: results[0].value || results[0].reason\n                },\n                {\n                    name: \"cleanupOldSyncLogs\",\n                    status: results[1].status,\n                    result: results[1].value || results[1].reason\n                },\n                {\n                    name: \"optimizeDatabase\",\n                    status: results[2].status,\n                    result: results[2].value || results[2].reason\n                }\n            ]\n        };\n        console.log(\"✅ Periodic maintenance completed:\", summary);\n        return summary;\n    } catch (error) {\n        console.error(\"Periodic maintenance failed:\", error);\n        return {\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n// Schedule periodic maintenance (runs every 6 hours)\nif ( true && process.env.ENABLE_MAINTENANCE !== \"false\") {\n    setInterval(async ()=>{\n        try {\n            await performMaintenance();\n        } catch (error) {\n            console.error(\"Scheduled maintenance failed:\", error);\n        }\n    }, 6 * 60 * 60 * 1000); // 6 hours\n}\n// Graceful shutdown handler\nasync function gracefulShutdown() {\n    console.log(\"\\uD83D\\uDD0C Closing database connections...\");\n    try {\n        await prisma.$disconnect();\n        console.log(\"✅ Database connections closed successfully\");\n    } catch (error) {\n        console.error(\"❌ Error closing database connections:\", error);\n    }\n}\n// Handle process shutdown\nprocess.on(\"SIGINT\", gracefulShutdown);\nprocess.on(\"SIGTERM\", gracefulShutdown);\nprocess.on(\"SIGQUIT\", gracefulShutdown);\n// Handle uncaught exceptions\nprocess.on(\"uncaughtException\", async (error)=>{\n    console.error(\"Uncaught Exception:\", error);\n    await gracefulShutdown();\n    process.exit(1);\n});\nprocess.on(\"unhandledRejection\", async (reason, promise)=>{\n    console.error(\"Unhandled Rejection at:\", promise, \"reason:\", reason);\n    await gracefulShutdown();\n    process.exit(1);\n});\n// Default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/db.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/ms","vendor-chunks/uncrypto","vendor-chunks/semver","vendor-chunks/jsonwebtoken","vendor-chunks/jws","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/bcryptjs","vendor-chunks/safe-buffer","vendor-chunks/lodash.once","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isplainobject","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isinteger","vendor-chunks/lodash.isboolean","vendor-chunks/lodash.includes","vendor-chunks/jwa","vendor-chunks/buffer-equal-constant-time"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();