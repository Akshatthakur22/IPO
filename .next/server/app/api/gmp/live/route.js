/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/gmp/live/route";
exports.ids = ["app/api/gmp/live/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "?c6f9":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?ae40":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4410":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?c757":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgmp%2Flive%2Froute&page=%2Fapi%2Fgmp%2Flive%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgmp%2Flive%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgmp%2Flive%2Froute&page=%2Fapi%2Fgmp%2Flive%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgmp%2Flive%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_gmp_live_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/gmp/live/route.js */ \"(rsc)/./src/app/api/gmp/live/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/gmp/live/route\",\n        pathname: \"/api/gmp/live\",\n        filename: \"route\",\n        bundlePath: \"app/api/gmp/live/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\IPOs\\\\ipo-tracker\\\\src\\\\app\\\\api\\\\gmp\\\\live\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_gmp_live_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/gmp/live/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnbXAlMkZsaXZlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnbXAlMkZsaXZlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ21wJTJGbGl2ZSUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNocCU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0lQT3MlNUNpcG8tdHJhY2tlciU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDaHAlNUNPbmVEcml2ZSU1Q0Rlc2t0b3AlNUNJUE9zJTVDaXBvLXRyYWNrZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXBvLXRyYWNrZXIvP2VhMWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcaHBcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxJUE9zXFxcXGlwby10cmFja2VyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGdtcFxcXFxsaXZlXFxcXHJvdXRlLmpzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nbXAvbGl2ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dtcC9saXZlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nbXAvbGl2ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGhwXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcSVBPc1xcXFxpcG8tdHJhY2tlclxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxnbXBcXFxcbGl2ZVxcXFxyb3V0ZS5qc1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZ21wL2xpdmUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgmp%2Flive%2Froute&page=%2Fapi%2Fgmp%2Flive%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgmp%2Flive%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/gmp/live/route.js":
/*!***************************************!*\
  !*** ./src/app/api/gmp/live/route.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/db */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _lib_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/cache */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _lib_websocket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/websocket */ \"(rsc)/./src/lib/websocket.js\");\n// Live GMP API Routes\n// GET /api/gmp/live - Real-time GMP data with WebSocket integration\n\n\n\n\n// GET /api/gmp/live?symbols=SYM1,SYM2&ipoIds=id1,id2\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const symbolsParam = searchParams.get(\"symbols\");\n        const ipoIdsParam = searchParams.get(\"ipoIds\");\n        const includeHistory = searchParams.get(\"includeHistory\") === \"true\";\n        const historyDays = Math.min(parseInt(searchParams.get(\"historyDays\")) || 7, 30);\n        if (!symbolsParam && !ipoIdsParam) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Either symbols or ipoIds parameter is required\"\n            }, {\n                status: 400\n            });\n        }\n        let whereClause = {};\n        if (symbolsParam) {\n            const symbols = symbolsParam.split(\",\").map((s)=>s.trim().toUpperCase());\n            whereClause = {\n                symbol: {\n                    in: symbols\n                },\n                isActive: true\n            };\n        } else if (ipoIdsParam) {\n            const ipoIds = ipoIdsParam.split(\",\").map((id)=>id.trim());\n            whereClause = {\n                id: {\n                    in: ipoIds\n                },\n                isActive: true\n            };\n        }\n        // Fetch IPOs with latest GMP data\n        const ipos = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n            where: whereClause,\n            select: {\n                id: true,\n                symbol: true,\n                name: true,\n                status: true,\n                minPrice: true,\n                maxPrice: true,\n                openDate: true,\n                closeDate: true,\n                gmp: {\n                    orderBy: {\n                        timestamp: \"desc\"\n                    },\n                    take: includeHistory ? historyDays * 24 : 1,\n                    select: {\n                        id: true,\n                        value: true,\n                        percentage: true,\n                        source: true,\n                        volume: true,\n                        timestamp: true\n                    }\n                }\n            }\n        });\n        if (ipos.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                gmpData: [],\n                message: \"No IPOs found\",\n                timestamp: new Date().toISOString()\n            });\n        }\n        // Enhance with live cache data and calculations\n        const enhancedData = await Promise.all(ipos.map(async (ipo)=>{\n            // Get cached live GMP if available\n            const liveGMP = await _lib_cache__WEBPACK_IMPORTED_MODULE_2__.cache.getCachedLiveGMP(ipo.id);\n            const latestGMP = ipo.gmp[0] || null;\n            // Use live data if fresher than database data\n            const currentGMP = liveGMP && liveGMP.timestamp > (latestGMP?.timestamp || 0) ? liveGMP : latestGMP;\n            // Calculate GMP statistics if history is requested\n            let gmpStats = null;\n            if (includeHistory && ipo.gmp.length > 1) {\n                const values = ipo.gmp.map((g)=>Number(g.value));\n                const percentages = ipo.gmp.map((g)=>Number(g.percentage));\n                gmpStats = {\n                    count: values.length,\n                    average: values.reduce((a, b)=>a + b, 0) / values.length,\n                    max: Math.max(...values),\n                    min: Math.min(...values),\n                    latest: values[0],\n                    change24h: values.length > 1 ? values[0] - values[values.length - 1] : 0,\n                    volatility: calculateVolatility(values),\n                    trend: calculateTrend(values),\n                    averagePercentage: percentages.reduce((a, b)=>a + b, 0) / percentages.length\n                };\n            }\n            // Calculate potential returns\n            const potentialReturns = calculatePotentialReturns(ipo, currentGMP);\n            return {\n                ipoId: ipo.id,\n                symbol: ipo.symbol,\n                name: ipo.name,\n                status: ipo.status,\n                priceRange: {\n                    min: ipo.minPrice ? Number(ipo.minPrice) : null,\n                    max: ipo.maxPrice ? Number(ipo.maxPrice) : null\n                },\n                dates: {\n                    open: ipo.openDate,\n                    close: ipo.closeDate\n                },\n                currentGMP: currentGMP ? {\n                    value: Number(currentGMP.value),\n                    percentage: Number(currentGMP.percentage),\n                    source: currentGMP.source || \"market\",\n                    volume: currentGMP.volume || null,\n                    timestamp: currentGMP.timestamp,\n                    isLive: !!liveGMP\n                } : null,\n                gmpHistory: includeHistory ? ipo.gmp.map((gmp)=>({\n                        value: Number(gmp.value),\n                        percentage: Number(gmp.percentage),\n                        source: gmp.source,\n                        volume: gmp.volume,\n                        timestamp: gmp.timestamp\n                    })) : null,\n                statistics: gmpStats,\n                potentialReturns,\n                lastUpdated: currentGMP?.timestamp || new Date().toISOString()\n            };\n        }));\n        const response = {\n            gmpData: enhancedData,\n            metadata: {\n                totalIPOs: enhancedData.length,\n                liveDataCount: enhancedData.filter((d)=>d.currentGMP?.isLive).length,\n                includeHistory,\n                historyDays: includeHistory ? historyDays : 0\n            },\n            timestamp: new Date().toISOString()\n        };\n        // Cache the response briefly for performance\n        const cacheKey = `live_gmp_${symbolsParam || ipoIdsParam}_${includeHistory}_${historyDays}`;\n        await _lib_cache__WEBPACK_IMPORTED_MODULE_2__.cache.set(cacheKey, response, 30); // 30 seconds cache\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"Failed to fetch live GMP data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch live GMP data\",\n            message: error.message,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/gmp/live - Update GMP data (for authorized sources)\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { updates } = body;\n        if (!Array.isArray(updates)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Updates must be an array\"\n            }, {\n                status: 400\n            });\n        }\n        const results = [];\n        const validUpdates = [];\n        // Validate and process updates\n        for (const update of updates){\n            try {\n                const { ipoId, symbol, value, percentage, source, volume } = update;\n                if (!ipoId && !symbol) {\n                    results.push({\n                        status: \"error\",\n                        error: \"Either ipoId or symbol is required\",\n                        data: update\n                    });\n                    continue;\n                }\n                if (typeof value !== \"number\") {\n                    results.push({\n                        status: \"error\",\n                        error: \"Value must be a number\",\n                        data: update\n                    });\n                    continue;\n                }\n                // Find IPO\n                let ipo;\n                if (ipoId) {\n                    ipo = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findUnique({\n                        where: {\n                            id: ipoId\n                        }\n                    });\n                } else {\n                    ipo = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findUnique({\n                        where: {\n                            symbol: symbol.toUpperCase()\n                        }\n                    });\n                }\n                if (!ipo) {\n                    results.push({\n                        status: \"error\",\n                        error: \"IPO not found\",\n                        data: update\n                    });\n                    continue;\n                }\n                // Calculate percentage if not provided\n                const calculatedPercentage = percentage || (ipo.minPrice ? value / Number(ipo.minPrice) * 100 - 100 : 0);\n                const gmpData = {\n                    ipoId: ipo.id,\n                    value: value,\n                    percentage: calculatedPercentage,\n                    source: source || \"api\",\n                    volume: volume || null,\n                    timestamp: new Date(),\n                    date: new Date()\n                };\n                validUpdates.push(gmpData);\n                results.push({\n                    ipoId: ipo.id,\n                    symbol: ipo.symbol,\n                    status: \"queued\",\n                    data: gmpData\n                });\n            } catch (error) {\n                results.push({\n                    status: \"error\",\n                    error: error.message,\n                    data: update\n                });\n            }\n        }\n        // Batch insert valid updates\n        if (validUpdates.length > 0) {\n            try {\n                await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.gMP.createMany({\n                    data: validUpdates\n                });\n                // Update cache and broadcast real-time updates\n                for (const gmpData of validUpdates){\n                    // Cache live GMP data\n                    await _lib_cache__WEBPACK_IMPORTED_MODULE_2__.cache.cacheLiveGMP(gmpData.ipoId, gmpData.value);\n                    // Find IPO symbol for WebSocket broadcast\n                    const ipo = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findUnique({\n                        where: {\n                            id: gmpData.ipoId\n                        },\n                        select: {\n                            symbol: true\n                        }\n                    });\n                    if (ipo && _lib_websocket__WEBPACK_IMPORTED_MODULE_3__.webSocketService.io) {\n                        // Broadcast to WebSocket subscribers\n                        _lib_websocket__WEBPACK_IMPORTED_MODULE_3__.webSocketService.broadcastGMPUpdate(gmpData.ipoId, {\n                            value: gmpData.value,\n                            percentage: gmpData.percentage,\n                            source: gmpData.source,\n                            volume: gmpData.volume,\n                            timestamp: gmpData.timestamp\n                        });\n                    }\n                }\n                console.log(`✅ Processed ${validUpdates.length} GMP updates`);\n            } catch (dbError) {\n                console.error(\"Database insert failed:\", dbError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Failed to save GMP updates\",\n                    message: dbError.message\n                }, {\n                    status: 500\n                });\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: `Processed ${results.length} updates`,\n            successful: validUpdates.length,\n            failed: results.length - validUpdates.length,\n            results,\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Failed to update GMP data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to update GMP data\",\n            message: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n// Utility functions\nfunction calculateVolatility(values) {\n    if (values.length < 2) return 0;\n    const mean = values.reduce((a, b)=>a + b, 0) / values.length;\n    const variance = values.reduce((acc, val)=>acc + Math.pow(val - mean, 2), 0) / values.length;\n    return Math.sqrt(variance);\n}\nfunction calculateTrend(values) {\n    if (values.length < 2) return \"neutral\";\n    const recent = values.slice(0, Math.min(5, values.length));\n    const older = values.slice(Math.min(5, values.length));\n    if (older.length === 0) return \"neutral\";\n    const recentAvg = recent.reduce((a, b)=>a + b, 0) / recent.length;\n    const olderAvg = older.reduce((a, b)=>a + b, 0) / older.length;\n    const diff = recentAvg - olderAvg;\n    const threshold = olderAvg * 0.05; // 5% threshold\n    if (diff > threshold) return \"bullish\";\n    if (diff < -threshold) return \"bearish\";\n    return \"neutral\";\n}\nfunction calculatePotentialReturns(ipo, gmp) {\n    if (!gmp || !ipo.minPrice || !ipo.maxPrice) return null;\n    const minPrice = Number(ipo.minPrice);\n    const maxPrice = Number(ipo.maxPrice);\n    const gmpValue = Number(gmp.value);\n    const expectedListingPrice = minPrice + gmpValue;\n    return {\n        atMinPrice: {\n            investment: minPrice,\n            expectedReturn: gmpValue,\n            returnPercentage: gmpValue / minPrice * 100\n        },\n        atMaxPrice: {\n            investment: maxPrice,\n            expectedReturn: expectedListingPrice - maxPrice,\n            returnPercentage: (expectedListingPrice - maxPrice) / maxPrice * 100\n        },\n        expectedListingPrice,\n        breakeven: {\n            minGMP: -minPrice,\n            maxGMP: -maxPrice\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/gmp/live/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache.js":
/*!**************************!*\
  !*** ./src/lib/cache.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cache: () => (/* binding */ cache),\n/* harmony export */   cacheMiddleware: () => (/* binding */ cacheMiddleware),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   invalidateCacheOnUpdate: () => (/* binding */ invalidateCacheOnUpdate)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n\n\nclass CacheService {\n    constructor(){\n        this.redis = new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n            url: process.env.UPSTASH_REDIS_REST_URL,\n            token: process.env.UPSTASH_REDIS_REST_TOKEN\n        });\n        // Memory cache fallback for when Redis is unavailable\n        this.memoryCache = new Map();\n        this.memoryCacheSize = 0;\n        this.maxMemoryCache = 1000; // Maximum items in memory cache\n        // Cache key prefixes for organization\n        this.prefixes = {\n            IPO: \"ipo:\",\n            GMP: \"gmp:\",\n            SUBSCRIPTION: \"sub:\",\n            DEMAND: \"demand:\",\n            ALLOTMENT: \"allot:\",\n            USER: \"user:\",\n            SESSION: \"session:\",\n            API: \"api:\",\n            ANALYTICS: \"analytics:\",\n            REALTIME: \"rt:\",\n            SEARCH: \"search:\",\n            SYSTEM: \"sys:\"\n        };\n        // Default TTL values (in seconds)\n        this.defaultTTL = {\n            IPO_LIST: 300,\n            IPO_DETAIL: 180,\n            GMP_DATA: 60,\n            SUBSCRIPTION: 30,\n            DEMAND: 30,\n            ALLOTMENT: 3600,\n            USER_SESSION: 3600,\n            API_RESPONSE: 60,\n            ANALYTICS: 1800,\n            SEARCH: 600,\n            REALTIME: 15,\n            SYSTEM: 300\n        };\n        // Performance metrics\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Generate cache key with prefix\n    key(prefix, identifier) {\n        return `${this.prefixes[prefix] || \"\"}${identifier}`;\n    }\n    // Enhanced get with fallback to memory cache\n    async get(key) {\n        this.metrics.operations++;\n        try {\n            // Try Redis first\n            const data = await this.redis.get(key);\n            if (data !== null) {\n                this.metrics.hits++;\n                return typeof data === \"string\" ? JSON.parse(data) : data;\n            }\n            // Fallback to memory cache\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                this.metrics.hits++;\n                return memoryData.value;\n            }\n            this.metrics.misses++;\n            return null;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache get error:\", error);\n            // Try memory cache as fallback\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                return memoryData.value;\n            }\n            return null;\n        }\n    }\n    // Enhanced set with memory cache backup\n    async set(key, value, ttl = null) {\n        this.metrics.operations++;\n        try {\n            const serialized = typeof value === \"string\" ? value : JSON.stringify(value);\n            let result;\n            if (ttl) {\n                result = await this.redis.setex(key, ttl, serialized);\n            } else {\n                result = await this.redis.set(key, serialized);\n            }\n            // Also store in memory cache as backup\n            this.setMemoryCache(key, value, ttl);\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache set error:\", error);\n            // Fallback to memory cache only\n            this.setMemoryCache(key, value, ttl);\n            return false;\n        }\n    }\n    // Memory cache management\n    setMemoryCache(key, value, ttl = null) {\n        const expiresAt = ttl ? Date.now() + ttl * 1000 : Date.now() + 5 * 60 * 1000; // Default 5 min\n        // Remove old entry if exists\n        if (this.memoryCache.has(key)) {\n            this.memoryCacheSize--;\n        }\n        // Check if we need to evict items\n        if (this.memoryCacheSize >= this.maxMemoryCache) {\n            this.evictOldestMemoryCache();\n        }\n        this.memoryCache.set(key, {\n            value,\n            expiresAt\n        });\n        this.memoryCacheSize++;\n    }\n    // Evict oldest items from memory cache\n    evictOldestMemoryCache() {\n        const entries = Array.from(this.memoryCache.entries());\n        entries.sort((a, b)=>a[1].expiresAt - b[1].expiresAt);\n        // Remove oldest 10% of items\n        const toRemove = Math.max(1, Math.floor(entries.length * 0.1));\n        for(let i = 0; i < toRemove; i++){\n            this.memoryCache.delete(entries[i][0]);\n            this.memoryCacheSize--;\n        }\n    }\n    // Enhanced delete with memory cache cleanup\n    async del(key) {\n        this.metrics.operations++;\n        try {\n            const result = await this.redis.del(key);\n            // Also remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache delete error:\", error);\n            // Still try to remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return false;\n        }\n    }\n    // Check if key exists\n    async exists(key) {\n        try {\n            const redisExists = await this.redis.exists(key);\n            if (redisExists) return true;\n            // Check memory cache\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        } catch (error) {\n            console.error(\"Cache exists error:\", error);\n            // Check memory cache only\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        }\n    }\n    // IPO-specific cache operations\n    async cacheIPOList(ipos, filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.set(cacheKey, ipos, this.defaultTTL.IPO_LIST);\n    }\n    async getCachedIPOList(filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.get(cacheKey);\n    }\n    async cacheIPODetail(ipoId, data) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.set(cacheKey, data, this.defaultTTL.IPO_DETAIL);\n    }\n    async getCachedIPODetail(ipoId) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Real-time data cache with pub/sub support\n    async cacheRealTimeData(type, identifier, data) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const enrichedData = {\n            ...data,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Cache with short TTL for real-time data\n        await this.set(cacheKey, enrichedData, this.defaultTTL.REALTIME);\n        // Also publish to Redis pub/sub for WebSocket distribution (if available)\n        try {\n            await this.redis.publish(`realtime:${type}:${identifier}`, JSON.stringify(enrichedData));\n        } catch (error) {\n            console.warn(\"Redis publish failed, continuing without pub/sub:\", error.message);\n        }\n        return enrichedData;\n    }\n    async getRealTimeData(type, identifier) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const data = await this.get(cacheKey);\n        // Check if data is fresh (less than TTL)\n        if (data && Date.now() - data.timestamp < this.defaultTTL.REALTIME * 1000) {\n            return data;\n        }\n        return null;\n    }\n    // GMP cache operations\n    async cacheGMPData(ipoId, gmpData) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.set(cacheKey, gmpData, this.defaultTTL.GMP_DATA);\n    }\n    async getCachedGMPData(ipoId) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    async cacheLiveGMP(ipoId, gmpValue) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        const gmpData = {\n            value: gmpValue,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Store with short TTL for real-time updates\n        return this.set(cacheKey, gmpData, 30);\n    }\n    async getCachedLiveGMP(ipoId) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Subscription data cache\n    async cacheSubscriptionData(symbol, data) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.SUBSCRIPTION);\n    }\n    async getCachedSubscriptionData(symbol) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Market demand cache\n    async cacheDemandData(symbol, data) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.DEMAND);\n    }\n    async getCachedDemandData(symbol) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Allotment cache\n    async cacheAllotmentStatus(panNumber, applicationNumber, data) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.set(cacheKey, data, this.defaultTTL.ALLOTMENT);\n    }\n    async getCachedAllotmentStatus(panNumber, applicationNumber) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.get(cacheKey);\n    }\n    // User session cache\n    async cacheUserSession(userId, sessionData) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.set(cacheKey, sessionData, this.defaultTTL.USER_SESSION);\n    }\n    async getCachedUserSession(userId) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.get(cacheKey);\n    }\n    // API response cache\n    async cacheAPIResponse(endpoint, params, data) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.set(cacheKey, data, this.defaultTTL.API_RESPONSE);\n    }\n    async getCachedAPIResponse(endpoint, params) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.get(cacheKey);\n    }\n    // Search results cache\n    async cacheSearchResults(query, results) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.set(cacheKey, results, this.defaultTTL.SEARCH);\n    }\n    async getCachedSearchResults(query) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.get(cacheKey);\n    }\n    // Analytics cache\n    async cacheAnalytics(type, identifier, data) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.set(cacheKey, data, this.defaultTTL.ANALYTICS);\n    }\n    async getCachedAnalytics(type, identifier) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.get(cacheKey);\n    }\n    // Batch operations\n    async mget(keys) {\n        try {\n            return await this.redis.mget(...keys);\n        } catch (error) {\n            console.error(\"Cache mget error:\", error);\n            // Fallback to individual gets from memory cache\n            const results = [];\n            for (const key of keys){\n                const memoryData = this.memoryCache.get(key);\n                if (memoryData && memoryData.expiresAt > Date.now()) {\n                    results.push(memoryData.value);\n                } else {\n                    results.push(null);\n                }\n            }\n            return results;\n        }\n    }\n    async mset(keyValuePairs) {\n        try {\n            const pairs = [];\n            for (const [key, value] of keyValuePairs){\n                pairs.push(key, typeof value === \"string\" ? value : JSON.stringify(value));\n                // Also set in memory cache\n                this.setMemoryCache(key, value);\n            }\n            return await this.redis.mset(...pairs);\n        } catch (error) {\n            console.error(\"Cache mset error:\", error);\n            // Fallback to memory cache only\n            for (const [key, value] of keyValuePairs){\n                this.setMemoryCache(key, value);\n            }\n            return false;\n        }\n    }\n    // Cache invalidation\n    async invalidatePattern(pattern) {\n        try {\n            const keys = await this.redis.keys(pattern);\n            if (keys.length > 0) {\n                // Delete from Redis\n                const redisResult = await this.redis.del(...keys);\n                // Delete from memory cache\n                for (const key of keys){\n                    if (this.memoryCache.has(key)) {\n                        this.memoryCache.delete(key);\n                        this.memoryCacheSize--;\n                    }\n                }\n                return redisResult;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Cache invalidation error:\", error);\n            // Try to clear memory cache patterns (simple string matching)\n            let cleared = 0;\n            for (const [key] of this.memoryCache){\n                if (key.includes(pattern.replace(\"*\", \"\"))) {\n                    this.memoryCache.delete(key);\n                    this.memoryCacheSize--;\n                    cleared++;\n                }\n            }\n            return cleared;\n        }\n    }\n    async invalidateIPOCache(ipoId) {\n        const patterns = [\n            this.key(\"IPO\", `detail:${ipoId}`),\n            this.key(\"IPO\", \"list:*\"),\n            this.key(\"GMP\", `*:${ipoId}`),\n            this.key(\"SUBSCRIPTION\", `*:${ipoId}`),\n            this.key(\"DEMAND\", `*:${ipoId}`),\n            this.key(\"REALTIME\", `*:${ipoId}`)\n        ];\n        const results = await Promise.allSettled(patterns.map((pattern)=>this.invalidatePattern(pattern)));\n        return results.every((result)=>result.status === \"fulfilled\");\n    }\n    // Performance monitoring\n    async getCacheStats() {\n        try {\n            const redisInfo = await this.redis.info();\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: true,\n                redis: {\n                    memory: redisInfo.match(/used_memory_human:(.+)/)?.[1]?.trim(),\n                    keys: redisInfo.match(/db0:keys=(\\d+)/)?.[1],\n                    hits: redisInfo.match(/keyspace_hits:(\\d+)/)?.[1],\n                    misses: redisInfo.match(/keyspace_misses:(\\d+)/)?.[1]\n                },\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: false,\n                error: error.message,\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Cache warming for frequently accessed data\n    async warmCache() {\n        try {\n            console.log(\"\\uD83D\\uDD25 Starting cache warm-up...\");\n            // Cache active IPOs\n            const activeIPOs = await _db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: {\n                    status: {\n                        in: [\n                            \"open\",\n                            \"upcoming\"\n                        ]\n                    },\n                    isActive: true\n                },\n                include: {\n                    gmp: {\n                        take: 10,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscription: {\n                        take: 5,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    analytics: true\n                }\n            });\n            const cachePromises = activeIPOs.map((ipo)=>this.cacheIPODetail(ipo.id, ipo));\n            await Promise.all(cachePromises);\n            // Cache IPO list with common filters\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"open\"), {\n                status: \"open\"\n            });\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"upcoming\"), {\n                status: \"upcoming\"\n            });\n            console.log(`🔥 Cache warmed with ${activeIPOs.length} active IPOs`);\n            return true;\n        } catch (error) {\n            console.error(\"Cache warm-up failed:\", error);\n            return false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const testKey = \"health_check\";\n            const testValue = Date.now().toString();\n            await this.set(testKey, testValue, 10);\n            const retrieved = await this.get(testKey);\n            await this.del(testKey);\n            const isHealthy = retrieved === testValue;\n            return {\n                status: isHealthy ? \"healthy\" : \"degraded\",\n                redis: isHealthy,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Cache health check failed:\", error);\n            return {\n                status: \"unhealthy\",\n                redis: false,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                error: error.message,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Clean expired entries from memory cache\n    cleanExpiredMemoryCache() {\n        const now = Date.now();\n        const toDelete = [];\n        for (const [key, data] of this.memoryCache){\n            if (data.expiresAt <= now) {\n                toDelete.push(key);\n            }\n        }\n        for (const key of toDelete){\n            this.memoryCache.delete(key);\n            this.memoryCacheSize--;\n        }\n        return toDelete.length;\n    }\n    // Reset metrics\n    resetMetrics() {\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Get cache size info\n    getCacheSize() {\n        return {\n            memoryCache: this.memoryCacheSize,\n            maxMemoryCache: this.maxMemoryCache,\n            utilizationPercent: (this.memoryCacheSize / this.maxMemoryCache * 100).toFixed(2)\n        };\n    }\n}\n// Export singleton instance\nconst cache = new CacheService();\n// Utility middleware for cache management\nconst cacheMiddleware = (ttl = 300)=>{\n    return async (req, res, next)=>{\n        const cacheKey = cache.key(\"API\", `${req.path}:${JSON.stringify(req.query)}`);\n        try {\n            const cached = await cache.get(cacheKey);\n            if (cached) {\n                return res.json({\n                    ...cached,\n                    cached: true,\n                    cacheTimestamp: new Date().toISOString()\n                });\n            }\n            // Store original res.json\n            const originalJson = res.json;\n            // Override res.json to cache the response\n            res.json = function(data) {\n                cache.set(cacheKey, data, ttl);\n                return originalJson.call(this, data);\n            };\n            next();\n        } catch (error) {\n            console.error(\"Cache middleware error:\", error);\n            next();\n        }\n    };\n};\n// Middleware to invalidate cache on updates\nconst invalidateCacheOnUpdate = (patterns)=>{\n    return async (req, res, next)=>{\n        // Store original response methods\n        const originalJson = res.json;\n        const originalSend = res.send;\n        const cleanup = async (data)=>{\n            if (res.statusCode >= 200 && res.statusCode < 300) {\n                // Success response, invalidate cache\n                await Promise.all(patterns.map((pattern)=>cache.invalidatePattern(pattern)));\n            }\n            return data;\n        };\n        res.json = function(data) {\n            cleanup(data);\n            return originalJson.call(this, data);\n        };\n        res.send = function(data) {\n            cleanup(data);\n            return originalSend.call(this, data);\n        };\n        next();\n    };\n};\n// Auto-cleanup expired memory cache entries every 5 minutes\nsetInterval(()=>{\n    const cleaned = cache.cleanExpiredMemoryCache();\n    if (cleaned > 0) {\n        console.log(`🧹 Cleaned up ${cleaned} expired memory cache entries`);\n    }\n}, 5 * 60 * 1000);\n// Periodic cache warming (every hour)\nsetInterval(async ()=>{\n    try {\n        await cache.warmCache();\n    } catch (error) {\n        console.error(\"Scheduled cache warming failed:\", error);\n    }\n}, 60 * 60 * 1000);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/db.js":
/*!***********************!*\
  !*** ./src/lib/db.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchOperation: () => (/* binding */ batchOperation),\n/* harmony export */   checkDBHealth: () => (/* binding */ checkDBHealth),\n/* harmony export */   checkDatabaseSeeded: () => (/* binding */ checkDatabaseSeeded),\n/* harmony export */   cleanupExpiredCache: () => (/* binding */ cleanupExpiredCache),\n/* harmony export */   cleanupOldSyncLogs: () => (/* binding */ cleanupOldSyncLogs),\n/* harmony export */   createBackupSnapshot: () => (/* binding */ createBackupSnapshot),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConnectionInfo: () => (/* binding */ getConnectionInfo),\n/* harmony export */   getDatabaseMetrics: () => (/* binding */ getDatabaseMetrics),\n/* harmony export */   getDatabaseSize: () => (/* binding */ getDatabaseSize),\n/* harmony export */   getSlowQueries: () => (/* binding */ getSlowQueries),\n/* harmony export */   optimizeDatabase: () => (/* binding */ optimizeDatabase),\n/* harmony export */   performMaintenance: () => (/* binding */ performMaintenance),\n/* harmony export */   prisma: () => (/* binding */ prisma),\n/* harmony export */   resetTables: () => (/* binding */ resetTables),\n/* harmony export */   withTransaction: () => (/* binding */ withTransaction)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ],\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    },\n    // Connection pool configuration for better performance\n    __internal: {\n        engine: {\n            connectTimeout: 60000,\n            queryTimeout: 60000\n        }\n    }\n});\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n// Database health check\nasync function checkDBHealth() {\n    try {\n        await prisma.$queryRaw`SELECT 1 as health`;\n        return {\n            status: \"healthy\",\n            timestamp: new Date().toISOString(),\n            connection: \"active\",\n            version: await getDatabaseVersion()\n        };\n    } catch (error) {\n        return {\n            status: \"unhealthy\",\n            error: error.message,\n            timestamp: new Date().toISOString(),\n            connection: \"failed\"\n        };\n    }\n}\n// Get database version\nasync function getDatabaseVersion() {\n    try {\n        const result = await prisma.$queryRaw`SELECT VERSION() as version`;\n        return result[0]?.version || \"unknown\";\n    } catch (error) {\n        return \"unknown\";\n    }\n}\n// Database cleanup utility for expired cache entries\nasync function cleanupExpiredCache() {\n    try {\n        const result = await prisma.cacheEntry.deleteMany({\n            where: {\n                expiresAt: {\n                    lt: new Date()\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} expired cache entries`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Cache cleanup failed:\", error);\n        return 0;\n    }\n}\n// Cleanup old sync logs (keep only last 30 days)\nasync function cleanupOldSyncLogs() {\n    try {\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const result = await prisma.syncLog.deleteMany({\n            where: {\n                createdAt: {\n                    lt: thirtyDaysAgo\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} old sync logs`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Sync logs cleanup failed:\", error);\n        return 0;\n    }\n}\n// Transaction helper for complex operations\nasync function withTransaction(callback) {\n    return await prisma.$transaction(callback, {\n        maxWait: 5000,\n        timeout: 10000,\n        isolationLevel: \"ReadCommitted\"\n    });\n}\n// Batch operations helper\nasync function batchOperation(operation, data, batchSize = 100) {\n    const results = [];\n    const errors = [];\n    for(let i = 0; i < data.length; i += batchSize){\n        const batch = data.slice(i, i + batchSize);\n        try {\n            const batchResult = await operation(batch);\n            results.push(batchResult);\n        } catch (error) {\n            errors.push({\n                batchIndex: Math.floor(i / batchSize),\n                error: error.message,\n                data: batch\n            });\n        }\n    }\n    return {\n        results,\n        errors\n    };\n}\n// Connection pool management\nasync function getConnectionInfo() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        count(*) as total_connections,\r\n        count(*) FILTER (WHERE state = 'active') as active_connections,\r\n        count(*) FILTER (WHERE state = 'idle') as idle_connections\r\n      FROM pg_stat_activity \r\n      WHERE datname = current_database()\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get connection info:\", error);\n        return null;\n    }\n}\n// Database performance metrics\nasync function getDatabaseMetrics() {\n    try {\n        const [connectionInfo, tableStats, indexStats] = await Promise.all([\n            getConnectionInfo(),\n            getTableStats(),\n            getIndexStats()\n        ]);\n        return {\n            connections: connectionInfo,\n            tables: tableStats,\n            indexes: indexStats,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Failed to get database metrics:\", error);\n        return {\n            error: error.message\n        };\n    }\n}\n// Get table statistics\nasync function getTableStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        n_tup_ins as inserts,\r\n        n_tup_upd as updates,\r\n        n_tup_del as deletes,\r\n        n_live_tup as live_tuples,\r\n        n_dead_tup as dead_tuples\r\n      FROM pg_stat_user_tables\r\n      ORDER BY n_live_tup DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Get index statistics\nasync function getIndexStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        indexname,\r\n        idx_tup_read as tuples_read,\r\n        idx_tup_fetch as tuples_fetched\r\n      FROM pg_stat_user_indexes\r\n      WHERE idx_tup_read > 0\r\n      ORDER BY idx_tup_read DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Backup and maintenance functions\nasync function createBackupSnapshot() {\n    try {\n        const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n        console.log(`📦 Creating backup snapshot at ${timestamp}`);\n        // This would integrate with your backup solution\n        // For now, we'll just log the operation\n        console.log(\"✅ Backup snapshot created successfully\");\n        return {\n            success: true,\n            timestamp,\n            message: \"Backup snapshot created\"\n        };\n    } catch (error) {\n        console.error(\"Backup snapshot failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Database optimization\nasync function optimizeDatabase() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting database optimization...\");\n        // Analyze tables for better query planning\n        await prisma.$executeRaw`ANALYZE`;\n        // Vacuum to reclaim space (for PostgreSQL)\n        await prisma.$executeRaw`VACUUM (ANALYZE, VERBOSE)`;\n        console.log(\"✅ Database optimization completed\");\n        return {\n            success: true,\n            message: \"Database optimization completed\",\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Database optimization failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Seed check - verify if database has initial data\nasync function checkDatabaseSeeded() {\n    try {\n        const ipoCount = await prisma.iPO.count();\n        const userCount = await prisma.user.count();\n        return {\n            isSeeded: ipoCount > 0 && userCount > 0,\n            counts: {\n                ipos: ipoCount,\n                users: userCount\n            }\n        };\n    } catch (error) {\n        return {\n            isSeeded: false,\n            error: error.message\n        };\n    }\n}\n// Utility function to reset specific tables (for development)\nasync function resetTables(tableNames = []) {\n    if (false) {}\n    try {\n        console.log(`🗑️  Resetting tables: ${tableNames.join(\", \")}`);\n        for (const tableName of tableNames){\n            switch(tableName.toLowerCase()){\n                case \"gmp\":\n                    await prisma.gMP.deleteMany();\n                    break;\n                case \"subscription\":\n                    await prisma.subscriptionData.deleteMany();\n                    break;\n                case \"demand\":\n                    await prisma.marketDemand.deleteMany();\n                    break;\n                case \"allotments\":\n                    await prisma.allotment.deleteMany();\n                    break;\n                case \"analytics\":\n                    await prisma.iPOAnalytics.deleteMany();\n                    break;\n                case \"synclogs\":\n                    await prisma.syncLog.deleteMany();\n                    break;\n                case \"cache\":\n                    await prisma.cacheEntry.deleteMany();\n                    break;\n                default:\n                    console.warn(`Unknown table: ${tableName}`);\n            }\n        }\n        console.log(\"✅ Tables reset successfully\");\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Table reset failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Get database size and usage information\nasync function getDatabaseSize() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        pg_size_pretty(pg_database_size(current_database())) as database_size,\r\n        pg_size_pretty(pg_total_relation_size('ipos')) as ipos_table_size,\r\n        pg_size_pretty(pg_total_relation_size('gmp')) as gmp_table_size,\r\n        pg_size_pretty(pg_total_relation_size('subscription_data')) as subscription_table_size\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get database size:\", error);\n        return null;\n    }\n}\n// Monitor slow queries (if available)\nasync function getSlowQueries(limit = 10) {\n    try {\n        // This requires pg_stat_statements extension\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        query,\r\n        calls,\r\n        total_time,\r\n        mean_time,\r\n        rows\r\n      FROM pg_stat_statements\r\n      ORDER BY mean_time DESC\r\n      LIMIT ${limit}\r\n    `;\n        return result;\n    } catch (error) {\n        // Extension might not be available\n        return [];\n    }\n}\n// Periodic maintenance function\nasync function performMaintenance() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting periodic maintenance...\");\n        const results = await Promise.allSettled([\n            cleanupExpiredCache(),\n            cleanupOldSyncLogs(),\n            optimizeDatabase()\n        ]);\n        const summary = {\n            timestamp: new Date().toISOString(),\n            operations: [\n                {\n                    name: \"cleanupExpiredCache\",\n                    status: results[0].status,\n                    result: results[0].value || results[0].reason\n                },\n                {\n                    name: \"cleanupOldSyncLogs\",\n                    status: results[1].status,\n                    result: results[1].value || results[1].reason\n                },\n                {\n                    name: \"optimizeDatabase\",\n                    status: results[2].status,\n                    result: results[2].value || results[2].reason\n                }\n            ]\n        };\n        console.log(\"✅ Periodic maintenance completed:\", summary);\n        return summary;\n    } catch (error) {\n        console.error(\"Periodic maintenance failed:\", error);\n        return {\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n// Schedule periodic maintenance (runs every 6 hours)\nif ( true && process.env.ENABLE_MAINTENANCE !== \"false\") {\n    setInterval(async ()=>{\n        try {\n            await performMaintenance();\n        } catch (error) {\n            console.error(\"Scheduled maintenance failed:\", error);\n        }\n    }, 6 * 60 * 60 * 1000); // 6 hours\n}\n// Graceful shutdown handler\nasync function gracefulShutdown() {\n    console.log(\"\\uD83D\\uDD0C Closing database connections...\");\n    try {\n        await prisma.$disconnect();\n        console.log(\"✅ Database connections closed successfully\");\n    } catch (error) {\n        console.error(\"❌ Error closing database connections:\", error);\n    }\n}\n// Handle process shutdown\nprocess.on(\"SIGINT\", gracefulShutdown);\nprocess.on(\"SIGTERM\", gracefulShutdown);\nprocess.on(\"SIGQUIT\", gracefulShutdown);\n// Handle uncaught exceptions\nprocess.on(\"uncaughtException\", async (error)=>{\n    console.error(\"Uncaught Exception:\", error);\n    await gracefulShutdown();\n    process.exit(1);\n});\nprocess.on(\"unhandledRejection\", async (reason, promise)=>{\n    console.error(\"Unhandled Rejection at:\", promise, \"reason:\", reason);\n    await gracefulShutdown();\n    process.exit(1);\n});\n// Default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/db.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/websocket.js":
/*!******************************!*\
  !*** ./src/lib/websocket.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   io: () => (/* binding */ io),\n/* harmony export */   webSocketService: () => (/* binding */ webSocketService)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"(rsc)/./node_modules/socket.io/wrapper.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n\n\n\n\nclass WebSocketService {\n    constructor(){\n        this.io = null;\n        this.server = null;\n        this.connectedClients = new Map();\n        this.roomSubscriptions = new Map();\n        this.port = process.env.WEBSOCKET_PORT || 3001;\n        // Event types for real-time updates\n        this.events = {\n            IPO_UPDATE: \"ipo:update\",\n            GMP_UPDATE: \"gmp:update\",\n            SUBSCRIPTION_UPDATE: \"subscription:update\",\n            DEMAND_UPDATE: \"demand:update\",\n            ALLOTMENT_UPDATE: \"allotment:update\",\n            SYSTEM_STATUS: \"system:status\",\n            ANALYTICS_UPDATE: \"analytics:update\",\n            NEWS_UPDATE: \"news:update\",\n            ALERT_TRIGGERED: \"alert:triggered\"\n        };\n        // Rate limiting configuration\n        this.rateLimits = new Map();\n        this.maxEventsPerSecond = 20;\n        this.maxSubscriptionsPerClient = 100;\n        // Performance monitoring\n        this.metrics = {\n            totalConnections: 0,\n            currentConnections: 0,\n            totalMessages: 0,\n            totalSubscriptions: 0,\n            errors: 0,\n            startTime: Date.now(),\n            averageResponseTime: 0,\n            peakConnections: 0\n        };\n        // Connection health tracking\n        this.connectionHealth = new Map();\n        // Message queue for offline clients\n        this.messageQueue = new Map();\n        this.maxQueueSize = 50;\n    }\n    // Initialize WebSocket server with enhanced configuration\n    initialize() {\n        try {\n            this.server = (0,http__WEBPACK_IMPORTED_MODULE_1__.createServer)();\n            this.io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(this.server, {\n                cors: {\n                    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n                    methods: [\n                        \"GET\",\n                        \"POST\"\n                    ],\n                    credentials: true\n                },\n                pingTimeout: 60000,\n                pingInterval: 25000,\n                maxHttpBufferSize: 2e6,\n                transports: [\n                    \"websocket\",\n                    \"polling\"\n                ],\n                allowEIO3: true,\n                // Connection rate limiting\n                connectTimeout: 45000,\n                upgradeTimeout: 10000\n            });\n            this.setupEventHandlers();\n            this.startHeartbeat();\n            this.startMetricsCollection();\n            this.startHealthMonitoring();\n            console.log(\"\\uD83D\\uDD0C WebSocket service initialized successfully\");\n            return this;\n        } catch (error) {\n            console.error(\"❌ Failed to initialize WebSocket service:\", error);\n            throw error;\n        }\n    }\n    // Start the WebSocket server\n    async start() {\n        try {\n            await new Promise((resolve, reject)=>{\n                this.server.listen(this.port, (err)=>{\n                    if (err) {\n                        reject(err);\n                    } else {\n                        console.log(`🚀 WebSocket server running on port ${this.port}`);\n                        console.log(`🌐 Accepting connections from: ${process.env.FRONTEND_URL || \"http://localhost:3000\"}`);\n                        resolve();\n                    }\n                });\n            });\n            // Start periodic cleanup\n            this.startPeriodicCleanup();\n        } catch (error) {\n            console.error(\"❌ Failed to start WebSocket server:\", error);\n            throw error;\n        }\n    }\n    // Enhanced event handlers\n    setupEventHandlers() {\n        this.io.on(\"connection\", (socket)=>{\n            this.handleClientConnection(socket);\n            this.setupClientEventListeners(socket);\n            // Track metrics\n            this.metrics.totalConnections++;\n            this.metrics.currentConnections++;\n            this.metrics.peakConnections = Math.max(this.metrics.peakConnections, this.metrics.currentConnections);\n        });\n        // Handle server errors\n        this.io.on(\"error\", (error)=>{\n            console.error(\"\\uD83D\\uDD0C WebSocket server error:\", error);\n            this.metrics.errors++;\n        });\n    }\n    handleClientConnection(socket) {\n        const clientIP = socket.handshake.address;\n        const userAgent = socket.handshake.headers[\"user-agent\"] || \"Unknown\";\n        console.log(`🔌 Client connected: ${socket.id} from ${clientIP}`);\n        const clientInfo = {\n            socket,\n            connectedAt: new Date(),\n            subscriptions: new Set(),\n            lastActivity: new Date(),\n            subscriptionCount: 0,\n            messageCount: 0,\n            userAgent,\n            ipAddress: clientIP,\n            isHealthy: true,\n            lastPing: Date.now(),\n            reconnectCount: 0\n        };\n        this.connectedClients.set(socket.id, clientInfo);\n        this.connectionHealth.set(socket.id, {\n            status: \"connected\",\n            latency: 0,\n            lastSeen: Date.now()\n        });\n        // Send connection confirmation with server info\n        socket.emit(\"connected\", {\n            socketId: socket.id,\n            timestamp: Date.now(),\n            serverVersion: \"1.0.0\",\n            availableEvents: Object.values(this.events),\n            maxSubscriptions: this.maxSubscriptionsPerClient,\n            rateLimits: {\n                maxEventsPerSecond: this.maxEventsPerSecond\n            },\n            features: {\n                realTimeUpdates: true,\n                batchSubscriptions: true,\n                messageQueue: true,\n                analytics: true\n            }\n        });\n        // Send queued messages if any\n        this.sendQueuedMessages(socket.id);\n    }\n    setupClientEventListeners(socket) {\n        // IPO subscription with enhanced features\n        socket.on(\"subscribe:ipo\", async (data)=>{\n            await this.handleSubscription(socket, \"ipo\", data, async ()=>{\n                const { ipoId, symbol, includeAnalytics = false } = data;\n                if (ipoId) {\n                    socket.join(`ipo:${ipoId}`);\n                    this.addSubscription(socket.id, \"ipo\", ipoId);\n                    // Send current data immediately\n                    const ipoData = await this.getCurrentIPOData(ipoId);\n                    if (ipoData) {\n                        socket.emit(this.events.IPO_UPDATE, {\n                            ipoId,\n                            data: ipoData,\n                            type: \"initial_data\",\n                            timestamp: Date.now()\n                        });\n                        // Send analytics if requested\n                        if (includeAnalytics && ipoData.analytics) {\n                            socket.emit(this.events.ANALYTICS_UPDATE, {\n                                ipoId,\n                                data: ipoData.analytics,\n                                type: \"initial_analytics\",\n                                timestamp: Date.now()\n                            });\n                        }\n                    }\n                }\n            });\n        });\n        // Enhanced GMP subscription\n        socket.on(\"subscribe:gmp\", async (data)=>{\n            await this.handleSubscription(socket, \"gmp\", data, async ()=>{\n                const { ipoId, symbol, historical = false, alertThreshold = null } = data;\n                if (ipoId) {\n                    socket.join(`gmp:${ipoId}`);\n                    this.addSubscription(socket.id, \"gmp\", ipoId);\n                    // Send current GMP data\n                    const gmpData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"GMP\", ipoId);\n                    if (gmpData) {\n                        socket.emit(this.events.GMP_UPDATE, {\n                            ipoId,\n                            data: gmpData,\n                            type: \"current\",\n                            timestamp: Date.now()\n                        });\n                    }\n                    // Send historical data if requested\n                    if (historical) {\n                        const historicalGMP = await this.getHistoricalGMPData(ipoId, 30);\n                        socket.emit(\"gmp:historical\", {\n                            ipoId,\n                            data: historicalGMP,\n                            type: \"historical\",\n                            days: 30\n                        });\n                    }\n                    // Set up alert threshold if provided\n                    if (alertThreshold !== null) {\n                        this.setupGMPAlert(socket.id, ipoId, alertThreshold);\n                    }\n                }\n            });\n        });\n        // Real-time subscription data updates\n        socket.on(\"subscribe:subscription\", async (data)=>{\n            await this.handleSubscription(socket, \"subscription\", data, async ()=>{\n                const { symbol, categories = [], realTime = true } = data;\n                socket.join(`subscription:${symbol}`);\n                this.addSubscription(socket.id, \"subscription\", symbol);\n                // Send current subscription data\n                const subData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"SUBSCRIPTION\", symbol);\n                if (subData) {\n                    const filteredData = categories.length > 0 ? subData.data?.filter((item)=>categories.includes(item.category)) : subData;\n                    socket.emit(this.events.SUBSCRIPTION_UPDATE, {\n                        symbol,\n                        data: filteredData,\n                        categories: categories.length > 0 ? categories : \"all\",\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // Market demand updates with price filtering\n        socket.on(\"subscribe:demand\", async (data)=>{\n            await this.handleSubscription(socket, \"demand\", data, async ()=>{\n                const { symbol, priceRange = null, cutOffOnly = false } = data;\n                socket.join(`demand:${symbol}`);\n                this.addSubscription(socket.id, \"demand\", symbol);\n                // Send current demand data\n                const demandData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"DEMAND\", symbol);\n                if (demandData) {\n                    let filteredData = demandData.data || [];\n                    // Apply filters\n                    if (cutOffOnly) {\n                        filteredData = filteredData.filter((item)=>item.cutOffIndicator);\n                    }\n                    if (priceRange && priceRange.min !== undefined && priceRange.max !== undefined) {\n                        filteredData = filteredData.filter((item)=>item.price >= priceRange.min && item.price <= priceRange.max);\n                    }\n                    socket.emit(this.events.DEMAND_UPDATE, {\n                        symbol,\n                        data: filteredData,\n                        filters: {\n                            priceRange,\n                            cutOffOnly\n                        },\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // Analytics subscription with customizable metrics\n        socket.on(\"subscribe:analytics\", async (data)=>{\n            await this.handleSubscription(socket, \"analytics\", data, async ()=>{\n                const { ipoId, type = \"all\", metrics = [], updateInterval = 30000 } = data;\n                socket.join(`analytics:${ipoId}`);\n                this.addSubscription(socket.id, \"analytics\", ipoId);\n                // Send current analytics\n                const analytics = await this.getCurrentAnalytics(ipoId, type);\n                if (analytics) {\n                    const filteredAnalytics = metrics.length > 0 ? this.filterAnalyticsByMetrics(analytics, metrics) : analytics;\n                    socket.emit(this.events.ANALYTICS_UPDATE, {\n                        ipoId,\n                        type,\n                        data: filteredAnalytics,\n                        metrics: metrics.length > 0 ? metrics : \"all\",\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // System status subscription\n        socket.on(\"subscribe:system\", async ()=>{\n            socket.join(\"system:status\");\n            this.addSubscription(socket.id, \"system\", \"status\");\n            // Send current system status\n            const systemStatus = await this.getSystemStatus();\n            socket.emit(this.events.SYSTEM_STATUS, {\n                ...systemStatus,\n                type: \"current_status\",\n                timestamp: Date.now()\n            });\n        });\n        // Batch subscription for multiple IPOs with advanced options\n        socket.on(\"subscribe:batch\", async (data)=>{\n            const { subscriptions = [], options = {} } = data;\n            const { maxSubscriptions = 20, skipErrors = true } = options;\n            const results = [];\n            // Limit batch size\n            const limitedSubscriptions = subscriptions.slice(0, maxSubscriptions);\n            for (const sub of limitedSubscriptions){\n                try {\n                    await this.handleSingleSubscription(socket, sub);\n                    results.push({\n                        ...sub,\n                        status: \"success\"\n                    });\n                } catch (error) {\n                    results.push({\n                        ...sub,\n                        status: \"error\",\n                        error: error.message\n                    });\n                    if (!skipErrors) {\n                        break;\n                    }\n                }\n            }\n            socket.emit(\"subscribe:batch:result\", {\n                results,\n                processed: results.length,\n                successful: results.filter((r)=>r.status === \"success\").length,\n                errors: results.filter((r)=>r.status === \"error\").length,\n                timestamp: Date.now()\n            });\n        });\n        // Enhanced unsubscribe with patterns\n        socket.on(\"unsubscribe\", (data)=>{\n            const { type, identifier, pattern } = data;\n            if (pattern === \"all\") {\n                this.unsubscribeAll(socket.id);\n                socket.emit(\"unsubscribe:result\", {\n                    pattern: \"all\",\n                    status: \"success\",\n                    message: \"Unsubscribed from all events\"\n                });\n            } else if (type && identifier) {\n                const roomKey = `${type}:${identifier}`;\n                socket.leave(roomKey);\n                this.removeSubscription(socket.id, type, identifier);\n                socket.emit(\"unsubscribe:result\", {\n                    type,\n                    identifier,\n                    status: \"success\"\n                });\n            } else if (type) {\n                // Unsubscribe from all subscriptions of a specific type\n                this.unsubscribeByType(socket.id, type);\n                socket.emit(\"unsubscribe:result\", {\n                    type,\n                    status: \"success\",\n                    message: `Unsubscribed from all ${type} events`\n                });\n            }\n        });\n        // Enhanced heartbeat with performance metrics\n        socket.on(\"ping\", (data)=>{\n            const client = this.connectedClients.get(socket.id);\n            const now = Date.now();\n            if (client) {\n                client.lastActivity = new Date();\n                client.messageCount++;\n                client.lastPing = now;\n            }\n            // Calculate latency\n            const latency = data?.timestamp ? now - data.timestamp : 0;\n            this.connectionHealth.set(socket.id, {\n                status: \"healthy\",\n                latency,\n                lastSeen: now\n            });\n            socket.emit(\"pong\", {\n                timestamp: now,\n                serverUptime: now - this.metrics.startTime,\n                latency,\n                clientInfo: client ? {\n                    subscriptions: client.subscriptionCount,\n                    messages: client.messageCount,\n                    connectedFor: now - client.connectedAt.getTime()\n                } : null\n            });\n        });\n        // Client info and statistics request\n        socket.on(\"client:info\", ()=>{\n            const client = this.connectedClients.get(socket.id);\n            const health = this.connectionHealth.get(socket.id);\n            if (client) {\n                socket.emit(\"client:info\", {\n                    socketId: socket.id,\n                    connectedAt: client.connectedAt,\n                    subscriptions: Array.from(client.subscriptions),\n                    subscriptionCount: client.subscriptionCount,\n                    messageCount: client.messageCount,\n                    userAgent: client.userAgent,\n                    ipAddress: client.ipAddress,\n                    health: health || {\n                        status: \"unknown\"\n                    },\n                    serverMetrics: {\n                        totalConnections: this.metrics.currentConnections,\n                        serverUptime: Date.now() - this.metrics.startTime\n                    }\n                });\n            }\n        });\n        // Request server statistics\n        socket.on(\"server:stats\", ()=>{\n            if (this.isAuthorized(socket)) {\n                // Only for authorized clients\n                const stats = this.getDetailedStats();\n                socket.emit(\"server:stats\", stats);\n            } else {\n                socket.emit(\"error\", {\n                    type: \"unauthorized\",\n                    message: \"Not authorized to view server statistics\"\n                });\n            }\n        });\n        // Error handling\n        socket.on(\"error\", (error)=>{\n            console.error(`🔌 Socket error for ${socket.id}:`, error);\n            this.metrics.errors++;\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                client.isHealthy = false;\n            }\n            this.connectionHealth.set(socket.id, {\n                status: \"error\",\n                error: error.message,\n                lastSeen: Date.now()\n            });\n        });\n        // Disconnect handling with cleanup\n        socket.on(\"disconnect\", (reason)=>{\n            console.log(`🔌 Client disconnected: ${socket.id}, reason: ${reason}`);\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                // Store disconnection info for potential reconnection\n                this.handleClientDisconnection(socket.id, reason);\n            }\n            this.cleanupClient(socket.id);\n            this.metrics.currentConnections--;\n        });\n        // Reconnection handling\n        socket.on(\"reconnect\", (data)=>{\n            console.log(`🔄 Client reconnected: ${socket.id}`);\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                client.reconnectCount++;\n                client.lastActivity = new Date();\n                // Send queued messages\n                this.sendQueuedMessages(socket.id);\n            }\n        });\n    }\n    // Enhanced subscription handling with validation\n    async handleSubscription(socket, type, data, subscriptionLogic) {\n        try {\n            const client = this.connectedClients.get(socket.id);\n            if (!client) {\n                throw new Error(\"Client not found\");\n            }\n            // Check subscription limits\n            if (client.subscriptionCount >= this.maxSubscriptionsPerClient) {\n                throw new Error(`Maximum subscriptions limit reached (${this.maxSubscriptionsPerClient})`);\n            }\n            // Check rate limits\n            if (!this.checkRateLimit(socket.id, type)) {\n                throw new Error(\"Rate limit exceeded. Please slow down.\");\n            }\n            // Validate subscription data\n            this.validateSubscriptionData(type, data);\n            // Execute subscription logic\n            await subscriptionLogic();\n            // Update client info\n            client.lastActivity = new Date();\n            client.messageCount++;\n            // Send success confirmation\n            socket.emit(\"subscribe:success\", {\n                type,\n                data,\n                timestamp: Date.now(),\n                subscriptionCount: client.subscriptionCount\n            });\n        } catch (error) {\n            console.error(`Subscription failed for ${socket.id}:`, error.message);\n            socket.emit(\"subscribe:error\", {\n                type: \"subscription_failed\",\n                message: error.message,\n                subscriptionType: type,\n                data,\n                timestamp: Date.now()\n            });\n        }\n    }\n    // Validate subscription data\n    validateSubscriptionData(type, data) {\n        switch(type){\n            case \"ipo\":\n                if (!data.ipoId && !data.symbol) {\n                    throw new Error(\"Either ipoId or symbol is required for IPO subscription\");\n                }\n                break;\n            case \"gmp\":\n                if (!data.ipoId && !data.symbol) {\n                    throw new Error(\"Either ipoId or symbol is required for GMP subscription\");\n                }\n                break;\n            case \"subscription\":\n            case \"demand\":\n                if (!data.symbol) {\n                    throw new Error(\"Symbol is required for subscription/demand data\");\n                }\n                break;\n            case \"analytics\":\n                if (!data.ipoId) {\n                    throw new Error(\"IPO ID is required for analytics subscription\");\n                }\n                break;\n        }\n    }\n    // Handle single subscription (for batch operations)\n    async handleSingleSubscription(socket, { type, ipoId, symbol, options = {} }) {\n        switch(type){\n            case \"ipo\":\n                if (ipoId) {\n                    socket.join(`ipo:${ipoId}`);\n                    this.addSubscription(socket.id, \"ipo\", ipoId);\n                }\n                break;\n            case \"gmp\":\n                if (ipoId) {\n                    socket.join(`gmp:${ipoId}`);\n                    this.addSubscription(socket.id, \"gmp\", ipoId);\n                }\n                break;\n            case \"subscription\":\n                if (symbol) {\n                    socket.join(`subscription:${symbol}`);\n                    this.addSubscription(socket.id, \"subscription\", symbol);\n                }\n                break;\n            case \"demand\":\n                if (symbol) {\n                    socket.join(`demand:${symbol}`);\n                    this.addSubscription(socket.id, \"demand\", symbol);\n                }\n                break;\n            case \"analytics\":\n                if (ipoId) {\n                    socket.join(`analytics:${ipoId}`);\n                    this.addSubscription(socket.id, \"analytics\", ipoId);\n                }\n                break;\n            default:\n                throw new Error(`Unknown subscription type: ${type}`);\n        }\n    }\n    // Enhanced rate limiting\n    checkRateLimit(socketId, eventType) {\n        const key = `${socketId}:${eventType}`;\n        const now = Date.now();\n        const windowStart = Math.floor(now / 1000) * 1000;\n        if (!this.rateLimits.has(key)) {\n            this.rateLimits.set(key, {\n                count: 0,\n                windowStart\n            });\n        }\n        const limit = this.rateLimits.get(key);\n        if (limit.windowStart !== windowStart) {\n            limit.count = 0;\n            limit.windowStart = windowStart;\n        }\n        if (limit.count >= this.maxEventsPerSecond) {\n            return false;\n        }\n        limit.count++;\n        return true;\n    }\n    // Subscription management\n    addSubscription(socketId, type, identifier) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionKey = `${type}:${identifier}`;\n            client.subscriptions.add(subscriptionKey);\n            client.subscriptionCount = client.subscriptions.size;\n            // Track room subscriptions\n            if (!this.roomSubscriptions.has(subscriptionKey)) {\n                this.roomSubscriptions.set(subscriptionKey, new Set());\n            }\n            this.roomSubscriptions.get(subscriptionKey).add(socketId);\n            this.metrics.totalSubscriptions++;\n        }\n    }\n    removeSubscription(socketId, type, identifier) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionKey = `${type}:${identifier}`;\n            client.subscriptions.delete(subscriptionKey);\n            client.subscriptionCount = client.subscriptions.size;\n            // Remove from room subscriptions\n            const roomSubs = this.roomSubscriptions.get(subscriptionKey);\n            if (roomSubs) {\n                roomSubs.delete(socketId);\n                if (roomSubs.size === 0) {\n                    this.roomSubscriptions.delete(subscriptionKey);\n                }\n            }\n        }\n    }\n    unsubscribeAll(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            for (const subscription of client.subscriptions){\n                const [type, identifier] = subscription.split(\":\");\n                client.socket.leave(subscription);\n                this.removeSubscription(socketId, type, identifier);\n            }\n        }\n    }\n    unsubscribeByType(socketId, type) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionsToRemove = Array.from(client.subscriptions).filter((sub)=>sub.startsWith(`${type}:`));\n            for (const subscription of subscriptionsToRemove){\n                const [, identifier] = subscription.split(\":\");\n                client.socket.leave(subscription);\n                this.removeSubscription(socketId, type, identifier);\n            }\n        }\n    }\n    // Enhanced broadcasting methods\n    async broadcastIPOUpdate(ipoId, updateData, options = {}) {\n        try {\n            const { priority = \"normal\", excludeSocket = null, includeAnalytics = false } = options;\n            if (!this.checkBroadcastRateLimit(\"ipo\", ipoId)) {\n                return;\n            }\n            const room = `ipo:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    ipoId,\n                    data: updateData,\n                    timestamp: Date.now(),\n                    priority,\n                    server: process.env.SERVER_ID || \"ws-1\",\n                    type: \"update\"\n                };\n                if (includeAnalytics && updateData.analytics) {\n                    enrichedData.analytics = updateData.analytics;\n                }\n                if (excludeSocket) {\n                    this.io.to(room).except(excludeSocket).emit(this.events.IPO_UPDATE, enrichedData);\n                } else {\n                    this.io.to(room).emit(this.events.IPO_UPDATE, enrichedData);\n                }\n                console.log(`📡 IPO update broadcast to ${subscriberCount} clients for IPO ${ipoId}`);\n                this.metrics.totalMessages++;\n                // Queue message for offline clients if critical\n                if (priority === \"high\") {\n                    this.queueMessageForOfflineClients(room, enrichedData);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting IPO update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastGMPUpdate(ipoId, gmpData, options = {}) {\n        try {\n            const { historical = false, alertCheck = true } = options;\n            if (!this.checkBroadcastRateLimit(\"gmp\", ipoId)) {\n                return;\n            }\n            const room = `gmp:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const change = await this.calculateGMPChange(ipoId, gmpData.value);\n                const enrichedData = {\n                    ipoId,\n                    data: gmpData,\n                    timestamp: Date.now(),\n                    historical,\n                    change,\n                    trend: this.calculateGMPTrend(change),\n                    volatility: await this.calculateGMPVolatility(ipoId)\n                };\n                this.io.to(room).emit(this.events.GMP_UPDATE, enrichedData);\n                console.log(`💰 GMP update broadcast to ${subscriberCount} clients for IPO ${ipoId} (Value: ${gmpData.value})`);\n                this.metrics.totalMessages++;\n                // Check for GMP alerts\n                if (alertCheck) {\n                    this.checkGMPAlerts(ipoId, gmpData.value);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting GMP update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastSubscriptionUpdate(symbol, subscriptionData, options = {}) {\n        try {\n            const { category = null, alertOnOversubscription = true } = options;\n            if (!this.checkBroadcastRateLimit(\"subscription\", symbol)) {\n                return;\n            }\n            const room = `subscription:${symbol}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    symbol,\n                    data: subscriptionData,\n                    timestamp: Date.now(),\n                    category,\n                    overallSubscription: this.calculateOverallSubscription(subscriptionData),\n                    isOversubscribed: this.isOversubscribed(subscriptionData)\n                };\n                this.io.to(room).emit(this.events.SUBSCRIPTION_UPDATE, enrichedData);\n                console.log(`📊 Subscription update broadcast to ${subscriberCount} clients for ${symbol}`);\n                this.metrics.totalMessages++;\n                // Alert on oversubscription\n                if (alertOnOversubscription && enrichedData.isOversubscribed) {\n                    this.broadcastAlert(\"oversubscription\", {\n                        symbol,\n                        subscription: enrichedData.overallSubscription,\n                        timestamp: Date.now()\n                    });\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting subscription update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastDemandUpdate(symbol, demandData, options = {}) {\n        try {\n            const { priceLevel = null } = options;\n            if (!this.checkBroadcastRateLimit(\"demand\", symbol)) {\n                return;\n            }\n            const room = `demand:${symbol}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    symbol,\n                    data: demandData,\n                    timestamp: Date.now(),\n                    priceLevel,\n                    totalDemand: this.calculateTotalDemand(demandData),\n                    cutOffDemand: this.calculateCutOffDemand(demandData)\n                };\n                this.io.to(room).emit(this.events.DEMAND_UPDATE, enrichedData);\n                console.log(`📈 Demand update broadcast to ${subscriberCount} clients for ${symbol}`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting demand update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastAnalyticsUpdate(ipoId, analyticsData, options = {}) {\n        try {\n            const { type = \"general\", metrics = null } = options;\n            if (!this.checkBroadcastRateLimit(\"analytics\", ipoId)) {\n                return;\n            }\n            const room = `analytics:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    ipoId,\n                    type,\n                    data: analyticsData,\n                    metrics,\n                    timestamp: Date.now(),\n                    insights: await this.generateAnalyticsInsights(analyticsData)\n                };\n                this.io.to(room).emit(this.events.ANALYTICS_UPDATE, enrichedData);\n                console.log(`📊 Analytics update broadcast to ${subscriberCount} clients for IPO ${ipoId}`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting analytics update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast system status\n    async broadcastSystemStatus(status, options = {}) {\n        try {\n            const { priority = \"normal\", room = \"system:status\" } = options;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedStatus = {\n                    ...status,\n                    timestamp: Date.now(),\n                    server: process.env.SERVER_ID || \"ws-1\",\n                    priority,\n                    connections: this.metrics.currentConnections\n                };\n                this.io.to(room).emit(this.events.SYSTEM_STATUS, enrichedStatus);\n                console.log(`🔔 System status broadcast to ${subscriberCount} clients`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting system status:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast alerts\n    async broadcastAlert(alertType, alertData) {\n        try {\n            const enrichedAlert = {\n                type: alertType,\n                data: alertData,\n                timestamp: Date.now(),\n                server: process.env.SERVER_ID || \"ws-1\",\n                severity: this.getAlertSeverity(alertType)\n            };\n            // Broadcast to all connected clients\n            this.io.emit(this.events.ALERT_TRIGGERED, enrichedAlert);\n            console.log(`🚨 Alert broadcast: ${alertType}`);\n            this.metrics.totalMessages++;\n            // Store alert for queuing\n            this.queueMessageForOfflineClients(\"global\", enrichedAlert);\n        } catch (error) {\n            console.error(\"Error broadcasting alert:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast rate limiting\n    checkBroadcastRateLimit(eventType, identifier) {\n        const key = `broadcast:${eventType}:${identifier}`;\n        const now = Date.now();\n        const windowStart = Math.floor(now / 5000) * 5000; // 5-second window\n        if (!this.rateLimits.has(key)) {\n            this.rateLimits.set(key, {\n                count: 0,\n                windowStart\n            });\n        }\n        const limit = this.rateLimits.get(key);\n        if (limit.windowStart !== windowStart) {\n            limit.count = 0;\n            limit.windowStart = windowStart;\n        }\n        // Max 10 broadcasts per 5 seconds per event type\n        if (limit.count >= 10) {\n            return false;\n        }\n        limit.count++;\n        return true;\n    }\n    // Calculate GMP change and trend\n    async calculateGMPChange(ipoId, currentValue) {\n        try {\n            if (!this.previousGMPValues) {\n                this.previousGMPValues = new Map();\n            }\n            const previousValue = this.previousGMPValues.get(ipoId) || currentValue;\n            this.previousGMPValues.set(ipoId, currentValue);\n            return {\n                absolute: currentValue - previousValue,\n                percentage: previousValue > 0 ? parseFloat(((currentValue - previousValue) / previousValue * 100).toFixed(2)) : 0,\n                direction: currentValue > previousValue ? \"up\" : currentValue < previousValue ? \"down\" : \"stable\"\n            };\n        } catch (error) {\n            return {\n                absolute: 0,\n                percentage: 0,\n                direction: \"stable\"\n            };\n        }\n    }\n    calculateGMPTrend(change) {\n        if (Math.abs(change.percentage) < 1) return \"stable\";\n        if (change.percentage > 5) return \"bullish\";\n        if (change.percentage < -5) return \"bearish\";\n        return change.direction;\n    }\n    async calculateGMPVolatility(ipoId) {\n        try {\n            const recentGMP = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.gMP.findMany({\n                where: {\n                    ipoId\n                },\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 10\n            });\n            if (recentGMP.length < 2) return 0;\n            const values = recentGMP.map((g)=>g.value);\n            const mean = values.reduce((a, b)=>a + b) / values.length;\n            const variance = values.reduce((acc, val)=>acc + Math.pow(val - mean, 2), 0) / values.length;\n            return Math.round(Math.sqrt(variance) * 100) / 100;\n        } catch (error) {\n            return 0;\n        }\n    }\n    // Subscription calculation utilities\n    calculateOverallSubscription(subscriptionData) {\n        if (!Array.isArray(subscriptionData)) return 0;\n        const ratios = subscriptionData.map((item)=>parseFloat(item.subscriptionRatio || 0));\n        return ratios.length > 0 ? Math.max(...ratios) : 0;\n    }\n    isOversubscribed(subscriptionData) {\n        return this.calculateOverallSubscription(subscriptionData) > 1;\n    }\n    calculateTotalDemand(demandData) {\n        if (!Array.isArray(demandData)) return 0;\n        return demandData.reduce((total, item)=>total + parseInt(item.absoluteQuantity || 0), 0);\n    }\n    calculateCutOffDemand(demandData) {\n        if (!Array.isArray(demandData)) return 0;\n        return demandData.filter((item)=>item.cutOffIndicator).reduce((total, item)=>total + parseInt(item.absoluteQuantity || 0), 0);\n    }\n    // Generate analytics insights\n    async generateAnalyticsInsights(analyticsData) {\n        const insights = [];\n        try {\n            if (analyticsData.gmpVolatility > 20) {\n                insights.push({\n                    type: \"warning\",\n                    message: \"High GMP volatility detected\",\n                    value: analyticsData.gmpVolatility\n                });\n            }\n            if (analyticsData.finalSubscription > 5) {\n                insights.push({\n                    type: \"positive\",\n                    message: \"Strong subscription demand\",\n                    value: analyticsData.finalSubscription\n                });\n            }\n            if (analyticsData.riskScore > 70) {\n                insights.push({\n                    type: \"caution\",\n                    message: \"High risk score\",\n                    value: analyticsData.riskScore\n                });\n            }\n        } catch (error) {\n            console.error(\"Error generating insights:\", error);\n        }\n        return insights;\n    }\n    // Data fetching methods\n    async getCurrentIPOData(ipoId) {\n        try {\n            const ipo = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.iPO.findUnique({\n                where: {\n                    id: ipoId\n                },\n                include: {\n                    gmp: {\n                        take: 5,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscription: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 10\n                    },\n                    analytics: true,\n                    categories: true\n                }\n            });\n            return ipo;\n        } catch (error) {\n            console.error(\"Error fetching current IPO data:\", error);\n            return null;\n        }\n    }\n    async getHistoricalGMPData(ipoId, days = 30) {\n        try {\n            const startDate = new Date();\n            startDate.setDate(startDate.getDate() - days);\n            const gmpData = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.gMP.findMany({\n                where: {\n                    ipoId,\n                    timestamp: {\n                        gte: startDate\n                    }\n                },\n                orderBy: {\n                    timestamp: \"asc\"\n                },\n                take: 1000\n            });\n            return gmpData;\n        } catch (error) {\n            console.error(\"Error fetching historical GMP data:\", error);\n            return [];\n        }\n    }\n    async getCurrentAnalytics(ipoId, type = \"all\") {\n        try {\n            const analytics = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.iPOAnalytics.findUnique({\n                where: {\n                    ipoId\n                }\n            });\n            if (type === \"all\") {\n                return analytics;\n            }\n            // Return specific analytics based on type\n            const typeMapping = {\n                gmp: [\n                    \"avgGMP\",\n                    \"maxGMP\",\n                    \"minGMP\",\n                    \"gmpVolatility\"\n                ],\n                subscription: [\n                    \"finalSubscription\",\n                    \"retailSubscription\",\n                    \"qibSubscription\"\n                ],\n                prediction: [\n                    \"predictedListingGain\",\n                    \"allotmentProbability\",\n                    \"riskScore\"\n                ]\n            };\n            if (typeMapping[type] && analytics) {\n                const filteredAnalytics = {};\n                typeMapping[type].forEach((key)=>{\n                    if (analytics[key] !== undefined) {\n                        filteredAnalytics[key] = analytics[key];\n                    }\n                });\n                return filteredAnalytics;\n            }\n            return analytics;\n        } catch (error) {\n            console.error(\"Error fetching analytics:\", error);\n            return null;\n        }\n    }\n    // System status\n    async getSystemStatus() {\n        try {\n            const [dbHealth, cacheHealth] = await Promise.allSettled([\n                _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.$queryRaw`SELECT 1`,\n                _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.healthCheck()\n            ]);\n            return {\n                status: \"operational\",\n                connections: this.metrics.currentConnections,\n                uptime: Date.now() - this.metrics.startTime,\n                database: dbHealth.status === \"fulfilled\" ? \"healthy\" : \"degraded\",\n                cache: cacheHealth.status === \"fulfilled\" && cacheHealth.value.status === \"healthy\" ? \"healthy\" : \"degraded\",\n                websocket: \"healthy\",\n                version: \"1.0.0\"\n            };\n        } catch (error) {\n            return {\n                status: \"degraded\",\n                error: error.message,\n                uptime: Date.now() - this.metrics.startTime\n            };\n        }\n    }\n    // Filter analytics by specific metrics\n    filterAnalyticsByMetrics(analytics, metrics) {\n        if (!analytics || !Array.isArray(metrics)) return analytics;\n        const filtered = {};\n        metrics.forEach((metric)=>{\n            if (analytics[metric] !== undefined) {\n                filtered[metric] = analytics[metric];\n            }\n        });\n        return filtered;\n    }\n    // GMP Alert management\n    setupGMPAlert(socketId, ipoId, threshold) {\n        if (!this.gmpAlerts) {\n            this.gmpAlerts = new Map();\n        }\n        const alertKey = `${socketId}:${ipoId}`;\n        this.gmpAlerts.set(alertKey, {\n            threshold,\n            triggered: false,\n            createdAt: Date.now()\n        });\n    }\n    checkGMPAlerts(ipoId, currentGMP) {\n        if (!this.gmpAlerts) return;\n        for (const [alertKey, alert] of this.gmpAlerts){\n            const [socketId, alertIpoId] = alertKey.split(\":\");\n            if (alertIpoId === ipoId && !alert.triggered) {\n                if (currentGMP >= alert.threshold) {\n                    const client = this.connectedClients.get(socketId);\n                    if (client) {\n                        client.socket.emit(this.events.ALERT_TRIGGERED, {\n                            type: \"gmp_threshold\",\n                            ipoId,\n                            threshold: alert.threshold,\n                            currentValue: currentGMP,\n                            timestamp: Date.now()\n                        });\n                        alert.triggered = true;\n                        console.log(`🚨 GMP alert triggered for ${socketId}: ${ipoId} reached ${currentGMP}`);\n                    }\n                }\n            }\n        }\n    }\n    // Get alert severity\n    getAlertSeverity(alertType) {\n        const severityMap = {\n            gmp_threshold: \"medium\",\n            oversubscription: \"high\",\n            system_error: \"critical\",\n            connection_issue: \"low\",\n            rate_limit: \"medium\"\n        };\n        return severityMap[alertType] || \"low\";\n    }\n    // Message queuing for offline clients\n    queueMessageForOfflineClients(room, message) {\n        if (!this.messageQueue.has(room)) {\n            this.messageQueue.set(room, []);\n        }\n        const queue = this.messageQueue.get(room);\n        queue.push({\n            message,\n            timestamp: Date.now()\n        });\n        // Keep only the latest messages\n        if (queue.length > this.maxQueueSize) {\n            queue.splice(0, queue.length - this.maxQueueSize);\n        }\n    }\n    sendQueuedMessages(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (!client) return;\n        // Send queued messages for subscribed rooms\n        for (const subscription of client.subscriptions){\n            const queuedMessages = this.messageQueue.get(subscription);\n            if (queuedMessages && queuedMessages.length > 0) {\n                client.socket.emit(\"queued:messages\", {\n                    room: subscription,\n                    messages: queuedMessages,\n                    count: queuedMessages.length\n                });\n                // Clear the queue after sending\n                this.messageQueue.delete(subscription);\n            }\n        }\n    }\n    // Client disconnection handling\n    handleClientDisconnection(socketId, reason) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            // Store disconnection info\n            this.disconnectionLog = this.disconnectionLog || new Map();\n            this.disconnectionLog.set(socketId, {\n                reason,\n                disconnectedAt: Date.now(),\n                subscriptions: Array.from(client.subscriptions),\n                reconnectCount: client.reconnectCount\n            });\n            // Keep only recent disconnections\n            if (this.disconnectionLog.size > 1000) {\n                const entries = Array.from(this.disconnectionLog.entries());\n                entries.sort((a, b)=>b[1].disconnectedAt - a[1].disconnectedAt);\n                this.disconnectionLog = new Map(entries.slice(0, 500));\n            }\n        }\n    }\n    // Authorization check (implement based on your auth system)\n    isAuthorized(socket) {\n        // Implement your authorization logic here\n        // For now, return true for basic functionality\n        return true;\n    }\n    // Enhanced heartbeat with health monitoring\n    startHeartbeat() {\n        setInterval(()=>{\n            const now = Date.now();\n            const staleThreshold = 5 * 60 * 1000; // 5 minutes\n            const staleClients = [];\n            for (const [socketId, client] of this.connectedClients){\n                const timeSinceLastActivity = now - client.lastActivity.getTime();\n                if (timeSinceLastActivity > staleThreshold) {\n                    console.log(`🧹 Disconnecting stale client: ${socketId} (inactive for ${Math.round(timeSinceLastActivity / 1000)}s)`);\n                    client.socket.disconnect(true);\n                    staleClients.push(socketId);\n                }\n            }\n            if (staleClients.length > 0) {\n                console.log(`🧹 Cleaned up ${staleClients.length} stale connections`);\n            }\n            // Broadcast system heartbeat every 5 minutes\n            if (now % (5 * 60 * 1000) < 60000) {\n                // Within 1 minute of 5-minute mark\n                this.broadcastSystemStatus({\n                    type: \"heartbeat\",\n                    status: \"healthy\",\n                    uptime: now - this.metrics.startTime,\n                    connections: this.metrics.currentConnections,\n                    message: \"System running normally\"\n                });\n            }\n        }, 60000); // Check every minute\n    }\n    // Health monitoring\n    startHealthMonitoring() {\n        setInterval(()=>{\n            const now = Date.now();\n            // Monitor connection health\n            for (const [socketId, health] of this.connectionHealth){\n                if (now - health.lastSeen > 2 * 60 * 1000) {\n                    // 2 minutes\n                    health.status = \"stale\";\n                }\n                if (health.latency > 1000) {\n                    // High latency\n                    health.status = \"degraded\";\n                }\n            }\n            // Clean up old health records\n            const healthEntries = Array.from(this.connectionHealth.entries());\n            const activeClients = new Set(this.connectedClients.keys());\n            for (const [socketId] of healthEntries){\n                if (!activeClients.has(socketId)) {\n                    this.connectionHealth.delete(socketId);\n                }\n            }\n        }, 30000); // Every 30 seconds\n    }\n    // Metrics collection\n    startMetricsCollection() {\n        setInterval(()=>{\n            const stats = this.getDetailedStats();\n            console.log(`📊 WebSocket Metrics: Connections: ${stats.connections}, Messages: ${stats.totalMessages}, Uptime: ${Math.round(stats.uptime / 1000)}s`);\n            // Store metrics in cache for monitoring dashboards\n            _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.set(\"websocket_metrics\", stats, 300); // 5 minutes\n            // Reset hourly counters\n            const now = Date.now();\n            if (now - this.metrics.startTime > 60 * 60 * 1000) {\n                // Every hour\n                this.resetHourlyMetrics();\n            }\n        }, 30000); // Every 30 seconds\n    }\n    // Periodic cleanup\n    startPeriodicCleanup() {\n        setInterval(()=>{\n            // Clean up rate limits\n            const now = Date.now();\n            for (const [key, limit] of this.rateLimits){\n                if (now - limit.windowStart > 60000) {\n                    // 1 minute old\n                    this.rateLimits.delete(key);\n                }\n            }\n            // Clean up old GMP alerts\n            if (this.gmpAlerts) {\n                for (const [key, alert] of this.gmpAlerts){\n                    if (now - alert.createdAt > 24 * 60 * 60 * 1000) {\n                        // 24 hours old\n                        this.gmpAlerts.delete(key);\n                    }\n                }\n            }\n            // Clean up message queues\n            for (const [room, messages] of this.messageQueue){\n                const validMessages = messages.filter((msg)=>now - msg.timestamp < 60 * 60 * 1000 // Keep messages for 1 hour\n                );\n                if (validMessages.length === 0) {\n                    this.messageQueue.delete(room);\n                } else {\n                    this.messageQueue.set(room, validMessages);\n                }\n            }\n        }, 5 * 60 * 1000); // Every 5 minutes\n    }\n    // Reset hourly metrics\n    resetHourlyMetrics() {\n        this.metrics.totalMessages = 0;\n        this.metrics.errors = 0;\n        console.log(\"\\uD83D\\uDCCA Hourly metrics reset\");\n    }\n    // Enhanced statistics\n    getDetailedStats() {\n        const connections = this.connectedClients.size;\n        const rooms = Array.from(this.roomSubscriptions.keys());\n        const totalSubscriptions = Array.from(this.roomSubscriptions.values()).reduce((sum, subs)=>sum + subs.size, 0);\n        // Calculate averages\n        const avgSubscriptionsPerClient = connections > 0 ? parseFloat((totalSubscriptions / connections).toFixed(2)) : 0;\n        // Get memory usage\n        const memoryUsage = process.memoryUsage();\n        // Calculate health stats\n        const healthyConnections = Array.from(this.connectionHealth.values()).filter((h)=>h.status === \"healthy\").length;\n        return {\n            connections,\n            rooms: rooms.length,\n            subscriptions: totalSubscriptions,\n            avgSubscriptionsPerClient,\n            totalMessages: this.metrics.totalMessages,\n            totalConnections: this.metrics.totalConnections,\n            peakConnections: this.metrics.peakConnections,\n            errors: this.metrics.errors,\n            uptime: Date.now() - this.metrics.startTime,\n            rateLimitEntries: this.rateLimits.size,\n            queuedMessages: Array.from(this.messageQueue.values()).reduce((sum, msgs)=>sum + msgs.length, 0),\n            health: {\n                healthy: healthyConnections,\n                degraded: this.connectionHealth.size - healthyConnections,\n                healthRate: this.connectionHealth.size > 0 ? parseFloat((healthyConnections / this.connectionHealth.size * 100).toFixed(2)) : 100\n            },\n            memory: {\n                rss: Math.round(memoryUsage.rss / 1024 / 1024) + \"MB\",\n                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + \"MB\",\n                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + \"MB\",\n                external: Math.round(memoryUsage.external / 1024 / 1024) + \"MB\"\n            },\n            roomDetails: Object.fromEntries(Array.from(this.roomSubscriptions.entries()).map(([room, subs])=>[\n                    room,\n                    subs.size\n                ])),\n            timestamp: Date.now()\n        };\n    }\n    // Health check\n    getHealthCheck() {\n        const stats = this.getDetailedStats();\n        const isHealthy = this.io && stats.connections >= 0 && !this.isOverloaded();\n        return {\n            status: isHealthy ? \"healthy\" : \"unhealthy\",\n            uptime: stats.uptime,\n            connections: stats.connections,\n            rooms: stats.rooms,\n            subscriptions: stats.subscriptions,\n            averageLoad: this.calculateAverageLoad(),\n            memoryUsage: stats.memory,\n            health: stats.health,\n            errors: stats.errors,\n            lastErrors: this.getRecentErrors(),\n            timestamp: Date.now()\n        };\n    }\n    isOverloaded() {\n        const stats = this.getDetailedStats();\n        const memoryUsage = process.memoryUsage();\n        // Define overload thresholds\n        const maxConnections = parseInt(process.env.WS_MAX_CONNECTIONS) || 10000;\n        const maxMemoryMB = parseInt(process.env.WS_MAX_MEMORY_MB) || 1024;\n        const maxSubscriptions = parseInt(process.env.WS_MAX_SUBSCRIPTIONS) || 50000;\n        return stats.connections > maxConnections || memoryUsage.heapUsed / 1024 / 1024 > maxMemoryMB || stats.subscriptions > maxSubscriptions || stats.errors > 100 // High error rate\n        ;\n    }\n    calculateAverageLoad() {\n        const timeDiff = (Date.now() - this.metrics.startTime) / 1000;\n        const messagesPerSecond = timeDiff > 0 ? this.metrics.totalMessages / timeDiff : 0;\n        const connectionsRatio = this.connectedClients.size / 1000; // Normalize to 1000 connections\n        return parseFloat((messagesPerSecond * connectionsRatio).toFixed(2));\n    }\n    getRecentErrors() {\n        // In a production environment, you'd implement proper error logging\n        return {\n            count: this.metrics.errors,\n            lastErrorTime: this.lastErrorTime || null\n        };\n    }\n    // Client cleanup\n    cleanupClient(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            // Remove from all room subscriptions\n            for (const subscription of client.subscriptions){\n                const roomSubs = this.roomSubscriptions.get(subscription);\n                if (roomSubs) {\n                    roomSubs.delete(socketId);\n                    if (roomSubs.size === 0) {\n                        this.roomSubscriptions.delete(subscription);\n                    }\n                }\n            }\n            this.connectedClients.delete(socketId);\n        }\n        // Clean up connection health\n        this.connectionHealth.delete(socketId);\n        // Clean up rate limits for this client\n        const keysToDelete = [];\n        for (const [key] of this.rateLimits){\n            if (key.startsWith(socketId)) {\n                keysToDelete.push(key);\n            }\n        }\n        keysToDelete.forEach((key)=>this.rateLimits.delete(key));\n        // Clean up GMP alerts\n        if (this.gmpAlerts) {\n            const alertKeysToDelete = [];\n            for (const [key] of this.gmpAlerts){\n                if (key.startsWith(socketId)) {\n                    alertKeysToDelete.push(key);\n                }\n            }\n            alertKeysToDelete.forEach((key)=>this.gmpAlerts.delete(key));\n        }\n    }\n    // Graceful shutdown\n    async shutdown() {\n        console.log(\"\\uD83D\\uDD0C Shutting down WebSocket service...\");\n        if (this.io) {\n            // Notify all clients about shutdown\n            await this.broadcastSystemStatus({\n                type: \"shutdown\",\n                message: \"Server is shutting down for maintenance\",\n                estimatedDowntime: \"5 minutes\"\n            }, {\n                priority: \"high\"\n            });\n            // Give clients time to receive the message\n            await new Promise((resolve)=>setTimeout(resolve, 3000));\n            // Gracefully disconnect all clients\n            for (const [socketId, client] of this.connectedClients){\n                try {\n                    client.socket.emit(\"server:shutdown\", {\n                        message: \"Server shutting down\",\n                        reconnectIn: 10000\n                    });\n                    client.socket.disconnect(true);\n                } catch (error) {\n                    console.warn(`Error disconnecting client ${socketId}:`, error.message);\n                }\n            }\n            // Close the server\n            this.io.close();\n        }\n        if (this.server) {\n            this.server.close();\n        }\n        // Clear all data structures\n        this.connectedClients.clear();\n        this.roomSubscriptions.clear();\n        this.rateLimits.clear();\n        this.connectionHealth.clear();\n        this.messageQueue.clear();\n        if (this.gmpAlerts) {\n            this.gmpAlerts.clear();\n        }\n        console.log(\"✅ WebSocket service shutdown complete\");\n    }\n}\n// Export singleton instance\nconst webSocketService = new WebSocketService();\n// Initialize and start if not in test environment\nif (true) {\n    webSocketService.initialize();\n    if (process.env.AUTO_START_WEBSOCKET !== \"false\") {\n        webSocketService.start().catch((error)=>{\n            console.error(\"Failed to start WebSocket service:\", error);\n            process.exit(1);\n        });\n    }\n}\n// Graceful shutdown handlers\nprocess.on(\"SIGTERM\", async ()=>{\n    console.log(\"Received SIGTERM, shutting down WebSocket service gracefully...\");\n    await webSocketService.shutdown();\n    process.exit(0);\n});\nprocess.on(\"SIGINT\", async ()=>{\n    console.log(\"Received SIGINT, shutting down WebSocket service gracefully...\");\n    await webSocketService.shutdown();\n    process.exit(0);\n});\n// Unhandled error handling\nprocess.on(\"uncaughtException\", async (error)=>{\n    console.error(\"Uncaught Exception in WebSocket service:\", error);\n    webSocketService.lastErrorTime = Date.now();\n    webSocketService.metrics.errors++;\n    // Attempt graceful shutdown\n    try {\n        await webSocketService.shutdown();\n    } catch (shutdownError) {\n        console.error(\"Error during emergency shutdown:\", shutdownError);\n    }\n    process.exit(1);\n});\n// Export the io instance for use in other modules\nconst io = webSocketService.io;\n// Export default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (webSocketService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/websocket.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/object-assign","vendor-chunks/ms","vendor-chunks/uncrypto","vendor-chunks/engine.io","vendor-chunks/socket.io","vendor-chunks/socket.io-adapter","vendor-chunks/socket.io-parser","vendor-chunks/engine.io-parser","vendor-chunks/cookie","vendor-chunks/cors","vendor-chunks/@socket.io","vendor-chunks/vary","vendor-chunks/supports-color","vendor-chunks/base64id","vendor-chunks/has-flag"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgmp%2Flive%2Froute&page=%2Fapi%2Fgmp%2Flive%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgmp%2Flive%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();