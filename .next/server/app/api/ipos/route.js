/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ipos/route";
exports.ids = ["app/api/ipos/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "?c6f9":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?ae40":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4410":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?c757":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fipos%2Froute&page=%2Fapi%2Fipos%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fipos%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fipos%2Froute&page=%2Fapi%2Fipos%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fipos%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_ipos_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/ipos/route.js */ \"(rsc)/./src/app/api/ipos/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ipos/route\",\n        pathname: \"/api/ipos\",\n        filename: \"route\",\n        bundlePath: \"app/api/ipos/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\IPOs\\\\ipo-tracker\\\\src\\\\app\\\\api\\\\ipos\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_hp_OneDrive_Desktop_IPOs_ipo_tracker_src_app_api_ipos_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/ipos/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpcG9zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZpcG9zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGaXBvcyUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNocCU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0lQT3MlNUNpcG8tdHJhY2tlciU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDaHAlNUNPbmVEcml2ZSU1Q0Rlc2t0b3AlNUNJUE9zJTVDaXBvLXRyYWNrZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2tDO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXBvLXRyYWNrZXIvPzc4YmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcaHBcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxJUE9zXFxcXGlwby10cmFja2VyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGlwb3NcXFxccm91dGUuanNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2lwb3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pcG9zXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9pcG9zL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcaHBcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxJUE9zXFxcXGlwby10cmFja2VyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGlwb3NcXFxccm91dGUuanNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2lwb3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fipos%2Froute&page=%2Fapi%2Fipos%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fipos%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/ipos/route.js":
/*!***********************************!*\
  !*** ./src/app/api/ipos/route.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _lib_analytics_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/analytics.js */ \"(rsc)/./src/lib/analytics.js\");\n/* harmony import */ var _services_prediction_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/prediction-service.js */ \"(rsc)/./src/services/prediction-service.js\");\n\n\n\n\n\n// Advanced IPO search endpoint with full-text search, filters, and AI-powered suggestions\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        // Extract search parameters\n        const query = searchParams.get(\"q\") || searchParams.get(\"query\") || \"\";\n        const type = searchParams.get(\"type\") || \"all\"; // all, symbol, name, sector, registrar\n        const status = searchParams.get(\"status\");\n        const sector = searchParams.get(\"sector\");\n        const registrar = searchParams.get(\"registrar\");\n        const minPrice = parseFloat(searchParams.get(\"minPrice\"));\n        const maxPrice = parseFloat(searchParams.get(\"maxPrice\"));\n        const minIssueSize = parseFloat(searchParams.get(\"minIssueSize\"));\n        const maxIssueSize = parseFloat(searchParams.get(\"maxIssueSize\"));\n        const minGMP = parseFloat(searchParams.get(\"minGMP\"));\n        const maxGMP = parseFloat(searchParams.get(\"maxGMP\"));\n        const subscriptionMin = parseFloat(searchParams.get(\"subscriptionMin\"));\n        const subscriptionMax = parseFloat(searchParams.get(\"subscriptionMax\"));\n        const dateFrom = searchParams.get(\"dateFrom\");\n        const dateTo = searchParams.get(\"dateTo\");\n        const sortBy = searchParams.get(\"sortBy\") || \"relevance\";\n        const sortOrder = searchParams.get(\"sortOrder\") || \"desc\";\n        const page = parseInt(searchParams.get(\"page\")) || 1;\n        const limit = Math.min(parseInt(searchParams.get(\"limit\")) || 20, 100);\n        const fuzzy = searchParams.get(\"fuzzy\") !== \"false\"; // Default true\n        const suggestions = searchParams.get(\"suggestions\") === \"true\";\n        const highlight = searchParams.get(\"highlight\") !== \"false\"; // Default true\n        const includeAnalytics = searchParams.get(\"includeAnalytics\") === \"true\";\n        const includePredictions = searchParams.get(\"includePredictions\") === \"true\";\n        const advanced = searchParams.get(\"advanced\") === \"true\";\n        // Validate query length\n        if (query.length > 0 && query.length < 2) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Search query must be at least 2 characters long\"\n            }, {\n                status: 400\n            });\n        }\n        // Build cache key\n        const cacheKey = _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.key(\"SEARCH\", `ipos:${JSON.stringify({\n            query: query.toLowerCase(),\n            type,\n            status,\n            sector,\n            registrar,\n            minPrice,\n            maxPrice,\n            minIssueSize,\n            maxIssueSize,\n            minGMP,\n            maxGMP,\n            subscriptionMin,\n            subscriptionMax,\n            dateFrom,\n            dateTo,\n            sortBy,\n            sortOrder,\n            page,\n            limit,\n            fuzzy,\n            includeAnalytics,\n            includePredictions,\n            advanced\n        })}`);\n        // Try cache first\n        const cached = await _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.get(cacheKey);\n        if (cached) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                ...cached,\n                cached: true,\n                cacheTime: new Date().toISOString()\n            });\n        }\n        // Build search results\n        let searchResults;\n        if (query.trim() === \"\") {\n            // If no query, return filtered results\n            searchResults = await performFilteredSearch({\n                status,\n                sector,\n                registrar,\n                minPrice,\n                maxPrice,\n                minIssueSize,\n                maxIssueSize,\n                minGMP,\n                maxGMP,\n                subscriptionMin,\n                subscriptionMax,\n                dateFrom,\n                dateTo,\n                sortBy,\n                sortOrder,\n                page,\n                limit,\n                includeAnalytics,\n                includePredictions\n            });\n        } else {\n            // Perform text search\n            searchResults = await performTextSearch({\n                query,\n                type,\n                status,\n                sector,\n                registrar,\n                minPrice,\n                maxPrice,\n                minIssueSize,\n                maxIssueSize,\n                minGMP,\n                maxGMP,\n                subscriptionMin,\n                subscriptionMax,\n                dateFrom,\n                dateTo,\n                sortBy,\n                sortOrder,\n                page,\n                limit,\n                fuzzy,\n                highlight,\n                includeAnalytics,\n                includePredictions,\n                advanced\n            });\n        }\n        // Generate search suggestions if requested\n        let searchSuggestions = [];\n        if (suggestions && query.length >= 2) {\n            searchSuggestions = await generateSearchSuggestions(query, {\n                type,\n                status,\n                sector,\n                limit: 10\n            });\n        }\n        // Generate search analytics\n        const searchAnalytics = await generateSearchAnalytics(query, searchResults.data);\n        // Build comprehensive response\n        const response = {\n            success: true,\n            query: {\n                original: query,\n                processed: processSearchQuery(query),\n                type,\n                fuzzy,\n                advanced\n            },\n            results: searchResults.data,\n            pagination: searchResults.pagination,\n            suggestions: searchSuggestions,\n            analytics: searchAnalytics,\n            filters: {\n                applied: getAppliedFilters({\n                    status,\n                    sector,\n                    registrar,\n                    minPrice,\n                    maxPrice,\n                    minIssueSize,\n                    maxIssueSize,\n                    minGMP,\n                    maxGMP,\n                    subscriptionMin,\n                    subscriptionMax,\n                    dateFrom,\n                    dateTo\n                }),\n                available: await getAvailableFilters(searchResults.data)\n            },\n            sorting: {\n                sortBy,\n                sortOrder,\n                options: getSortingOptions()\n            },\n            metadata: {\n                searchTime: Date.now() - (searchResults.startTime || Date.now()),\n                totalResults: searchResults.pagination.totalCount,\n                hasMore: searchResults.pagination.hasNextPage,\n                relevanceScoring: query.length > 0,\n                highlighting: highlight && query.length > 0\n            },\n            timestamp: new Date().toISOString()\n        };\n        // Cache response for 5 minutes\n        await _lib_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.set(cacheKey, response, 300);\n        // Log search for analytics\n        logSearchQuery(request, {\n            query,\n            type,\n            resultCount: searchResults.data.length,\n            filters: response.filters.applied\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"GET /api/ipos/search error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Search failed\",\n            message:  true ? error.message : 0,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Advanced search with query processing and ML-powered ranking\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { queries, searchType = \"semantic\", rankingModel = \"relevance\", boost = {}, filters = {}, options = {} } = body;\n        // Validate complex search request\n        if (!queries || !Array.isArray(queries) && typeof queries !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Queries parameter is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Process multiple queries or complex query\n        const searchQueries = Array.isArray(queries) ? queries : [\n            queries\n        ];\n        const searchResults = await performAdvancedSearch({\n            queries: searchQueries,\n            searchType,\n            rankingModel,\n            boost,\n            filters,\n            options\n        });\n        // Generate advanced analytics\n        const advancedAnalytics = await generateAdvancedSearchAnalytics(searchQueries, searchResults);\n        const response = {\n            success: true,\n            searchType,\n            rankingModel,\n            queries: searchQueries,\n            results: searchResults.data,\n            pagination: searchResults.pagination,\n            analytics: advancedAnalytics,\n            relevanceScores: searchResults.relevanceScores,\n            queryProcessing: {\n                normalizedQueries: searchQueries.map((q)=>processSearchQuery(q)),\n                semanticAnalysis: searchType === \"semantic\" ? await performSemanticAnalysis(searchQueries) : null,\n                entityExtraction: await extractEntities(searchQueries)\n            },\n            recommendations: await generateSearchRecommendations(searchResults.data, searchQueries),\n            timestamp: new Date().toISOString()\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"POST /api/ipos/search error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Advanced search failed\",\n            message:  true ? error.message : 0,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Perform filtered search without text query\nasync function performFilteredSearch(params) {\n    const startTime = Date.now();\n    try {\n        const { status, sector, registrar, minPrice, maxPrice, minIssueSize, maxIssueSize, minGMP, maxGMP, subscriptionMin, subscriptionMax, dateFrom, dateTo, sortBy, sortOrder, page, limit, includeAnalytics, includePredictions } = params;\n        // Build where clause\n        const whereClause = {\n            isActive: true\n        };\n        // Apply basic filters\n        if (status && status !== \"all\") {\n            whereClause.status = status.includes(\",\") ? {\n                in: status.split(\",\")\n            } : status;\n        }\n        if (sector) {\n            whereClause.sector = sector.includes(\",\") ? {\n                in: sector.split(\",\")\n            } : {\n                contains: sector,\n                mode: \"insensitive\"\n            };\n        }\n        if (registrar) {\n            whereClause.registrar = {\n                contains: registrar,\n                mode: \"insensitive\"\n            };\n        }\n        // Price range filters\n        if (minPrice && !isNaN(minPrice)) {\n            whereClause.maxPrice = {\n                gte: minPrice\n            };\n        }\n        if (maxPrice && !isNaN(maxPrice)) {\n            whereClause.minPrice = {\n                lte: maxPrice\n            };\n        }\n        // Issue size filters\n        if (minIssueSize && !isNaN(minIssueSize)) {\n            whereClause.issueSize = {\n                ...whereClause.issueSize || {},\n                gte: minIssueSize * 10000000\n            };\n        }\n        if (maxIssueSize && !isNaN(maxIssueSize)) {\n            whereClause.issueSize = {\n                ...whereClause.issueSize || {},\n                lte: maxIssueSize * 10000000\n            };\n        }\n        // Date filters\n        if (dateFrom || dateTo) {\n            const dateFilter = {};\n            if (dateFrom) dateFilter.gte = new Date(dateFrom);\n            if (dateTo) dateFilter.lte = new Date(dateTo);\n            whereClause.openDate = dateFilter;\n        }\n        // Include clause for related data\n        // Add this at the beginning of your performFilteredSearch function\n        const includeClause = {\n            gmpData: {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 5\n            },\n            subscriptionData: {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 5\n            },\n            allotmentData: true,\n            analytics: true,\n            watchlists: true,\n            alerts: true\n        };\n        // Add GMP data for GMP-based filtering\n        if (minGMP || maxGMP || subscriptionMin || subscriptionMax) {\n            includeClause.gmp = {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 1\n            };\n            includeClause.subscription = {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 5\n            };\n        }\n        if (includeAnalytics) {\n            includeClause.analytics = true;\n        }\n        // Build order clause\n        const orderBy = buildOrderClause(sortBy, sortOrder);\n        // Calculate pagination\n        const offset = (page - 1) * limit;\n        // Execute query\n        const [ipos, totalCount] = await Promise.all([\n            _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: whereClause,\n                include: includeClause,\n                orderBy,\n                skip: offset,\n                take: limit\n            }),\n            _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.count({\n                where: whereClause\n            })\n        ]);\n        // Post-process results for GMP and subscription filters\n        let filteredResults = ipos;\n        if (minGMP || maxGMP || subscriptionMin || subscriptionMax) {\n            filteredResults = await applyAdvancedFilters(ipos, {\n                minGMP,\n                maxGMP,\n                subscriptionMin,\n                subscriptionMax\n            });\n        }\n        // Process results\n        const processedResults = await Promise.all(filteredResults.map((ipo)=>processSearchResult(ipo, {\n                includeAnalytics,\n                includePredictions,\n                highlight: false,\n                relevanceScore: 1.0\n            })));\n        return {\n            data: processedResults,\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(totalCount / limit),\n                totalCount,\n                limit,\n                hasNextPage: page < Math.ceil(totalCount / limit),\n                hasPrevPage: page > 1\n            },\n            startTime\n        };\n    } catch (error) {\n        console.error(\"Error in performFilteredSearch:\", error);\n        throw error;\n    }\n}\n// Perform text-based search with relevance scoring\nasync function performTextSearch(params) {\n    const startTime = Date.now();\n    try {\n        const { query, type, status, sector, registrar, minPrice, maxPrice, minIssueSize, maxIssueSize, minGMP, maxGMP, subscriptionMin, subscriptionMax, dateFrom, dateTo, sortBy, sortOrder, page, limit, fuzzy, highlight, includeAnalytics, includePredictions, advanced } = params;\n        // Process and normalize query\n        const processedQuery = processSearchQuery(query);\n        const searchTerms = extractSearchTerms(processedQuery);\n        // Build base where clause\n        const baseWhereClause = {\n            isActive: true\n        };\n        // Apply additional filters\n        applyAdditionalFilters(baseWhereClause, {\n            status,\n            sector,\n            registrar,\n            minPrice,\n            maxPrice,\n            minIssueSize,\n            maxIssueSize,\n            dateFrom,\n            dateTo\n        });\n        // Build search conditions based on search type\n        let searchConditions = [];\n        switch(type){\n            case \"symbol\":\n                searchConditions = buildSymbolSearch(searchTerms, fuzzy);\n                break;\n            case \"name\":\n                searchConditions = buildNameSearch(searchTerms, fuzzy);\n                break;\n            case \"sector\":\n                searchConditions = buildSectorSearch(searchTerms, fuzzy);\n                break;\n            case \"registrar\":\n                searchConditions = buildRegistrarSearch(searchTerms, fuzzy);\n                break;\n            default:\n                searchConditions = buildUniversalSearch(searchTerms, fuzzy);\n        }\n        // Combine base filters with search conditions\n        const whereClause = {\n            ...baseWhereClause,\n            AND: [\n                {\n                    OR: searchConditions\n                }\n            ]\n        };\n        // Include related data\n        const includeClause = {\n            categories: true,\n            gmp: {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 5\n            },\n            subscription: {\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 5\n            }\n        };\n        if (includeAnalytics) {\n            includeClause.analytics = true;\n        }\n        // Execute search\n        const [searchResults, totalCount] = await Promise.all([\n            _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: whereClause,\n                include: includeClause\n            }),\n            _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.count({\n                where: whereClause\n            })\n        ]);\n        // Apply advanced filters if needed\n        let filteredResults = searchResults;\n        if (minGMP || maxGMP || subscriptionMin || subscriptionMax) {\n            filteredResults = await applyAdvancedFilters(searchResults, {\n                minGMP,\n                maxGMP,\n                subscriptionMin,\n                subscriptionMax\n            });\n        }\n        // Calculate relevance scores\n        const scoredResults = filteredResults.map((ipo)=>{\n            const relevanceScore = calculateRelevanceScore(ipo, searchTerms, type);\n            return {\n                ...ipo,\n                relevanceScore\n            };\n        });\n        // Sort results\n        let sortedResults;\n        if (sortBy === \"relevance\") {\n            sortedResults = scoredResults.sort((a, b)=>sortOrder === \"desc\" ? b.relevanceScore - a.relevanceScore : a.relevanceScore - b.relevanceScore);\n        } else {\n            const orderBy = buildOrderClause(sortBy, sortOrder);\n            sortedResults = sortResults(scoredResults, orderBy);\n        }\n        // Apply pagination\n        const offset = (page - 1) * limit;\n        const paginatedResults = sortedResults.slice(offset, offset + limit);\n        // Process final results\n        const processedResults = await Promise.all(paginatedResults.map((ipo)=>processSearchResult(ipo, {\n                includeAnalytics,\n                includePredictions,\n                highlight,\n                searchTerms,\n                relevanceScore: ipo.relevanceScore\n            })));\n        return {\n            data: processedResults,\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(filteredResults.length / limit),\n                totalCount: filteredResults.length,\n                originalCount: totalCount,\n                limit,\n                hasNextPage: page < Math.ceil(filteredResults.length / limit),\n                hasPrevPage: page > 1\n            },\n            startTime\n        };\n    } catch (error) {\n        console.error(\"Error in performTextSearch:\", error);\n        throw error;\n    }\n}\n// Perform advanced search with ML ranking\nasync function performAdvancedSearch(params) {\n    const startTime = Date.now();\n    try {\n        const { queries, searchType, rankingModel, boost, filters, options } = params;\n        // Process all queries\n        const processedQueries = queries.map((q)=>processSearchQuery(q));\n        const allSearchTerms = processedQueries.flatMap((q)=>extractSearchTerms(q));\n        const uniqueTerms = [\n            ...new Set(allSearchTerms)\n        ];\n        // Build advanced search conditions\n        const searchConditions = buildAdvancedSearchConditions(processedQueries, searchType);\n        // Apply filters\n        const whereClause = {\n            isActive: true,\n            AND: [\n                {\n                    OR: searchConditions\n                },\n                ...buildAdvancedFilters(filters)\n            ]\n        };\n        // Execute search with comprehensive includes\n        const searchResults = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n            where: whereClause,\n            include: {\n                categories: true,\n                gmp: {\n                    orderBy: {\n                        timestamp: \"desc\"\n                    },\n                    take: 10\n                },\n                subscription: {\n                    orderBy: {\n                        timestamp: \"desc\"\n                    },\n                    take: 10\n                },\n                analytics: true,\n                allotmentResults: {\n                    take: 5,\n                    select: {\n                        category: true,\n                        allotmentStatus: true,\n                        allottedQuantity: true\n                    }\n                }\n            }\n        });\n        // Apply ML-powered ranking\n        const rankedResults = await applyMLRanking(searchResults, {\n            queries: processedQueries,\n            rankingModel,\n            boost,\n            searchType\n        });\n        // Generate relevance scores\n        const relevanceScores = rankedResults.map((ipo, index)=>({\n                ipoId: ipo.id,\n                symbol: ipo.symbol,\n                score: ipo.mlScore || 1.0,\n                rank: index + 1,\n                factors: ipo.rankingFactors || {}\n            }));\n        // Apply pagination\n        const page = options.page || 1;\n        const limit = Math.min(options.limit || 20, 100);\n        const offset = (page - 1) * limit;\n        const paginatedResults = rankedResults.slice(offset, offset + limit);\n        // Process final results\n        const processedResults = await Promise.all(paginatedResults.map((ipo)=>processAdvancedSearchResult(ipo, {\n                queries: processedQueries,\n                searchType,\n                highlight: options.highlight !== false,\n                includeAnalytics: options.includeAnalytics === true,\n                includePredictions: options.includePredictions === true\n            })));\n        return {\n            data: processedResults,\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(rankedResults.length / limit),\n                totalCount: rankedResults.length,\n                limit,\n                hasNextPage: page < Math.ceil(rankedResults.length / limit),\n                hasPrevPage: page > 1\n            },\n            relevanceScores,\n            startTime\n        };\n    } catch (error) {\n        console.error(\"Error in performAdvancedSearch:\", error);\n        throw error;\n    }\n}\n// Process search query and normalize\nfunction processSearchQuery(query) {\n    if (!query || typeof query !== \"string\") return \"\";\n    return query.toLowerCase().trim().replace(/[^\\w\\s]/g, \" \") // Remove special characters\n    .replace(/\\s+/g, \" \") // Normalize whitespace\n    .trim();\n}\n// Extract search terms from processed query\nfunction extractSearchTerms(processedQuery) {\n    if (!processedQuery) return [];\n    const terms = processedQuery.split(\" \").filter((term)=>term.length >= 2);\n    // Add partial terms for fuzzy matching\n    const expandedTerms = [\n        ...terms\n    ];\n    terms.forEach((term)=>{\n        if (term.length >= 4) {\n            expandedTerms.push(term.substring(0, term.length - 1)); // Partial match\n        }\n    });\n    return [\n        ...new Set(expandedTerms)\n    ];\n}\n// Build search conditions for different types\nfunction buildSymbolSearch(searchTerms, fuzzy) {\n    const conditions = [];\n    searchTerms.forEach((term)=>{\n        if (fuzzy) {\n            conditions.push({\n                symbol: {\n                    contains: term,\n                    mode: \"insensitive\"\n                }\n            });\n        } else {\n            conditions.push({\n                symbol: {\n                    startsWith: term.toUpperCase()\n                }\n            });\n        }\n    });\n    return conditions;\n}\nfunction buildNameSearch(searchTerms, fuzzy) {\n    const conditions = [];\n    searchTerms.forEach((term)=>{\n        conditions.push({\n            name: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        });\n    });\n    return conditions;\n}\nfunction buildSectorSearch(searchTerms, fuzzy) {\n    const conditions = [];\n    searchTerms.forEach((term)=>{\n        conditions.push({\n            sector: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        });\n    });\n    return conditions;\n}\nfunction buildRegistrarSearch(searchTerms, fuzzy) {\n    const conditions = [];\n    searchTerms.forEach((term)=>{\n        conditions.push({\n            registrar: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        });\n    });\n    return conditions;\n}\nfunction buildUniversalSearch(searchTerms, fuzzy) {\n    const conditions = [];\n    searchTerms.forEach((term)=>{\n        conditions.push({\n            symbol: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        }, {\n            name: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        }, {\n            sector: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        }, {\n            registrar: {\n                contains: term,\n                mode: \"insensitive\"\n            }\n        });\n        // Add lead managers search\n        if (term.length >= 3) {\n            conditions.push({\n                leadManagers: {\n                    array_contains: [\n                        term\n                    ]\n                }\n            });\n        }\n    });\n    return conditions;\n}\n// Calculate relevance score for search results\nfunction calculateRelevanceScore(ipo, searchTerms, searchType) {\n    let score = 0;\n    const weights = {\n        symbol: 10,\n        name: 8,\n        sector: 5,\n        registrar: 3,\n        leadManagers: 2\n    };\n    searchTerms.forEach((term)=>{\n        const termRegex = new RegExp(term, \"i\");\n        // Symbol matching (highest weight)\n        if (ipo.symbol && termRegex.test(ipo.symbol)) {\n            score += weights.symbol;\n            if (ipo.symbol.toLowerCase().startsWith(term.toLowerCase())) {\n                score += weights.symbol * 0.5; // Bonus for prefix match\n            }\n        }\n        // Name matching\n        if (ipo.name && termRegex.test(ipo.name)) {\n            score += weights.name;\n            const nameWords = ipo.name.toLowerCase().split(\" \");\n            if (nameWords.some((word)=>word.startsWith(term.toLowerCase()))) {\n                score += weights.name * 0.3; // Bonus for word start match\n            }\n        }\n        // Sector matching\n        if (ipo.sector && termRegex.test(ipo.sector)) {\n            score += weights.sector;\n        }\n        // Registrar matching\n        if (ipo.registrar && termRegex.test(ipo.registrar)) {\n            score += weights.registrar;\n        }\n        // Lead managers matching\n        if (ipo.leadManagers && Array.isArray(ipo.leadManagers)) {\n            ipo.leadManagers.forEach((manager)=>{\n                if (termRegex.test(manager)) {\n                    score += weights.leadManagers;\n                }\n            });\n        }\n    });\n    // Apply search type boost\n    if (searchType !== \"all\") {\n        const typeBoosts = {\n            symbol: ipo.symbol ? 1.5 : 0.5,\n            name: ipo.name ? 1.3 : 0.7,\n            sector: ipo.sector ? 1.2 : 0.8,\n            registrar: ipo.registrar ? 1.1 : 0.9\n        };\n        score *= typeBoosts[searchType] || 1.0;\n    }\n    // Apply status boost (open IPOs get higher relevance)\n    const statusBoosts = {\n        open: 1.5,\n        upcoming: 1.2,\n        closed: 1.0,\n        listed: 0.8\n    };\n    score *= statusBoosts[ipo.status] || 1.0;\n    return Math.round(score * 100) / 100;\n}\n// Apply additional filters to where clause\nfunction applyAdditionalFilters(whereClause, filters) {\n    const { status, sector, registrar, minPrice, maxPrice, minIssueSize, maxIssueSize, dateFrom, dateTo } = filters;\n    if (status && status !== \"all\") {\n        whereClause.status = status.includes(\",\") ? {\n            in: status.split(\",\")\n        } : status;\n    }\n    if (sector) {\n        whereClause.sector = sector.includes(\",\") ? {\n            in: sector.split(\",\")\n        } : {\n            contains: sector,\n            mode: \"insensitive\"\n        };\n    }\n    if (registrar) {\n        whereClause.registrar = {\n            contains: registrar,\n            mode: \"insensitive\"\n        };\n    }\n    if (minPrice && !isNaN(minPrice)) {\n        whereClause.maxPrice = {\n            gte: minPrice\n        };\n    }\n    if (maxPrice && !isNaN(maxPrice)) {\n        whereClause.minPrice = {\n            lte: maxPrice\n        };\n    }\n    if (minIssueSize && !isNaN(minIssueSize)) {\n        whereClause.issueSize = {\n            ...whereClause.issueSize || {},\n            gte: minIssueSize * 10000000\n        };\n    }\n    if (maxIssueSize && !isNaN(maxIssueSize)) {\n        whereClause.issueSize = {\n            ...whereClause.issueSize || {},\n            lte: maxIssueSize * 10000000\n        };\n    }\n    if (dateFrom || dateTo) {\n        const dateFilter = {};\n        if (dateFrom) dateFilter.gte = new Date(dateFrom);\n        if (dateTo) dateFilter.lte = new Date(dateTo);\n        whereClause.openDate = dateFilter;\n    }\n}\n// Apply advanced filters (GMP, subscription)\nasync function applyAdvancedFilters(ipos, filters) {\n    const { minGMP, maxGMP, subscriptionMin, subscriptionMax } = filters;\n    return ipos.filter((ipo)=>{\n        // GMP filtering\n        if (minGMP || maxGMP) {\n            const latestGMP = ipo.gmp?.[0];\n            if (!latestGMP) return false;\n            if (minGMP && latestGMP.value < minGMP) return false;\n            if (maxGMP && latestGMP.value > maxGMP) return false;\n        }\n        // Subscription filtering\n        if (subscriptionMin || subscriptionMax) {\n            if (!ipo.subscription || ipo.subscription.length === 0) return false;\n            const maxSubscription = Math.max(...ipo.subscription.map((s)=>s.subscriptionRatio));\n            if (subscriptionMin && maxSubscription < subscriptionMin) return false;\n            if (subscriptionMax && maxSubscription > subscriptionMax) return false;\n        }\n        return true;\n    });\n}\n// Build order clause for sorting\nfunction buildOrderClause(sortBy, sortOrder) {\n    const orderDirection = sortOrder === \"asc\" ? \"asc\" : \"desc\";\n    switch(sortBy){\n        case \"openDate\":\n            return {\n                openDate: orderDirection\n            };\n        case \"closeDate\":\n            return {\n                closeDate: orderDirection\n            };\n        case \"listingDate\":\n            return {\n                listingDate: orderDirection\n            };\n        case \"issueSize\":\n            return {\n                issueSize: orderDirection\n            };\n        case \"maxPrice\":\n            return {\n                maxPrice: orderDirection\n            };\n        case \"name\":\n            return {\n                name: orderDirection\n            };\n        case \"symbol\":\n            return {\n                symbol: orderDirection\n            };\n        case \"status\":\n            return {\n                status: orderDirection\n            };\n        case \"sector\":\n            return {\n                sector: orderDirection\n            };\n        case \"createdAt\":\n            return {\n                createdAt: orderDirection\n            };\n        default:\n            return {\n                updatedAt: \"desc\"\n            };\n    }\n}\n// Sort results manually (for relevance-based sorting)\nfunction sortResults(results, orderBy) {\n    if (!orderBy || typeof orderBy !== \"object\") return results;\n    const [field, direction] = Object.entries(orderBy)[0];\n    return results.sort((a, b)=>{\n        let aVal = a[field];\n        let bVal = b[field];\n        // Handle different data types\n        if (aVal instanceof Date) aVal = aVal.getTime();\n        if (bVal instanceof Date) bVal = bVal.getTime();\n        if (typeof aVal === \"string\") aVal = aVal.toLowerCase();\n        if (typeof bVal === \"string\") bVal = bVal.toLowerCase();\n        // Handle null/undefined values\n        if (aVal == null && bVal == null) return 0;\n        if (aVal == null) return direction === \"asc\" ? -1 : 1;\n        if (bVal == null) return direction === \"asc\" ? 1 : -1;\n        // Compare values\n        if (aVal < bVal) return direction === \"asc\" ? -1 : 1;\n        if (aVal > bVal) return direction === \"asc\" ? 1 : -1;\n        return 0;\n    });\n}\n// Process search result with highlighting and enhancements\nasync function processSearchResult(ipo, options) {\n    const { includeAnalytics, includePredictions, highlight, searchTerms, relevanceScore } = options;\n    // Base result\n    const result = {\n        id: ipo.id,\n        symbol: ipo.symbol,\n        name: ipo.name,\n        sector: ipo.sector,\n        status: ipo.status,\n        openDate: ipo.openDate,\n        closeDate: ipo.closeDate,\n        listingDate: ipo.listingDate,\n        minPrice: ipo.minPrice,\n        maxPrice: ipo.maxPrice,\n        lotSize: ipo.lotSize,\n        issueSize: ipo.issueSize?.toString(),\n        registrar: ipo.registrar,\n        leadManagers: ipo.leadManagers,\n        categories: ipo.categories,\n        relevanceScore,\n        // Current metrics\n        currentMetrics: {\n            gmp: ipo.gmp?.[0] ? {\n                value: ipo.gmp[0].value,\n                percentage: ipo.gmp[0].percentage,\n                timestamp: ipo.gmp[0].timestamp\n            } : null,\n            subscription: getLatestSubscription(ipo.subscription)\n        }\n    };\n    // Add highlighting if requested\n    if (highlight && searchTerms && searchTerms.length > 0) {\n        result.highlights = generateHighlights(ipo, searchTerms);\n    }\n    // Add analytics if requested\n    if (includeAnalytics && ipo.analytics) {\n        result.analytics = {\n            riskScore: ipo.analytics.riskScore,\n            predictedListingGain: ipo.analytics.predictedListingGain,\n            avgGMP: ipo.analytics.avgGMP,\n            finalSubscription: ipo.analytics.finalSubscription\n        };\n    }\n    // Add predictions if requested\n    if (includePredictions) {\n        try {\n            const [listingGain, marketSentiment] = await Promise.allSettled([\n                _services_prediction_service_js__WEBPACK_IMPORTED_MODULE_4__.predictionService.predictListingGain(ipo.id),\n                _services_prediction_service_js__WEBPACK_IMPORTED_MODULE_4__.predictionService.predictMarketSentiment(ipo.id)\n            ]);\n            result.predictions = {\n                listingGain: listingGain.status === \"fulfilled\" ? listingGain.value : null,\n                marketSentiment: marketSentiment.status === \"fulfilled\" ? marketSentiment.value : null\n            };\n        } catch (error) {\n            result.predictions = null;\n        }\n    }\n    return result;\n}\n// Generate text highlights for search terms\nfunction generateHighlights(ipo, searchTerms) {\n    const highlights = {};\n    const highlightText = (text, terms)=>{\n        if (!text || !terms.length) return text;\n        let highlightedText = text;\n        terms.forEach((term)=>{\n            const regex = new RegExp(`(${term})`, \"gi\");\n            highlightedText = highlightedText.replace(regex, \"<mark>$1</mark>\");\n        });\n        return highlightedText;\n    };\n    // Highlight different fields\n    if (ipo.symbol) {\n        const highlighted = highlightText(ipo.symbol, searchTerms);\n        if (highlighted !== ipo.symbol) {\n            highlights.symbol = highlighted;\n        }\n    }\n    if (ipo.name) {\n        const highlighted = highlightText(ipo.name, searchTerms);\n        if (highlighted !== ipo.name) {\n            highlights.name = highlighted;\n        }\n    }\n    if (ipo.sector) {\n        const highlighted = highlightText(ipo.sector, searchTerms);\n        if (highlighted !== ipo.sector) {\n            highlights.sector = highlighted;\n        }\n    }\n    if (ipo.registrar) {\n        const highlighted = highlightText(ipo.registrar, searchTerms);\n        if (highlighted !== ipo.registrar) {\n            highlights.registrar = highlighted;\n        }\n    }\n    return highlights;\n}\n// Get latest subscription data\nfunction getLatestSubscription(subscriptionData) {\n    if (!subscriptionData || subscriptionData.length === 0) return null;\n    const latest = subscriptionData.reduce((latest, current)=>{\n        return current.timestamp > latest.timestamp ? current : latest;\n    });\n    return {\n        category: latest.category,\n        subscriptionRatio: latest.subscriptionRatio,\n        quantity: latest.quantity?.toString(),\n        bidCount: latest.bidCount,\n        timestamp: latest.timestamp\n    };\n}\n// Generate search suggestions\nasync function generateSearchSuggestions(query, options) {\n    try {\n        const { type, status, sector, limit } = options;\n        const processedQuery = processSearchQuery(query);\n        if (processedQuery.length < 2) return [];\n        // Get suggestions from different sources\n        const suggestions = [];\n        // Symbol suggestions\n        const symbolSuggestions = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n            where: {\n                isActive: true,\n                symbol: {\n                    contains: processedQuery.toUpperCase()\n                },\n                ...status && status !== \"all\" ? {\n                    status\n                } : {}\n            },\n            select: {\n                symbol: true,\n                name: true\n            },\n            take: 5\n        });\n        symbolSuggestions.forEach((ipo)=>{\n            suggestions.push({\n                type: \"symbol\",\n                value: ipo.symbol,\n                display: `${ipo.symbol} - ${ipo.name}`,\n                category: \"Symbol\"\n            });\n        });\n        // Name suggestions\n        const nameSuggestions = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n            where: {\n                isActive: true,\n                name: {\n                    contains: processedQuery,\n                    mode: \"insensitive\"\n                },\n                ...status && status !== \"all\" ? {\n                    status\n                } : {}\n            },\n            select: {\n                symbol: true,\n                name: true\n            },\n            take: 5\n        });\n        nameSuggestions.forEach((ipo)=>{\n            if (!suggestions.some((s)=>s.value === ipo.symbol)) {\n                suggestions.push({\n                    type: \"name\",\n                    value: ipo.name,\n                    display: `${ipo.name} (${ipo.symbol})`,\n                    category: \"Company\"\n                });\n            }\n        });\n        // Sector suggestions\n        const sectorSuggestions = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.groupBy({\n            by: [\n                \"sector\"\n            ],\n            where: {\n                isActive: true,\n                sector: {\n                    contains: processedQuery,\n                    mode: \"insensitive\"\n                },\n                ...status && status !== \"all\" ? {\n                    status\n                } : {}\n            },\n            _count: {\n                sector: true\n            },\n            take: 3\n        });\n        sectorSuggestions.forEach((item)=>{\n            if (item.sector) {\n                suggestions.push({\n                    type: \"sector\",\n                    value: item.sector,\n                    display: `${item.sector} (${item._count.sector} IPOs)`,\n                    category: \"Sector\"\n                });\n            }\n        });\n        // Registrar suggestions\n        const registrarSuggestions = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.groupBy({\n            by: [\n                \"registrar\"\n            ],\n            where: {\n                isActive: true,\n                registrar: {\n                    contains: processedQuery,\n                    mode: \"insensitive\"\n                },\n                ...status && status !== \"all\" ? {\n                    status\n                } : {}\n            },\n            _count: {\n                registrar: true\n            },\n            take: 3\n        });\n        registrarSuggestions.forEach((item)=>{\n            if (item.registrar) {\n                suggestions.push({\n                    type: \"registrar\",\n                    value: item.registrar,\n                    display: `${item.registrar} (${item._count.registrar} IPOs)`,\n                    category: \"Registrar\"\n                });\n            }\n        });\n        // Sort by relevance and limit\n        return suggestions.sort((a, b)=>{\n            const typeOrder = {\n                symbol: 0,\n                name: 1,\n                sector: 2,\n                registrar: 3\n            };\n            return typeOrder[a.type] - typeOrder[b.type];\n        }).slice(0, limit);\n    } catch (error) {\n        console.error(\"Error generating search suggestions:\", error);\n        return [];\n    }\n}\n// Generate search analytics\nasync function generateSearchAnalytics(query, results) {\n    try {\n        const analytics = {\n            query: {\n                length: query.length,\n                wordCount: query.split(\" \").filter((w)=>w.length > 0).length,\n                hasNumbers: /\\d/.test(query),\n                hasSpecialChars: /[^a-zA-Z0-9\\s]/.test(query)\n            },\n            results: {\n                total: results.length,\n                byStatus: {},\n                bySector: {},\n                relevanceDistribution: {\n                    high: 0,\n                    medium: 0,\n                    low: 0\n                }\n            },\n            performance: {\n                searchTime: Date.now() % 1000,\n                cacheHit: false\n            }\n        };\n        // Analyze results\n        if (results.length > 0) {\n            const maxRelevance = Math.max(...results.map((r)=>r.relevanceScore || 0));\n            results.forEach((result)=>{\n                // Status distribution\n                analytics.results.byStatus[result.status] = (analytics.results.byStatus[result.status] || 0) + 1;\n                // Sector distribution\n                if (result.sector) {\n                    analytics.results.bySector[result.sector] = (analytics.results.bySector[result.sector] || 0) + 1;\n                }\n                // Relevance distribution\n                const relevancePercent = maxRelevance > 0 ? (result.relevanceScore || 0) / maxRelevance : 0;\n                if (relevancePercent > 0.75) {\n                    analytics.results.relevanceDistribution.high++;\n                } else if (relevancePercent > 0.25) {\n                    analytics.results.relevanceDistribution.medium++;\n                } else {\n                    analytics.results.relevanceDistribution.low++;\n                }\n            });\n        }\n        return analytics;\n    } catch (error) {\n        console.error(\"Error generating search analytics:\", error);\n        return {\n            error: \"Analytics generation failed\"\n        };\n    }\n}\n// Get applied filters summary\nfunction getAppliedFilters(filters) {\n    const applied = [];\n    Object.entries(filters).forEach(([key, value])=>{\n        if (value !== null && value !== undefined && value !== \"\") {\n            applied.push({\n                type: key,\n                value,\n                display: formatFilterDisplay(key, value)\n            });\n        }\n    });\n    return applied;\n}\n// Get available filters based on current results\nasync function getAvailableFilters(results) {\n    const available = {\n        status: {},\n        sector: {},\n        registrar: {},\n        priceRange: {\n            min: null,\n            max: null\n        },\n        issueSizeRange: {\n            min: null,\n            max: null\n        }\n    };\n    results.forEach((result)=>{\n        // Status options\n        available.status[result.status] = (available.status[result.status] || 0) + 1;\n        // Sector options\n        if (result.sector) {\n            available.sector[result.sector] = (available.sector[result.sector] || 0) + 1;\n        }\n        // Registrar options\n        if (result.registrar) {\n            available.registrar[result.registrar] = (available.registrar[result.registrar] || 0) + 1;\n        }\n        // Price range\n        if (result.minPrice) {\n            available.priceRange.min = available.priceRange.min ? Math.min(available.priceRange.min, result.minPrice) : result.minPrice;\n        }\n        if (result.maxPrice) {\n            available.priceRange.max = available.priceRange.max ? Math.max(available.priceRange.max, result.maxPrice) : result.maxPrice;\n        }\n        // Issue size range\n        if (result.issueSize) {\n            const sizeInCrores = parseInt(result.issueSize) / 10000000;\n            available.issueSizeRange.min = available.issueSizeRange.min ? Math.min(available.issueSizeRange.min, sizeInCrores) : sizeInCrores;\n            available.issueSizeRange.max = available.issueSizeRange.max ? Math.max(available.issueSizeRange.max, sizeInCrores) : sizeInCrores;\n        }\n    });\n    return available;\n}\n// Get sorting options\nfunction getSortingOptions() {\n    return [\n        {\n            value: \"relevance\",\n            label: \"Relevance\",\n            description: \"Best match first\"\n        },\n        {\n            value: \"openDate\",\n            label: \"Open Date\",\n            description: \"Sort by IPO opening date\"\n        },\n        {\n            value: \"closeDate\",\n            label: \"Close Date\",\n            description: \"Sort by IPO closing date\"\n        },\n        {\n            value: \"issueSize\",\n            label: \"Issue Size\",\n            description: \"Sort by IPO issue size\"\n        },\n        {\n            value: \"maxPrice\",\n            label: \"Price\",\n            description: \"Sort by maximum price\"\n        },\n        {\n            value: \"name\",\n            label: \"Company Name\",\n            description: \"Alphabetical by company name\"\n        },\n        {\n            value: \"symbol\",\n            label: \"Symbol\",\n            description: \"Alphabetical by symbol\"\n        },\n        {\n            value: \"status\",\n            label: \"Status\",\n            description: \"Group by IPO status\"\n        },\n        {\n            value: \"sector\",\n            label: \"Sector\",\n            description: \"Group by sector\"\n        }\n    ];\n}\n// Format filter display text\nfunction formatFilterDisplay(key, value) {\n    switch(key){\n        case \"minPrice\":\n            return `Min Price: ₹${value}`;\n        case \"maxPrice\":\n            return `Max Price: ₹${value}`;\n        case \"minIssueSize\":\n            return `Min Issue Size: ₹${value} Cr`;\n        case \"maxIssueSize\":\n            return `Max Issue Size: ₹${value} Cr`;\n        case \"minGMP\":\n            return `Min GMP: ₹${value}`;\n        case \"maxGMP\":\n            return `Max GMP: ₹${value}`;\n        case \"subscriptionMin\":\n            return `Min Subscription: ${value}x`;\n        case \"subscriptionMax\":\n            return `Max Subscription: ${value}x`;\n        case \"dateFrom\":\n            return `From: ${new Date(value).toLocaleDateString()}`;\n        case \"dateTo\":\n            return `To: ${new Date(value).toLocaleDateString()}`;\n        default:\n            return `${key}: ${value}`;\n    }\n}\n// Advanced search functions (ML-powered)\nasync function buildAdvancedSearchConditions(queries, searchType) {\n    // Implementation would depend on the search type\n    const conditions = [];\n    queries.forEach((query)=>{\n        const terms = extractSearchTerms(query);\n        if (searchType === \"semantic\") {\n            // Add semantic search conditions\n            conditions.push(...buildSemanticSearch(terms));\n        } else {\n            // Add traditional search conditions\n            conditions.push(...buildUniversalSearch(terms, true));\n        }\n    });\n    return conditions;\n}\nfunction buildSemanticSearch(terms) {\n    // Mock semantic search - in production, this would use NLP models\n    const semanticConditions = [];\n    terms.forEach((term)=>{\n        // Add related terms based on semantic similarity\n        const relatedTerms = getSemanticallySimilarTerms(term);\n        relatedTerms.forEach((relatedTerm)=>{\n            semanticConditions.push({\n                name: {\n                    contains: relatedTerm,\n                    mode: \"insensitive\"\n                }\n            }, {\n                sector: {\n                    contains: relatedTerm,\n                    mode: \"insensitive\"\n                }\n            });\n        });\n    });\n    return semanticConditions;\n}\nfunction getSemanticallySimilarTerms(term) {\n    // Mock semantic similarity - in production, use word embeddings\n    const synonyms = {\n        tech: [\n            \"technology\",\n            \"software\",\n            \"digital\",\n            \"IT\"\n        ],\n        bank: [\n            \"banking\",\n            \"financial\",\n            \"finance\"\n        ],\n        pharma: [\n            \"pharmaceutical\",\n            \"drug\",\n            \"medicine\"\n        ],\n        auto: [\n            \"automobile\",\n            \"automotive\",\n            \"vehicle\"\n        ]\n    };\n    return synonyms[term.toLowerCase()] || [\n        term\n    ];\n}\nasync function applyMLRanking(results, params) {\n    // Mock ML ranking - in production, use trained models\n    return results.map((ipo, index)=>{\n        const mlScore = calculateMLScore(ipo, params);\n        return {\n            ...ipo,\n            mlScore,\n            rankingFactors: {\n                textRelevance: 0.7,\n                popularity: 0.2,\n                recency: 0.1\n            }\n        };\n    }).sort((a, b)=>b.mlScore - a.mlScore);\n}\nfunction calculateMLScore(ipo, params) {\n    // Mock ML scoring\n    let score = Math.random() * 100;\n    // Boost for exact matches\n    if (params.queries.some((q)=>ipo.symbol.toLowerCase().includes(q.toLowerCase()) || ipo.name.toLowerCase().includes(q.toLowerCase()))) {\n        score *= 1.5;\n    }\n    // Status boost\n    const statusBoosts = {\n        open: 1.3,\n        upcoming: 1.1,\n        closed: 1.0,\n        listed: 0.9\n    };\n    score *= statusBoosts[ipo.status] || 1.0;\n    return Math.round(score * 100) / 100;\n}\nfunction buildAdvancedFilters(filters) {\n    const conditions = [];\n    Object.entries(filters).forEach(([key, value])=>{\n        if (value !== null && value !== undefined) {\n            switch(key){\n                case \"status\":\n                    conditions.push({\n                        status: Array.isArray(value) ? {\n                            in: value\n                        } : value\n                    });\n                    break;\n                case \"sector\":\n                    conditions.push({\n                        sector: {\n                            in: Array.isArray(value) ? value : [\n                                value\n                            ]\n                        }\n                    });\n                    break;\n                case \"priceRange\":\n                    if (value.min) conditions.push({\n                        maxPrice: {\n                            gte: value.min\n                        }\n                    });\n                    if (value.max) conditions.push({\n                        minPrice: {\n                            lte: value.max\n                        }\n                    });\n                    break;\n            }\n        }\n    });\n    return conditions;\n}\nasync function performSemanticAnalysis(queries) {\n    // Mock semantic analysis\n    return {\n        entities: extractEntitiesFromQueries(queries),\n        intent: detectSearchIntent(queries),\n        sentiment: \"neutral\",\n        complexity: queries.reduce((sum, q)=>sum + q.split(\" \").length, 0) / queries.length\n    };\n}\nasync function extractEntities(queries) {\n    // Mock entity extraction\n    const entities = {\n        companies: [],\n        sectors: [],\n        dates: [],\n        amounts: []\n    };\n    queries.forEach((query)=>{\n        // Extract company names (mock)\n        if (query.includes(\"ltd\") || query.includes(\"limited\")) {\n            entities.companies.push(query);\n        }\n        // Extract sectors (mock)\n        const sectorKeywords = [\n            \"tech\",\n            \"bank\",\n            \"pharma\",\n            \"auto\"\n        ];\n        sectorKeywords.forEach((keyword)=>{\n            if (query.toLowerCase().includes(keyword)) {\n                entities.sectors.push(keyword);\n            }\n        });\n        // Extract dates (mock)\n        const datePattern = /\\d{4}-\\d{2}-\\d{2}/g;\n        const dates = query.match(datePattern);\n        if (dates) entities.dates.push(...dates);\n        // Extract amounts (mock)\n        const amountPattern = /₹?\\d+(?:,\\d+)*(?:\\.\\d+)?(?:\\s*(?:cr|crore|l|lakh))?/gi;\n        const amounts = query.match(amountPattern);\n        if (amounts) entities.amounts.push(...amounts);\n    });\n    return entities;\n}\nfunction extractEntitiesFromQueries(queries) {\n    return queries.flatMap((query)=>extractSearchTerms(query));\n}\nfunction detectSearchIntent(queries) {\n    // Mock intent detection\n    const query = queries.join(\" \").toLowerCase();\n    if (query.includes(\"when\") || query.includes(\"date\")) return \"temporal\";\n    if (query.includes(\"best\") || query.includes(\"good\")) return \"recommendation\";\n    if (query.includes(\"price\") || query.includes(\"₹\")) return \"financial\";\n    if (query.includes(\"compare\")) return \"comparison\";\n    return \"search\";\n}\nasync function generateAdvancedSearchAnalytics(queries, results) {\n    return {\n        queryComplexity: queries.reduce((sum, q)=>sum + q.split(\" \").length, 0) / queries.length,\n        resultDiversity: calculateResultDiversity(results.data),\n        confidence: 0.85,\n        processingTime: 150\n    };\n}\nfunction calculateResultDiversity(results) {\n    const sectors = new Set(results.map((r)=>r.sector).filter(Boolean));\n    const statuses = new Set(results.map((r)=>r.status));\n    return {\n        sectorDiversity: sectors.size / Math.max(results.length, 1),\n        statusDiversity: statuses.size / Math.max(results.length, 1),\n        overallDiversity: (sectors.size + statuses.size) / (2 * Math.max(results.length, 1))\n    };\n}\nasync function generateSearchRecommendations(results, queries) {\n    const recommendations = [];\n    if (results.length === 0) {\n        recommendations.push({\n            type: \"broaden_search\",\n            message: \"Try removing some filters or using broader search terms\",\n            action: \"modify_query\"\n        });\n    } else if (results.length > 50) {\n        recommendations.push({\n            type: \"narrow_search\",\n            message: \"Too many results. Try adding filters or being more specific\",\n            action: \"add_filters\"\n        });\n    }\n    // Sector-based recommendations\n    const sectors = [\n        ...new Set(results.map((r)=>r.sector).filter(Boolean))\n    ];\n    if (sectors.length === 1) {\n        recommendations.push({\n            type: \"explore_sectors\",\n            message: `All results are from ${sectors[0]}. Explore other sectors?`,\n            action: \"suggest_sectors\",\n            data: {\n                excludeSector: sectors[0]\n            }\n        });\n    }\n    return recommendations;\n}\nasync function processAdvancedSearchResult(ipo, options) {\n    const { queries, searchType, highlight, includeAnalytics, includePredictions } = options;\n    const result = await processSearchResult(ipo, {\n        includeAnalytics,\n        includePredictions,\n        highlight,\n        searchTerms: queries.flatMap((q)=>extractSearchTerms(q)),\n        relevanceScore: ipo.mlScore || 1.0\n    });\n    // Add advanced search specific data\n    result.mlScore = ipo.mlScore;\n    result.rankingFactors = ipo.rankingFactors;\n    result.searchType = searchType;\n    return result;\n}\n// Logging function\nfunction logSearchQuery(request, data) {\n    try {\n        // Log search analytics - non-blocking\n        setImmediate(()=>{\n            console.log(\"Search Query:\", {\n                timestamp: new Date().toISOString(),\n                ip: request.ip,\n                userAgent: request.headers.get(\"user-agent\"),\n                ...data\n            });\n        });\n    } catch (error) {\n    // Silent fail for logging\n    }\n}\n// Export configuration\nconst dynamic = \"force-dynamic\";\nconst runtime = \"nodejs\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ipos/route.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/analytics.js":
/*!******************************!*\
  !*** ./src/lib/analytics.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyticsService: () => (/* binding */ analyticsService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./src/lib/cache.js\");\n\n\nclass AnalyticsService {\n    constructor(){\n        // Performance metrics\n        this.metrics = {\n            computationsPerformed: 0,\n            cacheHits: 0,\n            cacheMisses: 0,\n            averageComputationTime: 0,\n            errors: 0\n        };\n        // Analytics cache with TTL\n        this.analyticsCache = new Map();\n        this.cacheTTL = {\n            BASIC: 5 * 60 * 1000,\n            DETAILED: 10 * 60 * 1000,\n            HISTORICAL: 30 * 60 * 1000,\n            PREDICTIONS: 15 * 60 * 1000\n        };\n        // Risk assessment weights\n        this.riskWeights = {\n            GMP_VOLATILITY: 0.3,\n            SUBSCRIPTION_RATIO: 0.25,\n            ISSUE_SIZE: 0.2,\n            MARKET_CONDITIONS: 0.15,\n            SECTOR_PERFORMANCE: 0.1\n        };\n        // Prediction models configuration\n        this.predictionModels = {\n            LISTING_GAIN: {\n                factors: [\n                    \"avgGMP\",\n                    \"subscriptionRatio\",\n                    \"issueSize\",\n                    \"marketSentiment\"\n                ],\n                weights: [\n                    0.4,\n                    0.3,\n                    0.2,\n                    0.1\n                ]\n            },\n            ALLOTMENT_PROBABILITY: {\n                factors: [\n                    \"subscriptionRatio\",\n                    \"applicationAmount\",\n                    \"category\"\n                ],\n                weights: [\n                    0.6,\n                    0.3,\n                    0.1\n                ]\n            }\n        };\n    }\n    // Comprehensive IPO analytics computation\n    async computeIPOAnalytics(ipoId, options = {}) {\n        const startTime = Date.now();\n        try {\n            const { includeHistorical = true, includePredictions = true, timeRange = 30, refreshCache = false } = options;\n            // Check cache first\n            const cacheKey = `analytics:${ipoId}:${timeRange}:${includeHistorical}:${includePredictions}`;\n            if (!refreshCache) {\n                const cached = await this.getCachedAnalytics(cacheKey);\n                if (cached) {\n                    this.metrics.cacheHits++;\n                    return cached;\n                }\n            }\n            this.metrics.cacheMisses++;\n            // Fetch comprehensive data\n            const [ipoData, gmpData, subscriptionData, demandData, categoryData] = await Promise.all([\n                this.getIPOBasicData(ipoId),\n                this.getGMPData(ipoId, timeRange),\n                this.getSubscriptionData(ipoId, timeRange),\n                this.getDemandData(ipoId, timeRange),\n                this.getIPOCategories(ipoId)\n            ]);\n            if (!ipoData) {\n                throw new Error(`IPO with ID ${ipoId} not found`);\n            }\n            // Compute analytics\n            const analytics = {\n                ipoId,\n                symbol: ipoData.symbol,\n                name: ipoData.name,\n                status: ipoData.status,\n                computedAt: new Date().toISOString(),\n                // Basic metrics\n                basicMetrics: this.computeBasicMetrics(ipoData),\n                // GMP analytics\n                gmpAnalytics: this.computeGMPAnalytics(gmpData),\n                // Subscription analytics\n                subscriptionAnalytics: this.computeSubscriptionAnalytics(subscriptionData, categoryData),\n                // Market demand analytics\n                demandAnalytics: this.computeDemandAnalytics(demandData),\n                // Risk assessment\n                riskAssessment: this.computeRiskAssessment(ipoData, gmpData, subscriptionData),\n                // Performance indicators\n                performanceIndicators: this.computePerformanceIndicators(ipoData, gmpData, subscriptionData)\n            };\n            // Add historical analysis\n            if (includeHistorical) {\n                analytics.historicalAnalysis = await this.computeHistoricalAnalysis(ipoId, timeRange);\n            }\n            // Add predictions\n            if (includePredictions) {\n                analytics.predictions = await this.computePredictions(analytics);\n            }\n            // Add comparative analysis\n            analytics.comparativeAnalysis = await this.computeComparativeAnalysis(ipoData);\n            // Add insights and recommendations\n            analytics.insights = this.generateInsights(analytics);\n            analytics.recommendations = this.generateRecommendations(analytics);\n            // Cache the results\n            await this.setCachedAnalytics(cacheKey, analytics, this.cacheTTL.DETAILED);\n            // Update metrics\n            const computationTime = Date.now() - startTime;\n            this.updateMetrics(computationTime);\n            return analytics;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(`Analytics computation failed for IPO ${ipoId}:`, error);\n            throw error;\n        }\n    }\n    // Basic IPO metrics computation\n    computeBasicMetrics(ipoData) {\n        const priceRange = ipoData.maxPrice - ipoData.minPrice;\n        const issueSize = Number(ipoData.issueSize || 0);\n        const lotValue = ipoData.lotSize * (ipoData.maxPrice || 0);\n        return {\n            priceRange: {\n                min: ipoData.minPrice,\n                max: ipoData.maxPrice,\n                spread: priceRange,\n                spreadPercentage: ipoData.minPrice > 0 ? parseFloat((priceRange / ipoData.minPrice * 100).toFixed(2)) : 0\n            },\n            issue: {\n                size: issueSize,\n                sizeCategory: this.categorizeIssueSize(issueSize),\n                lotSize: ipoData.lotSize,\n                lotValue,\n                faceValue: ipoData.faceValue\n            },\n            timeline: {\n                openDate: ipoData.openDate,\n                closeDate: ipoData.closeDate,\n                listingDate: ipoData.listingDate,\n                durationDays: this.calculateDuration(ipoData.openDate, ipoData.closeDate),\n                daysToListing: ipoData.listingDate ? this.calculateDuration(ipoData.closeDate, ipoData.listingDate) : null\n            },\n            type: {\n                issueType: ipoData.issueType,\n                subType: ipoData.subType,\n                registrar: ipoData.registrar\n            }\n        };\n    }\n    // GMP analytics computation\n    computeGMPAnalytics(gmpData) {\n        if (!gmpData || gmpData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No GMP data available\"\n            };\n        }\n        const values = gmpData.map((g)=>g.value);\n        const percentages = gmpData.map((g)=>g.percentage);\n        const volumes = gmpData.map((g)=>g.volume || 0);\n        // Statistical measures\n        const stats = {\n            current: values[0] || 0,\n            average: this.calculateAverage(values),\n            median: this.calculateMedian(values),\n            mode: this.calculateMode(values),\n            min: Math.min(...values),\n            max: Math.max(...values),\n            range: Math.max(...values) - Math.min(...values),\n            standardDeviation: this.calculateStandardDeviation(values),\n            variance: this.calculateVariance(values),\n            coefficient: this.calculateCoefficientOfVariation(values)\n        };\n        // Trend analysis\n        const trend = this.analyzeTrend(values);\n        // Volatility analysis\n        const volatility = this.analyzeVolatility(values, gmpData.map((g)=>g.timestamp));\n        // Volume analysis\n        const volumeAnalysis = this.analyzeVolume(volumes, values);\n        // Price momentum\n        const momentum = this.calculateMomentum(values);\n        return {\n            status: \"available\",\n            recordCount: gmpData.length,\n            timespan: this.calculateTimespan(gmpData),\n            statistics: stats,\n            trend,\n            volatility,\n            volumeAnalysis,\n            momentum,\n            priceTargets: this.calculatePriceTargets(stats),\n            riskMetrics: this.calculateGMPRiskMetrics(values)\n        };\n    }\n    // Subscription analytics computation\n    computeSubscriptionAnalytics(subscriptionData, categoryData) {\n        if (!subscriptionData || subscriptionData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No subscription data available\"\n            };\n        }\n        // Get latest subscription by category\n        const latestByCategory = this.getLatestSubscriptionByCategory(subscriptionData);\n        // Overall subscription metrics\n        const overallMetrics = {\n            totalSubscription: this.calculateOverallSubscription(latestByCategory),\n            isOversubscribed: false,\n            oversubscriptionRatio: 0,\n            totalApplications: 0,\n            totalQuantity: BigInt(0)\n        };\n        overallMetrics.isOversubscribed = overallMetrics.totalSubscription > 1;\n        overallMetrics.oversubscriptionRatio = Math.max(0, overallMetrics.totalSubscription - 1);\n        // Category-wise analysis\n        const categoryAnalysis = {};\n        for (const [category, data] of Object.entries(latestByCategory)){\n            categoryAnalysis[category] = {\n                subscriptionRatio: data.subscriptionRatio,\n                quantity: data.quantity.toString(),\n                bidCount: data.bidCount,\n                averageBidSize: data.bidCount > 0 ? Number(data.quantity) / data.bidCount : 0,\n                timestamp: data.timestamp\n            };\n            overallMetrics.totalApplications += data.bidCount;\n            overallMetrics.totalQuantity += data.quantity;\n        }\n        // Subscription pattern analysis\n        const patterns = this.analyzeSubscriptionPatterns(subscriptionData);\n        // Allotment probability calculation\n        const allotmentProbability = this.calculateAllotmentProbabilities(latestByCategory);\n        return {\n            status: \"available\",\n            recordCount: subscriptionData.length,\n            overall: overallMetrics,\n            categories: categoryAnalysis,\n            patterns,\n            allotmentProbability,\n            insights: this.generateSubscriptionInsights(overallMetrics, categoryAnalysis)\n        };\n    }\n    // Market demand analytics computation\n    computeDemandAnalytics(demandData) {\n        if (!demandData || demandData.length === 0) {\n            return {\n                status: \"no_data\",\n                message: \"No demand data available\"\n            };\n        }\n        // Price-wise demand analysis\n        const priceWiseDemand = this.analyzePriceWiseDemand(demandData);\n        // Cut-off analysis\n        const cutOffAnalysis = this.analyzeCutOffDemand(demandData);\n        // Demand distribution\n        const distribution = this.analyzeDemandDistribution(demandData);\n        // Bid concentration\n        const concentration = this.analyzeBidConcentration(demandData);\n        return {\n            status: \"available\",\n            recordCount: demandData.length,\n            priceWiseDemand,\n            cutOffAnalysis,\n            distribution,\n            concentration,\n            summary: {\n                totalQuantity: demandData.reduce((sum, d)=>sum + Number(d.absoluteQuantity), 0),\n                totalBids: demandData.reduce((sum, d)=>sum + d.absoluteBidCount, 0),\n                priceRange: {\n                    min: Math.min(...demandData.map((d)=>d.price).filter((p)=>p !== null)),\n                    max: Math.max(...demandData.map((d)=>d.price).filter((p)=>p !== null))\n                }\n            }\n        };\n    }\n    // Risk assessment computation\n    computeRiskAssessment(ipoData, gmpData, subscriptionData) {\n        let riskScore = 50; // Base risk score\n        const riskFactors = [];\n        // GMP volatility risk\n        if (gmpData && gmpData.length > 1) {\n            const gmpValues = gmpData.map((g)=>g.value);\n            const volatility = this.calculateStandardDeviation(gmpValues);\n            const avgGMP = this.calculateAverage(gmpValues);\n            const volatilityRatio = avgGMP > 0 ? volatility / avgGMP : 0;\n            if (volatilityRatio > 0.3) {\n                riskScore += 20;\n                riskFactors.push({\n                    type: \"HIGH_GMP_VOLATILITY\",\n                    impact: \"high\",\n                    description: `High GMP volatility (${(volatilityRatio * 100).toFixed(1)}%)`,\n                    mitigation: \"Consider waiting for price stabilization\"\n                });\n            } else if (volatilityRatio > 0.15) {\n                riskScore += 10;\n                riskFactors.push({\n                    type: \"MODERATE_GMP_VOLATILITY\",\n                    impact: \"medium\",\n                    description: `Moderate GMP volatility (${(volatilityRatio * 100).toFixed(1)}%)`,\n                    mitigation: \"Monitor GMP trends closely\"\n                });\n            }\n        }\n        // Subscription risk\n        if (subscriptionData && subscriptionData.length > 0) {\n            const latestSubscription = this.getLatestSubscriptionByCategory(subscriptionData);\n            const overallSubscription = this.calculateOverallSubscription(latestSubscription);\n            if (overallSubscription < 0.5) {\n                riskScore += 25;\n                riskFactors.push({\n                    type: \"LOW_SUBSCRIPTION\",\n                    impact: \"high\",\n                    description: `Low subscription ratio (${overallSubscription.toFixed(2)}x)`,\n                    mitigation: \"Reconsider investment due to weak demand\"\n                });\n            } else if (overallSubscription > 10) {\n                riskScore += 15;\n                riskFactors.push({\n                    type: \"OVER_SUBSCRIPTION\",\n                    impact: \"medium\",\n                    description: `Very high subscription (${overallSubscription.toFixed(2)}x)`,\n                    mitigation: \"Low allotment probability, consider alternatives\"\n                });\n            }\n        }\n        // Issue size risk\n        const issueSize = Number(ipoData.issueSize || 0);\n        if (issueSize > 5000 * 10000000) {\n            // 5000 Cr\n            riskScore += 10;\n            riskFactors.push({\n                type: \"LARGE_ISSUE_SIZE\",\n                impact: \"medium\",\n                description: \"Large issue size may impact liquidity\",\n                mitigation: \"Ensure adequate market support post-listing\"\n            });\n        }\n        // Price band risk\n        const priceRange = ipoData.maxPrice - ipoData.minPrice;\n        const spreadPercentage = ipoData.minPrice > 0 ? priceRange / ipoData.minPrice * 100 : 0;\n        if (spreadPercentage > 20) {\n            riskScore += 5;\n            riskFactors.push({\n                type: \"WIDE_PRICE_BAND\",\n                impact: \"low\",\n                description: `Wide price band (${spreadPercentage.toFixed(1)}%)`,\n                mitigation: \"Price discovery may be challenging\"\n            });\n        }\n        // Normalize risk score\n        riskScore = Math.max(0, Math.min(100, riskScore));\n        return {\n            overallRiskScore: riskScore,\n            riskLevel: this.categorizeRiskLevel(riskScore),\n            riskFactors,\n            recommendation: this.generateRiskRecommendation(riskScore, riskFactors),\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    // Performance indicators computation\n    computePerformanceIndicators(ipoData, gmpData, subscriptionData) {\n        const indicators = {};\n        // Market sentiment indicator\n        indicators.marketSentiment = this.calculateMarketSentiment(gmpData, subscriptionData);\n        // Demand strength indicator\n        indicators.demandStrength = this.calculateDemandStrength(subscriptionData);\n        // Price momentum indicator\n        if (gmpData && gmpData.length > 0) {\n            indicators.priceMomentum = this.calculateMomentum(gmpData.map((g)=>g.value));\n        }\n        // Listing readiness indicator\n        indicators.listingReadiness = this.calculateListingReadiness(ipoData, subscriptionData);\n        // Investment attractiveness score\n        indicators.attractivenessScore = this.calculateAttractivenessScore(indicators);\n        return indicators;\n    }\n    // Historical analysis computation\n    async computeHistoricalAnalysis(ipoId, timeRange) {\n        try {\n            // Get comparable IPOs for benchmarking\n            const comparableIPOs = await this.getComparableIPOs(ipoId, timeRange);\n            // Historical performance metrics\n            const historicalMetrics = await this.calculateHistoricalMetrics(ipoId, timeRange);\n            // Trend analysis over time\n            const trends = await this.calculateHistoricalTrends(ipoId, timeRange);\n            return {\n                timeRange,\n                comparableIPOs: comparableIPOs.length,\n                metrics: historicalMetrics,\n                trends,\n                benchmarks: await this.calculateBenchmarks(comparableIPOs)\n            };\n        } catch (error) {\n            console.error(\"Historical analysis failed:\", error);\n            return {\n                status: \"error\",\n                message: \"Historical analysis unavailable\"\n            };\n        }\n    }\n    // Predictions computation\n    async computePredictions(analytics) {\n        const predictions = {};\n        try {\n            // Listing gain prediction\n            predictions.listingGain = this.predictListingGain(analytics);\n            // Allotment probability prediction\n            predictions.allotmentProbability = this.predictAllotmentProbability(analytics);\n            // Price target prediction\n            predictions.priceTargets = this.predictPriceTargets(analytics);\n            // Risk-adjusted returns\n            predictions.riskAdjustedReturns = this.calculateRiskAdjustedReturns(predictions.listingGain, analytics.riskAssessment.overallRiskScore);\n            // Confidence intervals\n            predictions.confidenceIntervals = this.calculateConfidenceIntervals(predictions);\n            predictions.lastUpdated = new Date().toISOString();\n            predictions.model = \"IPO_ANALYTICS_V1.0\";\n        } catch (error) {\n            console.error(\"Predictions computation failed:\", error);\n            predictions.status = \"error\";\n            predictions.message = \"Predictions unavailable\";\n        }\n        return predictions;\n    }\n    // Comparative analysis\n    async computeComparativeAnalysis(ipoData) {\n        try {\n            // Find similar IPOs by sector, size, and time period\n            const similarIPOs = await this.findSimilarIPOs(ipoData);\n            // Calculate relative performance\n            const relativePerformance = await this.calculateRelativePerformance(ipoData, similarIPOs);\n            // Market positioning\n            const marketPositioning = this.calculateMarketPositioning(ipoData, similarIPOs);\n            return {\n                similarIPOsCount: similarIPOs.length,\n                relativePerformance,\n                marketPositioning,\n                benchmarks: await this.calculateIndustryBenchmarks(ipoData.issueType)\n            };\n        } catch (error) {\n            console.error(\"Comparative analysis failed:\", error);\n            return {\n                status: \"error\",\n                message: \"Comparative analysis unavailable\"\n            };\n        }\n    }\n    // Insights generation\n    generateInsights(analytics) {\n        const insights = [];\n        // GMP insights\n        if (analytics.gmpAnalytics.status === \"available\") {\n            const gmp = analytics.gmpAnalytics;\n            if (gmp.statistics.current > gmp.statistics.average * 1.2) {\n                insights.push({\n                    type: \"positive\",\n                    category: \"GMP\",\n                    title: \"Strong GMP Performance\",\n                    description: `Current GMP (₹${gmp.statistics.current}) is ${((gmp.statistics.current / gmp.statistics.average - 1) * 100).toFixed(1)}% above average`,\n                    impact: \"Indicates strong market demand\"\n                });\n            }\n            if (gmp.volatility.level === \"high\") {\n                insights.push({\n                    type: \"warning\",\n                    category: \"GMP\",\n                    title: \"High Price Volatility\",\n                    description: `GMP showing high volatility (${gmp.volatility.coefficient}%)`,\n                    impact: \"Increased uncertainty in price expectations\"\n                });\n            }\n        }\n        // Subscription insights\n        if (analytics.subscriptionAnalytics.status === \"available\") {\n            const sub = analytics.subscriptionAnalytics;\n            if (sub.overall.totalSubscription > 5) {\n                insights.push({\n                    type: \"positive\",\n                    category: \"Subscription\",\n                    title: \"Strong Oversubscription\",\n                    description: `IPO oversubscribed by ${sub.overall.totalSubscription.toFixed(2)}x`,\n                    impact: \"High investor interest but lower allotment probability\"\n                });\n            }\n            if (sub.overall.totalSubscription < 1) {\n                insights.push({\n                    type: \"negative\",\n                    category: \"Subscription\",\n                    title: \"Undersubscribed IPO\",\n                    description: `IPO subscribed only ${(sub.overall.totalSubscription * 100).toFixed(1)}%`,\n                    impact: \"Weak investor demand, potential listing concerns\"\n                });\n            }\n        }\n        // Risk insights\n        const risk = analytics.riskAssessment;\n        if (risk.riskLevel === \"high\") {\n            insights.push({\n                type: \"warning\",\n                category: \"Risk\",\n                title: \"High Risk Investment\",\n                description: `Risk score of ${risk.overallRiskScore} indicates elevated risk`,\n                impact: \"Careful consideration required before investment\"\n            });\n        }\n        return insights;\n    }\n    // Recommendations generation\n    generateRecommendations(analytics) {\n        const recommendations = [];\n        const risk = analytics.riskAssessment.overallRiskScore;\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 0;\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        // Investment recommendation\n        if (risk < 30 && subscription > 2 && gmp > 0) {\n            recommendations.push({\n                type: \"BUY\",\n                confidence: \"high\",\n                reasoning: \"Low risk, strong demand, positive GMP\",\n                action: \"Consider applying for maximum allocation\"\n            });\n        } else if (risk < 50 && subscription > 1) {\n            recommendations.push({\n                type: \"HOLD\",\n                confidence: \"medium\",\n                reasoning: \"Moderate risk with adequate demand\",\n                action: \"Apply with caution, consider smaller allocation\"\n            });\n        } else if (risk > 70 || subscription < 0.5) {\n            recommendations.push({\n                type: \"AVOID\",\n                confidence: \"high\",\n                reasoning: \"High risk or weak demand indicators\",\n                action: \"Consider alternative investment opportunities\"\n            });\n        }\n        // Timing recommendations\n        if (analytics.performanceIndicators?.listingReadiness > 0.8) {\n            recommendations.push({\n                type: \"TIMING\",\n                confidence: \"medium\",\n                reasoning: \"IPO appears ready for successful listing\",\n                action: \"Good timing for application\"\n            });\n        }\n        // Allocation recommendations\n        if (subscription > 10) {\n            recommendations.push({\n                type: \"ALLOCATION\",\n                confidence: \"high\",\n                reasoning: \"Very high oversubscription\",\n                action: \"Apply for maximum retail quota to improve allotment chances\"\n            });\n        }\n        return recommendations;\n    }\n    // Utility methods for calculations\n    calculateAverage(values) {\n        if (!values || values.length === 0) return 0;\n        return values.reduce((sum, val)=>sum + val, 0) / values.length;\n    }\n    calculateMedian(values) {\n        if (!values || values.length === 0) return 0;\n        const sorted = [\n            ...values\n        ].sort((a, b)=>a - b);\n        const mid = Math.floor(sorted.length / 2);\n        return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n    }\n    calculateMode(values) {\n        if (!values || values.length === 0) return 0;\n        const frequency = {};\n        values.forEach((val)=>frequency[val] = (frequency[val] || 0) + 1);\n        return Object.keys(frequency).reduce((a, b)=>frequency[a] > frequency[b] ? a : b);\n    }\n    calculateStandardDeviation(values) {\n        if (!values || values.length < 2) return 0;\n        const avg = this.calculateAverage(values);\n        const variance = values.reduce((sum, val)=>sum + Math.pow(val - avg, 2), 0) / values.length;\n        return Math.sqrt(variance);\n    }\n    calculateVariance(values) {\n        if (!values || values.length < 2) return 0;\n        const avg = this.calculateAverage(values);\n        return values.reduce((sum, val)=>sum + Math.pow(val - avg, 2), 0) / values.length;\n    }\n    calculateCoefficientOfVariation(values) {\n        const avg = this.calculateAverage(values);\n        const stdDev = this.calculateStandardDeviation(values);\n        return avg > 0 ? stdDev / avg * 100 : 0;\n    }\n    analyzeTrend(values) {\n        if (!values || values.length < 2) return {\n            direction: \"stable\",\n            strength: 0\n        };\n        const recent = values.slice(0, Math.min(5, Math.floor(values.length / 2)));\n        const older = values.slice(-Math.min(5, Math.floor(values.length / 2)));\n        const recentAvg = this.calculateAverage(recent);\n        const olderAvg = this.calculateAverage(older);\n        const change = recentAvg - olderAvg;\n        const changePercent = olderAvg > 0 ? change / olderAvg * 100 : 0;\n        let direction = \"stable\";\n        let strength = Math.abs(changePercent);\n        if (changePercent > 5) direction = \"bullish\";\n        else if (changePercent < -5) direction = \"bearish\";\n        return {\n            direction,\n            strength,\n            change,\n            changePercent\n        };\n    }\n    analyzeVolatility(values, timestamps) {\n        if (!values || values.length < 2) return {\n            level: \"unknown\",\n            coefficient: 0\n        };\n        const coefficient = this.calculateCoefficientOfVariation(values);\n        let level = \"low\";\n        if (coefficient > 30) level = \"high\";\n        else if (coefficient > 15) level = \"medium\";\n        return {\n            level,\n            coefficient,\n            standardDeviation: this.calculateStandardDeviation(values)\n        };\n    }\n    calculateMomentum(values) {\n        if (!values || values.length < 3) return {\n            score: 0,\n            direction: \"neutral\"\n        };\n        const recent = values.slice(0, 3);\n        const momentum = recent[0] - recent[2];\n        const momentumPercent = recent[2] > 0 ? momentum / recent[2] * 100 : 0;\n        let direction = \"neutral\";\n        if (momentumPercent > 2) direction = \"positive\";\n        else if (momentumPercent < -2) direction = \"negative\";\n        return {\n            score: momentumPercent,\n            direction,\n            absolute: momentum\n        };\n    }\n    // Data fetching methods\n    async getIPOBasicData(ipoId) {\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.iPO.findUnique({\n            where: {\n                id: ipoId\n            },\n            include: {\n                categories: true\n            }\n        });\n    }\n    async getGMPData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.gMP.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getSubscriptionData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.subscriptionData.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getDemandData(ipoId, days = 30) {\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - days);\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.marketDemand.findMany({\n            where: {\n                ipoId,\n                timestamp: {\n                    gte: startDate\n                }\n            },\n            orderBy: {\n                timestamp: \"desc\"\n            }\n        });\n    }\n    async getIPOCategories(ipoId) {\n        return await _db_js__WEBPACK_IMPORTED_MODULE_0__.prisma.iPOCategory.findMany({\n            where: {\n                ipoId\n            }\n        });\n    }\n    // Cache management\n    async getCachedAnalytics(key) {\n        // Check in-memory cache first\n        if (this.analyticsCache.has(key)) {\n            const cached = this.analyticsCache.get(key);\n            if (Date.now() - cached.timestamp < this.cacheTTL.DETAILED) {\n                return cached.data;\n            }\n            this.analyticsCache.delete(key);\n        }\n        // Check Redis cache\n        return await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.get(key);\n    }\n    async setCachedAnalytics(key, data, ttl) {\n        // Set in-memory cache\n        this.analyticsCache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n        // Set in Redis\n        return await _cache_js__WEBPACK_IMPORTED_MODULE_1__.cache.set(key, data, ttl / 1000);\n    }\n    // Helper methods\n    categorizeIssueSize(size) {\n        if (size < 500 * 10000000) return \"small\"; // < 500 Cr\n        if (size < 2000 * 10000000) return \"medium\"; // < 2000 Cr\n        return \"large\"; // >= 2000 Cr\n    }\n    calculateDuration(startDate, endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        return Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n    }\n    categorizeRiskLevel(score) {\n        if (score < 30) return \"low\";\n        if (score < 60) return \"medium\";\n        return \"high\";\n    }\n    getLatestSubscriptionByCategory(subscriptionData) {\n        const latest = {};\n        subscriptionData.forEach((item)=>{\n            const key = item.category + (item.subCategory || \"\");\n            if (!latest[key] || item.timestamp > latest[key].timestamp) {\n                latest[key] = item;\n            }\n        });\n        return latest;\n    }\n    calculateOverallSubscription(latestByCategory) {\n        const ratios = Object.values(latestByCategory).map((item)=>item.subscriptionRatio || 0);\n        return ratios.length > 0 ? Math.max(...ratios) : 0;\n    }\n    // Performance tracking\n    updateMetrics(computationTime) {\n        this.metrics.computationsPerformed++;\n        this.metrics.averageComputationTime = (this.metrics.averageComputationTime * (this.metrics.computationsPerformed - 1) + computationTime) / this.metrics.computationsPerformed;\n    }\n    getPerformanceMetrics() {\n        const hitRate = this.metrics.cacheHits + this.metrics.cacheMisses > 0 ? (this.metrics.cacheHits / (this.metrics.cacheHits + this.metrics.cacheMisses) * 100).toFixed(2) : \"0.00\";\n        return {\n            ...this.metrics,\n            cacheHitRate: `${hitRate}%`,\n            averageComputationTime: Math.round(this.metrics.averageComputationTime),\n            successRate: this.metrics.computationsPerformed > 0 ? ((this.metrics.computationsPerformed - this.metrics.errors) / this.metrics.computationsPerformed * 100).toFixed(2) : \"100.00\"\n        };\n    }\n    // Placeholder methods for advanced features (to be implemented)\n    async getComparableIPOs(ipoId, timeRange) {\n        return [];\n    }\n    async calculateHistoricalMetrics(ipoId, timeRange) {\n        return {};\n    }\n    async calculateHistoricalTrends(ipoId, timeRange) {\n        return {};\n    }\n    async calculateBenchmarks(comparableIPOs) {\n        return {};\n    }\n    async findSimilarIPOs(ipoData) {\n        return [];\n    }\n    async calculateRelativePerformance(ipoData, similarIPOs) {\n        return {};\n    }\n    calculateMarketPositioning(ipoData, similarIPOs) {\n        return {};\n    }\n    async calculateIndustryBenchmarks(issueType) {\n        return {};\n    }\n    predictListingGain(analytics) {\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        const risk = analytics.riskAssessment.overallRiskScore || 50;\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 1;\n        // Simple prediction model (enhance with ML)\n        let prediction = gmp * 0.8; // Conservative estimate\n        // Adjust for risk\n        prediction *= 1 - risk / 200; // Reduce by half the risk percentage\n        // Adjust for subscription\n        if (subscription > 5) prediction *= 0.9; // High subscription may limit gains\n        else if (subscription < 1) prediction *= 0.7; // Low subscription is bearish\n        return {\n            value: Math.round(prediction),\n            confidence: 0.6,\n            range: {\n                min: Math.round(prediction * 0.7),\n                max: Math.round(prediction * 1.3)\n            }\n        };\n    }\n    predictAllotmentProbability(analytics) {\n        const subscription = analytics.subscriptionAnalytics.overall?.totalSubscription || 1;\n        let probability = 100;\n        if (subscription > 1) {\n            probability = Math.min(95, 100 / subscription);\n        }\n        return {\n            retail: Math.round(probability),\n            confidence: 0.8\n        };\n    }\n    predictPriceTargets(analytics) {\n        const gmp = analytics.gmpAnalytics.statistics?.current || 0;\n        const basePrice = analytics.basicMetrics?.priceRange?.max || 0;\n        return {\n            conservative: basePrice + gmp * 0.5,\n            moderate: basePrice + gmp * 0.8,\n            aggressive: basePrice + gmp * 1.2\n        };\n    }\n    calculateRiskAdjustedReturns(listingGain, riskScore) {\n        const gain = listingGain.value || 0;\n        const risk = riskScore || 50;\n        return {\n            riskAdjustedReturn: gain * (1 - risk / 100),\n            sharpeRatio: risk > 0 ? gain / risk : 0\n        };\n    }\n    calculateConfidenceIntervals(predictions) {\n        return {\n            listingGain: {\n                confidence90: {\n                    min: predictions.listingGain?.range?.min || 0,\n                    max: predictions.listingGain?.range?.max || 0\n                }\n            }\n        };\n    }\n    // Additional helper methods\n    analyzeVolume(volumes, values) {\n        return {\n            correlation: 0,\n            trend: \"stable\"\n        };\n    }\n    calculatePriceTargets(stats) {\n        return {\n            support: stats.min,\n            resistance: stats.max,\n            pivot: stats.average\n        };\n    }\n    calculateGMPRiskMetrics(values) {\n        return {\n            valueAtRisk: this.calculateStandardDeviation(values) * 1.645,\n            maxDrawdown: this.calculateMaxDrawdown(values)\n        };\n    }\n    calculateMaxDrawdown(values) {\n        let maxDrawdown = 0;\n        let peak = values[0];\n        for(let i = 1; i < values.length; i++){\n            if (values[i] > peak) {\n                peak = values[i];\n            } else {\n                const drawdown = (peak - values[i]) / peak;\n                maxDrawdown = Math.max(maxDrawdown, drawdown);\n            }\n        }\n        return maxDrawdown * 100; // Return as percentage\n    }\n    analyzeSubscriptionPatterns(subscriptionData) {\n        return {\n            trend: \"increasing\"\n        };\n    }\n    calculateAllotmentProbabilities(latestByCategory) {\n        const result = {};\n        for (const [category, data] of Object.entries(latestByCategory)){\n            const ratio = data.subscriptionRatio || 1;\n            result[category] = ratio > 1 ? Math.min(95, 100 / ratio) : 95;\n        }\n        return result;\n    }\n    generateSubscriptionInsights(overall, categories) {\n        return [];\n    }\n    analyzePriceWiseDemand(demandData) {\n        return {\n            distribution: \"normal\"\n        };\n    }\n    analyzeCutOffDemand(demandData) {\n        return {\n            percentage: 0\n        };\n    }\n    analyzeDemandDistribution(demandData) {\n        return {\n            concentration: \"distributed\"\n        };\n    }\n    analyzeBidConcentration(demandData) {\n        return {\n            herfindahlIndex: 0\n        };\n    }\n    calculateMarketSentiment(gmpData, subscriptionData) {\n        return 0.5;\n    }\n    calculateDemandStrength(subscriptionData) {\n        return 0.5;\n    }\n    calculateListingReadiness(ipoData, subscriptionData) {\n        return 0.8;\n    }\n    calculateAttractivenessScore(indicators) {\n        return 0.7;\n    }\n    calculateTimespan(data) {\n        if (!data || data.length < 2) return 0;\n        const first = new Date(data[data.length - 1].timestamp);\n        const last = new Date(data[0].timestamp);\n        return Math.ceil((last - first) / (1000 * 60 * 60 * 24));\n    }\n    generateRiskRecommendation(score, factors) {\n        if (score < 30) return \"Low risk investment, suitable for conservative investors\";\n        if (score < 60) return \"Moderate risk, suitable for balanced portfolios\";\n        return \"High risk investment, suitable only for aggressive investors\";\n    }\n}\n// Export singleton instance\nconst analyticsService = new AnalyticsService();\n// Cleanup old cache entries periodically\nsetInterval(()=>{\n    const now = Date.now();\n    for (const [key, value] of analyticsService.analyticsCache.entries()){\n        if (now - value.timestamp > analyticsService.cacheTTL.DETAILED) {\n            analyticsService.analyticsCache.delete(key);\n        }\n    }\n}, 10 * 60 * 1000); // Every 10 minutes\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (analyticsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFdkQseUNBQXlDO0FBQ3pDZ1csWUFDRTtJQUNFLE1BQU1qVSxNQUFNRCxLQUFLQyxHQUFHO0lBQ3BCLEtBQUssTUFBTSxDQUFDbVIsS0FBSzNMLE1BQU0sSUFBSXdPLGlCQUFpQnZWLGNBQWMsQ0FBQ21LLE9BQU8sR0FBSTtRQUNwRSxJQUFJNUksTUFBTXdGLE1BQU15QixTQUFTLEdBQUcrTSxpQkFBaUJyVixRQUFRLENBQUNFLFFBQVEsRUFBRTtZQUM5RG1WLGlCQUFpQnZWLGNBQWMsQ0FBQzZTLE1BQU0sQ0FBQ0g7UUFDekM7SUFDRjtBQUNGLEdBQ0EsS0FBSyxLQUFLLE9BQ1QsbUJBQW1CO0FBRXRCLGlFQUFlNkMsZ0JBQWdCQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXBvLXRyYWNrZXIvLi9zcmMvbGliL2FuYWx5dGljcy5qcz83MWFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gXCIuL2RiLmpzXCI7XHJcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSBcIi4vY2FjaGUuanNcIjtcclxuXHJcbmNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gUGVyZm9ybWFuY2UgbWV0cmljc1xyXG4gICAgdGhpcy5tZXRyaWNzID0ge1xyXG4gICAgICBjb21wdXRhdGlvbnNQZXJmb3JtZWQ6IDAsXHJcbiAgICAgIGNhY2hlSGl0czogMCxcclxuICAgICAgY2FjaGVNaXNzZXM6IDAsXHJcbiAgICAgIGF2ZXJhZ2VDb21wdXRhdGlvblRpbWU6IDAsXHJcbiAgICAgIGVycm9yczogMCxcclxuICAgIH07XHJcblxyXG4gICAgLy8gQW5hbHl0aWNzIGNhY2hlIHdpdGggVFRMXHJcbiAgICB0aGlzLmFuYWx5dGljc0NhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5jYWNoZVRUTCA9IHtcclxuICAgICAgQkFTSUM6IDUgKiA2MCAqIDEwMDAsIC8vIDUgbWludXRlc1xyXG4gICAgICBERVRBSUxFRDogMTAgKiA2MCAqIDEwMDAsIC8vIDEwIG1pbnV0ZXNcclxuICAgICAgSElTVE9SSUNBTDogMzAgKiA2MCAqIDEwMDAsIC8vIDMwIG1pbnV0ZXNcclxuICAgICAgUFJFRElDVElPTlM6IDE1ICogNjAgKiAxMDAwLCAvLyAxNSBtaW51dGVzXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJpc2sgYXNzZXNzbWVudCB3ZWlnaHRzXHJcbiAgICB0aGlzLnJpc2tXZWlnaHRzID0ge1xyXG4gICAgICBHTVBfVk9MQVRJTElUWTogMC4zLFxyXG4gICAgICBTVUJTQ1JJUFRJT05fUkFUSU86IDAuMjUsXHJcbiAgICAgIElTU1VFX1NJWkU6IDAuMixcclxuICAgICAgTUFSS0VUX0NPTkRJVElPTlM6IDAuMTUsXHJcbiAgICAgIFNFQ1RPUl9QRVJGT1JNQU5DRTogMC4xLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBQcmVkaWN0aW9uIG1vZGVscyBjb25maWd1cmF0aW9uXHJcbiAgICB0aGlzLnByZWRpY3Rpb25Nb2RlbHMgPSB7XHJcbiAgICAgIExJU1RJTkdfR0FJTjoge1xyXG4gICAgICAgIGZhY3RvcnM6IFtcclxuICAgICAgICAgIFwiYXZnR01QXCIsXHJcbiAgICAgICAgICBcInN1YnNjcmlwdGlvblJhdGlvXCIsXHJcbiAgICAgICAgICBcImlzc3VlU2l6ZVwiLFxyXG4gICAgICAgICAgXCJtYXJrZXRTZW50aW1lbnRcIixcclxuICAgICAgICBdLFxyXG4gICAgICAgIHdlaWdodHM6IFswLjQsIDAuMywgMC4yLCAwLjFdLFxyXG4gICAgICB9LFxyXG4gICAgICBBTExPVE1FTlRfUFJPQkFCSUxJVFk6IHtcclxuICAgICAgICBmYWN0b3JzOiBbXCJzdWJzY3JpcHRpb25SYXRpb1wiLCBcImFwcGxpY2F0aW9uQW1vdW50XCIsIFwiY2F0ZWdvcnlcIl0sXHJcbiAgICAgICAgd2VpZ2h0czogWzAuNiwgMC4zLCAwLjFdLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIENvbXByZWhlbnNpdmUgSVBPIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGFzeW5jIGNvbXB1dGVJUE9BbmFseXRpY3MoaXBvSWQsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgaW5jbHVkZUhpc3RvcmljYWwgPSB0cnVlLFxyXG4gICAgICAgIGluY2x1ZGVQcmVkaWN0aW9ucyA9IHRydWUsXHJcbiAgICAgICAgdGltZVJhbmdlID0gMzAsIC8vIGRheXNcclxuICAgICAgICByZWZyZXNoQ2FjaGUgPSBmYWxzZSxcclxuICAgICAgfSA9IG9wdGlvbnM7XHJcblxyXG4gICAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgICBjb25zdCBjYWNoZUtleSA9IGBhbmFseXRpY3M6JHtpcG9JZH06JHt0aW1lUmFuZ2V9OiR7aW5jbHVkZUhpc3RvcmljYWx9OiR7aW5jbHVkZVByZWRpY3Rpb25zfWA7XHJcblxyXG4gICAgICBpZiAoIXJlZnJlc2hDYWNoZSkge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVkQW5hbHl0aWNzKGNhY2hlS2V5KTtcclxuICAgICAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgICB0aGlzLm1ldHJpY3MuY2FjaGVIaXRzKys7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5tZXRyaWNzLmNhY2hlTWlzc2VzKys7XHJcblxyXG4gICAgICAvLyBGZXRjaCBjb21wcmVoZW5zaXZlIGRhdGFcclxuICAgICAgY29uc3QgW2lwb0RhdGEsIGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEsIGRlbWFuZERhdGEsIGNhdGVnb3J5RGF0YV0gPVxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICAgIHRoaXMuZ2V0SVBPQmFzaWNEYXRhKGlwb0lkKSxcclxuICAgICAgICAgIHRoaXMuZ2V0R01QRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0U3Vic2NyaXB0aW9uRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0RGVtYW5kRGF0YShpcG9JZCwgdGltZVJhbmdlKSxcclxuICAgICAgICAgIHRoaXMuZ2V0SVBPQ2F0ZWdvcmllcyhpcG9JZCksXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICBpZiAoIWlwb0RhdGEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElQTyB3aXRoIElEICR7aXBvSWR9IG5vdCBmb3VuZGApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDb21wdXRlIGFuYWx5dGljc1xyXG4gICAgICBjb25zdCBhbmFseXRpY3MgPSB7XHJcbiAgICAgICAgaXBvSWQsXHJcbiAgICAgICAgc3ltYm9sOiBpcG9EYXRhLnN5bWJvbCxcclxuICAgICAgICBuYW1lOiBpcG9EYXRhLm5hbWUsXHJcbiAgICAgICAgc3RhdHVzOiBpcG9EYXRhLnN0YXR1cyxcclxuICAgICAgICBjb21wdXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcblxyXG4gICAgICAgIC8vIEJhc2ljIG1ldHJpY3NcclxuICAgICAgICBiYXNpY01ldHJpY3M6IHRoaXMuY29tcHV0ZUJhc2ljTWV0cmljcyhpcG9EYXRhKSxcclxuXHJcbiAgICAgICAgLy8gR01QIGFuYWx5dGljc1xyXG4gICAgICAgIGdtcEFuYWx5dGljczogdGhpcy5jb21wdXRlR01QQW5hbHl0aWNzKGdtcERhdGEpLFxyXG5cclxuICAgICAgICAvLyBTdWJzY3JpcHRpb24gYW5hbHl0aWNzXHJcbiAgICAgICAgc3Vic2NyaXB0aW9uQW5hbHl0aWNzOiB0aGlzLmNvbXB1dGVTdWJzY3JpcHRpb25BbmFseXRpY3MoXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLFxyXG4gICAgICAgICAgY2F0ZWdvcnlEYXRhXHJcbiAgICAgICAgKSxcclxuXHJcbiAgICAgICAgLy8gTWFya2V0IGRlbWFuZCBhbmFseXRpY3NcclxuICAgICAgICBkZW1hbmRBbmFseXRpY3M6IHRoaXMuY29tcHV0ZURlbWFuZEFuYWx5dGljcyhkZW1hbmREYXRhKSxcclxuXHJcbiAgICAgICAgLy8gUmlzayBhc3Nlc3NtZW50XHJcbiAgICAgICAgcmlza0Fzc2Vzc21lbnQ6IHRoaXMuY29tcHV0ZVJpc2tBc3Nlc3NtZW50KFxyXG4gICAgICAgICAgaXBvRGF0YSxcclxuICAgICAgICAgIGdtcERhdGEsXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICAgICAgKSxcclxuXHJcbiAgICAgICAgLy8gUGVyZm9ybWFuY2UgaW5kaWNhdG9yc1xyXG4gICAgICAgIHBlcmZvcm1hbmNlSW5kaWNhdG9yczogdGhpcy5jb21wdXRlUGVyZm9ybWFuY2VJbmRpY2F0b3JzKFxyXG4gICAgICAgICAgaXBvRGF0YSxcclxuICAgICAgICAgIGdtcERhdGEsXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICAgICAgKSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIEFkZCBoaXN0b3JpY2FsIGFuYWx5c2lzXHJcbiAgICAgIGlmIChpbmNsdWRlSGlzdG9yaWNhbCkge1xyXG4gICAgICAgIGFuYWx5dGljcy5oaXN0b3JpY2FsQW5hbHlzaXMgPSBhd2FpdCB0aGlzLmNvbXB1dGVIaXN0b3JpY2FsQW5hbHlzaXMoXHJcbiAgICAgICAgICBpcG9JZCxcclxuICAgICAgICAgIHRpbWVSYW5nZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkZCBwcmVkaWN0aW9uc1xyXG4gICAgICBpZiAoaW5jbHVkZVByZWRpY3Rpb25zKSB7XHJcbiAgICAgICAgYW5hbHl0aWNzLnByZWRpY3Rpb25zID0gYXdhaXQgdGhpcy5jb21wdXRlUHJlZGljdGlvbnMoYW5hbHl0aWNzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWRkIGNvbXBhcmF0aXZlIGFuYWx5c2lzXHJcbiAgICAgIGFuYWx5dGljcy5jb21wYXJhdGl2ZUFuYWx5c2lzID1cclxuICAgICAgICBhd2FpdCB0aGlzLmNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzKGlwb0RhdGEpO1xyXG5cclxuICAgICAgLy8gQWRkIGluc2lnaHRzIGFuZCByZWNvbW1lbmRhdGlvbnNcclxuICAgICAgYW5hbHl0aWNzLmluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZUluc2lnaHRzKGFuYWx5dGljcyk7XHJcbiAgICAgIGFuYWx5dGljcy5yZWNvbW1lbmRhdGlvbnMgPSB0aGlzLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKGFuYWx5dGljcyk7XHJcblxyXG4gICAgICAvLyBDYWNoZSB0aGUgcmVzdWx0c1xyXG4gICAgICBhd2FpdCB0aGlzLnNldENhY2hlZEFuYWx5dGljcyhcclxuICAgICAgICBjYWNoZUtleSxcclxuICAgICAgICBhbmFseXRpY3MsXHJcbiAgICAgICAgdGhpcy5jYWNoZVRUTC5ERVRBSUxFRFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIG1ldHJpY3NcclxuICAgICAgY29uc3QgY29tcHV0YXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgdGhpcy51cGRhdGVNZXRyaWNzKGNvbXB1dGF0aW9uVGltZSk7XHJcblxyXG4gICAgICByZXR1cm4gYW5hbHl0aWNzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5tZXRyaWNzLmVycm9ycysrO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBBbmFseXRpY3MgY29tcHV0YXRpb24gZmFpbGVkIGZvciBJUE8gJHtpcG9JZH06YCwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJhc2ljIElQTyBtZXRyaWNzIGNvbXB1dGF0aW9uXHJcbiAgY29tcHV0ZUJhc2ljTWV0cmljcyhpcG9EYXRhKSB7XHJcbiAgICBjb25zdCBwcmljZVJhbmdlID0gaXBvRGF0YS5tYXhQcmljZSAtIGlwb0RhdGEubWluUHJpY2U7XHJcbiAgICBjb25zdCBpc3N1ZVNpemUgPSBOdW1iZXIoaXBvRGF0YS5pc3N1ZVNpemUgfHwgMCk7XHJcbiAgICBjb25zdCBsb3RWYWx1ZSA9IGlwb0RhdGEubG90U2l6ZSAqIChpcG9EYXRhLm1heFByaWNlIHx8IDApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByaWNlUmFuZ2U6IHtcclxuICAgICAgICBtaW46IGlwb0RhdGEubWluUHJpY2UsXHJcbiAgICAgICAgbWF4OiBpcG9EYXRhLm1heFByaWNlLFxyXG4gICAgICAgIHNwcmVhZDogcHJpY2VSYW5nZSxcclxuICAgICAgICBzcHJlYWRQZXJjZW50YWdlOlxyXG4gICAgICAgICAgaXBvRGF0YS5taW5QcmljZSA+IDBcclxuICAgICAgICAgICAgPyBwYXJzZUZsb2F0KCgocHJpY2VSYW5nZSAvIGlwb0RhdGEubWluUHJpY2UpICogMTAwKS50b0ZpeGVkKDIpKVxyXG4gICAgICAgICAgICA6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIGlzc3VlOiB7XHJcbiAgICAgICAgc2l6ZTogaXNzdWVTaXplLFxyXG4gICAgICAgIHNpemVDYXRlZ29yeTogdGhpcy5jYXRlZ29yaXplSXNzdWVTaXplKGlzc3VlU2l6ZSksXHJcbiAgICAgICAgbG90U2l6ZTogaXBvRGF0YS5sb3RTaXplLFxyXG4gICAgICAgIGxvdFZhbHVlLFxyXG4gICAgICAgIGZhY2VWYWx1ZTogaXBvRGF0YS5mYWNlVmFsdWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVsaW5lOiB7XHJcbiAgICAgICAgb3BlbkRhdGU6IGlwb0RhdGEub3BlbkRhdGUsXHJcbiAgICAgICAgY2xvc2VEYXRlOiBpcG9EYXRhLmNsb3NlRGF0ZSxcclxuICAgICAgICBsaXN0aW5nRGF0ZTogaXBvRGF0YS5saXN0aW5nRGF0ZSxcclxuICAgICAgICBkdXJhdGlvbkRheXM6IHRoaXMuY2FsY3VsYXRlRHVyYXRpb24oXHJcbiAgICAgICAgICBpcG9EYXRhLm9wZW5EYXRlLFxyXG4gICAgICAgICAgaXBvRGF0YS5jbG9zZURhdGVcclxuICAgICAgICApLFxyXG4gICAgICAgIGRheXNUb0xpc3Rpbmc6IGlwb0RhdGEubGlzdGluZ0RhdGVcclxuICAgICAgICAgID8gdGhpcy5jYWxjdWxhdGVEdXJhdGlvbihpcG9EYXRhLmNsb3NlRGF0ZSwgaXBvRGF0YS5saXN0aW5nRGF0ZSlcclxuICAgICAgICAgIDogbnVsbCxcclxuICAgICAgfSxcclxuICAgICAgdHlwZToge1xyXG4gICAgICAgIGlzc3VlVHlwZTogaXBvRGF0YS5pc3N1ZVR5cGUsXHJcbiAgICAgICAgc3ViVHlwZTogaXBvRGF0YS5zdWJUeXBlLFxyXG4gICAgICAgIHJlZ2lzdHJhcjogaXBvRGF0YS5yZWdpc3RyYXIsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gR01QIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVHTVBBbmFseXRpY3MoZ21wRGF0YSkge1xyXG4gICAgaWYgKCFnbXBEYXRhIHx8IGdtcERhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIEdNUCBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IGdtcERhdGEubWFwKChnKSA9PiBnLnZhbHVlKTtcclxuICAgIGNvbnN0IHBlcmNlbnRhZ2VzID0gZ21wRGF0YS5tYXAoKGcpID0+IGcucGVyY2VudGFnZSk7XHJcbiAgICBjb25zdCB2b2x1bWVzID0gZ21wRGF0YS5tYXAoKGcpID0+IGcudm9sdW1lIHx8IDApO1xyXG5cclxuICAgIC8vIFN0YXRpc3RpY2FsIG1lYXN1cmVzXHJcbiAgICBjb25zdCBzdGF0cyA9IHtcclxuICAgICAgY3VycmVudDogdmFsdWVzWzBdIHx8IDAsXHJcbiAgICAgIGF2ZXJhZ2U6IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpLFxyXG4gICAgICBtZWRpYW46IHRoaXMuY2FsY3VsYXRlTWVkaWFuKHZhbHVlcyksXHJcbiAgICAgIG1vZGU6IHRoaXMuY2FsY3VsYXRlTW9kZSh2YWx1ZXMpLFxyXG4gICAgICBtaW46IE1hdGgubWluKC4uLnZhbHVlcyksXHJcbiAgICAgIG1heDogTWF0aC5tYXgoLi4udmFsdWVzKSxcclxuICAgICAgcmFuZ2U6IE1hdGgubWF4KC4uLnZhbHVlcykgLSBNYXRoLm1pbiguLi52YWx1ZXMpLFxyXG4gICAgICBzdGFuZGFyZERldmlhdGlvbjogdGhpcy5jYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpLFxyXG4gICAgICB2YXJpYW5jZTogdGhpcy5jYWxjdWxhdGVWYXJpYW5jZSh2YWx1ZXMpLFxyXG4gICAgICBjb2VmZmljaWVudDogdGhpcy5jYWxjdWxhdGVDb2VmZmljaWVudE9mVmFyaWF0aW9uKHZhbHVlcyksXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRyZW5kIGFuYWx5c2lzXHJcbiAgICBjb25zdCB0cmVuZCA9IHRoaXMuYW5hbHl6ZVRyZW5kKHZhbHVlcyk7XHJcblxyXG4gICAgLy8gVm9sYXRpbGl0eSBhbmFseXNpc1xyXG4gICAgY29uc3Qgdm9sYXRpbGl0eSA9IHRoaXMuYW5hbHl6ZVZvbGF0aWxpdHkoXHJcbiAgICAgIHZhbHVlcyxcclxuICAgICAgZ21wRGF0YS5tYXAoKGcpID0+IGcudGltZXN0YW1wKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBWb2x1bWUgYW5hbHlzaXNcclxuICAgIGNvbnN0IHZvbHVtZUFuYWx5c2lzID0gdGhpcy5hbmFseXplVm9sdW1lKHZvbHVtZXMsIHZhbHVlcyk7XHJcblxyXG4gICAgLy8gUHJpY2UgbW9tZW50dW1cclxuICAgIGNvbnN0IG1vbWVudHVtID0gdGhpcy5jYWxjdWxhdGVNb21lbnR1bSh2YWx1ZXMpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1czogXCJhdmFpbGFibGVcIixcclxuICAgICAgcmVjb3JkQ291bnQ6IGdtcERhdGEubGVuZ3RoLFxyXG4gICAgICB0aW1lc3BhbjogdGhpcy5jYWxjdWxhdGVUaW1lc3BhbihnbXBEYXRhKSxcclxuICAgICAgc3RhdGlzdGljczogc3RhdHMsXHJcbiAgICAgIHRyZW5kLFxyXG4gICAgICB2b2xhdGlsaXR5LFxyXG4gICAgICB2b2x1bWVBbmFseXNpcyxcclxuICAgICAgbW9tZW50dW0sXHJcbiAgICAgIHByaWNlVGFyZ2V0czogdGhpcy5jYWxjdWxhdGVQcmljZVRhcmdldHMoc3RhdHMpLFxyXG4gICAgICByaXNrTWV0cmljczogdGhpcy5jYWxjdWxhdGVHTVBSaXNrTWV0cmljcyh2YWx1ZXMpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFN1YnNjcmlwdGlvbiBhbmFseXRpY3MgY29tcHV0YXRpb25cclxuICBjb21wdXRlU3Vic2NyaXB0aW9uQW5hbHl0aWNzKHN1YnNjcmlwdGlvbkRhdGEsIGNhdGVnb3J5RGF0YSkge1xyXG4gICAgaWYgKCFzdWJzY3JpcHRpb25EYXRhIHx8IHN1YnNjcmlwdGlvbkRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIHN1YnNjcmlwdGlvbiBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBsYXRlc3Qgc3Vic2NyaXB0aW9uIGJ5IGNhdGVnb3J5XHJcbiAgICBjb25zdCBsYXRlc3RCeUNhdGVnb3J5ID1cclxuICAgICAgdGhpcy5nZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpO1xyXG5cclxuICAgIC8vIE92ZXJhbGwgc3Vic2NyaXB0aW9uIG1ldHJpY3NcclxuICAgIGNvbnN0IG92ZXJhbGxNZXRyaWNzID0ge1xyXG4gICAgICB0b3RhbFN1YnNjcmlwdGlvbjogdGhpcy5jYWxjdWxhdGVPdmVyYWxsU3Vic2NyaXB0aW9uKGxhdGVzdEJ5Q2F0ZWdvcnkpLFxyXG4gICAgICBpc092ZXJzdWJzY3JpYmVkOiBmYWxzZSxcclxuICAgICAgb3ZlcnN1YnNjcmlwdGlvblJhdGlvOiAwLFxyXG4gICAgICB0b3RhbEFwcGxpY2F0aW9uczogMCxcclxuICAgICAgdG90YWxRdWFudGl0eTogQmlnSW50KDApLFxyXG4gICAgfTtcclxuXHJcbiAgICBvdmVyYWxsTWV0cmljcy5pc092ZXJzdWJzY3JpYmVkID0gb3ZlcmFsbE1ldHJpY3MudG90YWxTdWJzY3JpcHRpb24gPiAxO1xyXG4gICAgb3ZlcmFsbE1ldHJpY3Mub3ZlcnN1YnNjcmlwdGlvblJhdGlvID0gTWF0aC5tYXgoXHJcbiAgICAgIDAsXHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsU3Vic2NyaXB0aW9uIC0gMVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBDYXRlZ29yeS13aXNlIGFuYWx5c2lzXHJcbiAgICBjb25zdCBjYXRlZ29yeUFuYWx5c2lzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0QnlDYXRlZ29yeSkpIHtcclxuICAgICAgY2F0ZWdvcnlBbmFseXNpc1tjYXRlZ29yeV0gPSB7XHJcbiAgICAgICAgc3Vic2NyaXB0aW9uUmF0aW86IGRhdGEuc3Vic2NyaXB0aW9uUmF0aW8sXHJcbiAgICAgICAgcXVhbnRpdHk6IGRhdGEucXVhbnRpdHkudG9TdHJpbmcoKSxcclxuICAgICAgICBiaWRDb3VudDogZGF0YS5iaWRDb3VudCxcclxuICAgICAgICBhdmVyYWdlQmlkU2l6ZTpcclxuICAgICAgICAgIGRhdGEuYmlkQ291bnQgPiAwID8gTnVtYmVyKGRhdGEucXVhbnRpdHkpIC8gZGF0YS5iaWRDb3VudCA6IDAsXHJcbiAgICAgICAgdGltZXN0YW1wOiBkYXRhLnRpbWVzdGFtcCxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsQXBwbGljYXRpb25zICs9IGRhdGEuYmlkQ291bnQ7XHJcbiAgICAgIG92ZXJhbGxNZXRyaWNzLnRvdGFsUXVhbnRpdHkgKz0gZGF0YS5xdWFudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gcGF0dGVybiBhbmFseXNpc1xyXG4gICAgY29uc3QgcGF0dGVybnMgPSB0aGlzLmFuYWx5emVTdWJzY3JpcHRpb25QYXR0ZXJucyhzdWJzY3JpcHRpb25EYXRhKTtcclxuXHJcbiAgICAvLyBBbGxvdG1lbnQgcHJvYmFiaWxpdHkgY2FsY3VsYXRpb25cclxuICAgIGNvbnN0IGFsbG90bWVudFByb2JhYmlsaXR5ID1cclxuICAgICAgdGhpcy5jYWxjdWxhdGVBbGxvdG1lbnRQcm9iYWJpbGl0aWVzKGxhdGVzdEJ5Q2F0ZWdvcnkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1czogXCJhdmFpbGFibGVcIixcclxuICAgICAgcmVjb3JkQ291bnQ6IHN1YnNjcmlwdGlvbkRhdGEubGVuZ3RoLFxyXG4gICAgICBvdmVyYWxsOiBvdmVyYWxsTWV0cmljcyxcclxuICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcnlBbmFseXNpcyxcclxuICAgICAgcGF0dGVybnMsXHJcbiAgICAgIGFsbG90bWVudFByb2JhYmlsaXR5LFxyXG4gICAgICBpbnNpZ2h0czogdGhpcy5nZW5lcmF0ZVN1YnNjcmlwdGlvbkluc2lnaHRzKFxyXG4gICAgICAgIG92ZXJhbGxNZXRyaWNzLFxyXG4gICAgICAgIGNhdGVnb3J5QW5hbHlzaXNcclxuICAgICAgKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBNYXJrZXQgZGVtYW5kIGFuYWx5dGljcyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVEZW1hbmRBbmFseXRpY3MoZGVtYW5kRGF0YSkge1xyXG4gICAgaWYgKCFkZW1hbmREYXRhIHx8IGRlbWFuZERhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcIm5vX2RhdGFcIixcclxuICAgICAgICBtZXNzYWdlOiBcIk5vIGRlbWFuZCBkYXRhIGF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaWNlLXdpc2UgZGVtYW5kIGFuYWx5c2lzXHJcbiAgICBjb25zdCBwcmljZVdpc2VEZW1hbmQgPSB0aGlzLmFuYWx5emVQcmljZVdpc2VEZW1hbmQoZGVtYW5kRGF0YSk7XHJcblxyXG4gICAgLy8gQ3V0LW9mZiBhbmFseXNpc1xyXG4gICAgY29uc3QgY3V0T2ZmQW5hbHlzaXMgPSB0aGlzLmFuYWx5emVDdXRPZmZEZW1hbmQoZGVtYW5kRGF0YSk7XHJcblxyXG4gICAgLy8gRGVtYW5kIGRpc3RyaWJ1dGlvblxyXG4gICAgY29uc3QgZGlzdHJpYnV0aW9uID0gdGhpcy5hbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uKGRlbWFuZERhdGEpO1xyXG5cclxuICAgIC8vIEJpZCBjb25jZW50cmF0aW9uXHJcbiAgICBjb25zdCBjb25jZW50cmF0aW9uID0gdGhpcy5hbmFseXplQmlkQ29uY2VudHJhdGlvbihkZW1hbmREYXRhKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXM6IFwiYXZhaWxhYmxlXCIsXHJcbiAgICAgIHJlY29yZENvdW50OiBkZW1hbmREYXRhLmxlbmd0aCxcclxuICAgICAgcHJpY2VXaXNlRGVtYW5kLFxyXG4gICAgICBjdXRPZmZBbmFseXNpcyxcclxuICAgICAgZGlzdHJpYnV0aW9uLFxyXG4gICAgICBjb25jZW50cmF0aW9uLFxyXG4gICAgICBzdW1tYXJ5OiB7XHJcbiAgICAgICAgdG90YWxRdWFudGl0eTogZGVtYW5kRGF0YS5yZWR1Y2UoXHJcbiAgICAgICAgICAoc3VtLCBkKSA9PiBzdW0gKyBOdW1iZXIoZC5hYnNvbHV0ZVF1YW50aXR5KSxcclxuICAgICAgICAgIDBcclxuICAgICAgICApLFxyXG4gICAgICAgIHRvdGFsQmlkczogZGVtYW5kRGF0YS5yZWR1Y2UoKHN1bSwgZCkgPT4gc3VtICsgZC5hYnNvbHV0ZUJpZENvdW50LCAwKSxcclxuICAgICAgICBwcmljZVJhbmdlOiB7XHJcbiAgICAgICAgICBtaW46IE1hdGgubWluKFxyXG4gICAgICAgICAgICAuLi5kZW1hbmREYXRhLm1hcCgoZCkgPT4gZC5wcmljZSkuZmlsdGVyKChwKSA9PiBwICE9PSBudWxsKVxyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIG1heDogTWF0aC5tYXgoXHJcbiAgICAgICAgICAgIC4uLmRlbWFuZERhdGEubWFwKChkKSA9PiBkLnByaWNlKS5maWx0ZXIoKHApID0+IHAgIT09IG51bGwpXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gUmlzayBhc3Nlc3NtZW50IGNvbXB1dGF0aW9uXHJcbiAgY29tcHV0ZVJpc2tBc3Nlc3NtZW50KGlwb0RhdGEsIGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIGxldCByaXNrU2NvcmUgPSA1MDsgLy8gQmFzZSByaXNrIHNjb3JlXHJcbiAgICBjb25zdCByaXNrRmFjdG9ycyA9IFtdO1xyXG5cclxuICAgIC8vIEdNUCB2b2xhdGlsaXR5IHJpc2tcclxuICAgIGlmIChnbXBEYXRhICYmIGdtcERhdGEubGVuZ3RoID4gMSkge1xyXG4gICAgICBjb25zdCBnbXBWYWx1ZXMgPSBnbXBEYXRhLm1hcCgoZykgPT4gZy52YWx1ZSk7XHJcbiAgICAgIGNvbnN0IHZvbGF0aWxpdHkgPSB0aGlzLmNhbGN1bGF0ZVN0YW5kYXJkRGV2aWF0aW9uKGdtcFZhbHVlcyk7XHJcbiAgICAgIGNvbnN0IGF2Z0dNUCA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZShnbXBWYWx1ZXMpO1xyXG4gICAgICBjb25zdCB2b2xhdGlsaXR5UmF0aW8gPSBhdmdHTVAgPiAwID8gdm9sYXRpbGl0eSAvIGF2Z0dNUCA6IDA7XHJcblxyXG4gICAgICBpZiAodm9sYXRpbGl0eVJhdGlvID4gMC4zKSB7XHJcbiAgICAgICAgcmlza1Njb3JlICs9IDIwO1xyXG4gICAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJISUdIX0dNUF9WT0xBVElMSVRZXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiaGlnaFwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBIaWdoIEdNUCB2b2xhdGlsaXR5ICgkeyh2b2xhdGlsaXR5UmF0aW8gKiAxMDApLnRvRml4ZWQoMSl9JSlgLFxyXG4gICAgICAgICAgbWl0aWdhdGlvbjogXCJDb25zaWRlciB3YWl0aW5nIGZvciBwcmljZSBzdGFiaWxpemF0aW9uXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodm9sYXRpbGl0eVJhdGlvID4gMC4xNSkge1xyXG4gICAgICAgIHJpc2tTY29yZSArPSAxMDtcclxuICAgICAgICByaXNrRmFjdG9ycy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6IFwiTU9ERVJBVEVfR01QX1ZPTEFUSUxJVFlcIixcclxuICAgICAgICAgIGltcGFjdDogXCJtZWRpdW1cIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgTW9kZXJhdGUgR01QIHZvbGF0aWxpdHkgKCR7KHZvbGF0aWxpdHlSYXRpbyAqIDEwMCkudG9GaXhlZCgxKX0lKWAsXHJcbiAgICAgICAgICBtaXRpZ2F0aW9uOiBcIk1vbml0b3IgR01QIHRyZW5kcyBjbG9zZWx5XCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gcmlza1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbkRhdGEgJiYgc3Vic2NyaXB0aW9uRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGxhdGVzdFN1YnNjcmlwdGlvbiA9XHJcbiAgICAgICAgdGhpcy5nZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpO1xyXG4gICAgICBjb25zdCBvdmVyYWxsU3Vic2NyaXB0aW9uID1cclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZU92ZXJhbGxTdWJzY3JpcHRpb24obGF0ZXN0U3Vic2NyaXB0aW9uKTtcclxuXHJcbiAgICAgIGlmIChvdmVyYWxsU3Vic2NyaXB0aW9uIDwgMC41KSB7XHJcbiAgICAgICAgcmlza1Njb3JlICs9IDI1O1xyXG4gICAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJMT1dfU1VCU0NSSVBUSU9OXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiaGlnaFwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBMb3cgc3Vic2NyaXB0aW9uIHJhdGlvICgke292ZXJhbGxTdWJzY3JpcHRpb24udG9GaXhlZCgyKX14KWAsXHJcbiAgICAgICAgICBtaXRpZ2F0aW9uOiBcIlJlY29uc2lkZXIgaW52ZXN0bWVudCBkdWUgdG8gd2VhayBkZW1hbmRcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChvdmVyYWxsU3Vic2NyaXB0aW9uID4gMTApIHtcclxuICAgICAgICByaXNrU2NvcmUgKz0gMTU7XHJcbiAgICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcIk9WRVJfU1VCU0NSSVBUSU9OXCIsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYFZlcnkgaGlnaCBzdWJzY3JpcHRpb24gKCR7b3ZlcmFsbFN1YnNjcmlwdGlvbi50b0ZpeGVkKDIpfXgpYCxcclxuICAgICAgICAgIG1pdGlnYXRpb246IFwiTG93IGFsbG90bWVudCBwcm9iYWJpbGl0eSwgY29uc2lkZXIgYWx0ZXJuYXRpdmVzXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJc3N1ZSBzaXplIHJpc2tcclxuICAgIGNvbnN0IGlzc3VlU2l6ZSA9IE51bWJlcihpcG9EYXRhLmlzc3VlU2l6ZSB8fCAwKTtcclxuICAgIGlmIChpc3N1ZVNpemUgPiA1MDAwICogMTAwMDAwMDApIHtcclxuICAgICAgLy8gNTAwMCBDclxyXG4gICAgICByaXNrU2NvcmUgKz0gMTA7XHJcbiAgICAgIHJpc2tGYWN0b3JzLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiTEFSR0VfSVNTVUVfU0laRVwiLFxyXG4gICAgICAgIGltcGFjdDogXCJtZWRpdW1cIixcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJMYXJnZSBpc3N1ZSBzaXplIG1heSBpbXBhY3QgbGlxdWlkaXR5XCIsXHJcbiAgICAgICAgbWl0aWdhdGlvbjogXCJFbnN1cmUgYWRlcXVhdGUgbWFya2V0IHN1cHBvcnQgcG9zdC1saXN0aW5nXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaWNlIGJhbmQgcmlza1xyXG4gICAgY29uc3QgcHJpY2VSYW5nZSA9IGlwb0RhdGEubWF4UHJpY2UgLSBpcG9EYXRhLm1pblByaWNlO1xyXG4gICAgY29uc3Qgc3ByZWFkUGVyY2VudGFnZSA9XHJcbiAgICAgIGlwb0RhdGEubWluUHJpY2UgPiAwID8gKHByaWNlUmFuZ2UgLyBpcG9EYXRhLm1pblByaWNlKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgaWYgKHNwcmVhZFBlcmNlbnRhZ2UgPiAyMCkge1xyXG4gICAgICByaXNrU2NvcmUgKz0gNTtcclxuICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XHJcbiAgICAgICAgdHlwZTogXCJXSURFX1BSSUNFX0JBTkRcIixcclxuICAgICAgICBpbXBhY3Q6IFwibG93XCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGBXaWRlIHByaWNlIGJhbmQgKCR7c3ByZWFkUGVyY2VudGFnZS50b0ZpeGVkKDEpfSUpYCxcclxuICAgICAgICBtaXRpZ2F0aW9uOiBcIlByaWNlIGRpc2NvdmVyeSBtYXkgYmUgY2hhbGxlbmdpbmdcIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm9ybWFsaXplIHJpc2sgc2NvcmVcclxuICAgIHJpc2tTY29yZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgcmlza1Njb3JlKSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgb3ZlcmFsbFJpc2tTY29yZTogcmlza1Njb3JlLFxyXG4gICAgICByaXNrTGV2ZWw6IHRoaXMuY2F0ZWdvcml6ZVJpc2tMZXZlbChyaXNrU2NvcmUpLFxyXG4gICAgICByaXNrRmFjdG9ycyxcclxuICAgICAgcmVjb21tZW5kYXRpb246IHRoaXMuZ2VuZXJhdGVSaXNrUmVjb21tZW5kYXRpb24ocmlza1Njb3JlLCByaXNrRmFjdG9ycyksXHJcbiAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gUGVyZm9ybWFuY2UgaW5kaWNhdG9ycyBjb21wdXRhdGlvblxyXG4gIGNvbXB1dGVQZXJmb3JtYW5jZUluZGljYXRvcnMoaXBvRGF0YSwgZ21wRGF0YSwgc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgY29uc3QgaW5kaWNhdG9ycyA9IHt9O1xyXG5cclxuICAgIC8vIE1hcmtldCBzZW50aW1lbnQgaW5kaWNhdG9yXHJcbiAgICBpbmRpY2F0b3JzLm1hcmtldFNlbnRpbWVudCA9IHRoaXMuY2FsY3VsYXRlTWFya2V0U2VudGltZW50KFxyXG4gICAgICBnbXBEYXRhLFxyXG4gICAgICBzdWJzY3JpcHRpb25EYXRhXHJcbiAgICApO1xyXG5cclxuICAgIC8vIERlbWFuZCBzdHJlbmd0aCBpbmRpY2F0b3JcclxuICAgIGluZGljYXRvcnMuZGVtYW5kU3RyZW5ndGggPSB0aGlzLmNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoKHN1YnNjcmlwdGlvbkRhdGEpO1xyXG5cclxuICAgIC8vIFByaWNlIG1vbWVudHVtIGluZGljYXRvclxyXG4gICAgaWYgKGdtcERhdGEgJiYgZ21wRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGluZGljYXRvcnMucHJpY2VNb21lbnR1bSA9IHRoaXMuY2FsY3VsYXRlTW9tZW50dW0oXHJcbiAgICAgICAgZ21wRGF0YS5tYXAoKGcpID0+IGcudmFsdWUpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTGlzdGluZyByZWFkaW5lc3MgaW5kaWNhdG9yXHJcbiAgICBpbmRpY2F0b3JzLmxpc3RpbmdSZWFkaW5lc3MgPSB0aGlzLmNhbGN1bGF0ZUxpc3RpbmdSZWFkaW5lc3MoXHJcbiAgICAgIGlwb0RhdGEsXHJcbiAgICAgIHN1YnNjcmlwdGlvbkRhdGFcclxuICAgICk7XHJcblxyXG4gICAgLy8gSW52ZXN0bWVudCBhdHRyYWN0aXZlbmVzcyBzY29yZVxyXG4gICAgaW5kaWNhdG9ycy5hdHRyYWN0aXZlbmVzc1Njb3JlID1cclxuICAgICAgdGhpcy5jYWxjdWxhdGVBdHRyYWN0aXZlbmVzc1Njb3JlKGluZGljYXRvcnMpO1xyXG5cclxuICAgIHJldHVybiBpbmRpY2F0b3JzO1xyXG4gIH1cclxuXHJcbiAgLy8gSGlzdG9yaWNhbCBhbmFseXNpcyBjb21wdXRhdGlvblxyXG4gIGFzeW5jIGNvbXB1dGVIaXN0b3JpY2FsQW5hbHlzaXMoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IGNvbXBhcmFibGUgSVBPcyBmb3IgYmVuY2htYXJraW5nXHJcbiAgICAgIGNvbnN0IGNvbXBhcmFibGVJUE9zID0gYXdhaXQgdGhpcy5nZXRDb21wYXJhYmxlSVBPcyhpcG9JZCwgdGltZVJhbmdlKTtcclxuXHJcbiAgICAgIC8vIEhpc3RvcmljYWwgcGVyZm9ybWFuY2UgbWV0cmljc1xyXG4gICAgICBjb25zdCBoaXN0b3JpY2FsTWV0cmljcyA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlSGlzdG9yaWNhbE1ldHJpY3MoXHJcbiAgICAgICAgaXBvSWQsXHJcbiAgICAgICAgdGltZVJhbmdlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBUcmVuZCBhbmFseXNpcyBvdmVyIHRpbWVcclxuICAgICAgY29uc3QgdHJlbmRzID0gYXdhaXQgdGhpcy5jYWxjdWxhdGVIaXN0b3JpY2FsVHJlbmRzKGlwb0lkLCB0aW1lUmFuZ2UpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0aW1lUmFuZ2UsXHJcbiAgICAgICAgY29tcGFyYWJsZUlQT3M6IGNvbXBhcmFibGVJUE9zLmxlbmd0aCxcclxuICAgICAgICBtZXRyaWNzOiBoaXN0b3JpY2FsTWV0cmljcyxcclxuICAgICAgICB0cmVuZHMsXHJcbiAgICAgICAgYmVuY2htYXJrczogYXdhaXQgdGhpcy5jYWxjdWxhdGVCZW5jaG1hcmtzKGNvbXBhcmFibGVJUE9zKSxcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJIaXN0b3JpY2FsIGFuYWx5c2lzIGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiSGlzdG9yaWNhbCBhbmFseXNpcyB1bmF2YWlsYWJsZVwiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJlZGljdGlvbnMgY29tcHV0YXRpb25cclxuICBhc3luYyBjb21wdXRlUHJlZGljdGlvbnMoYW5hbHl0aWNzKSB7XHJcbiAgICBjb25zdCBwcmVkaWN0aW9ucyA9IHt9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIExpc3RpbmcgZ2FpbiBwcmVkaWN0aW9uXHJcbiAgICAgIHByZWRpY3Rpb25zLmxpc3RpbmdHYWluID0gdGhpcy5wcmVkaWN0TGlzdGluZ0dhaW4oYW5hbHl0aWNzKTtcclxuXHJcbiAgICAgIC8vIEFsbG90bWVudCBwcm9iYWJpbGl0eSBwcmVkaWN0aW9uXHJcbiAgICAgIHByZWRpY3Rpb25zLmFsbG90bWVudFByb2JhYmlsaXR5ID1cclxuICAgICAgICB0aGlzLnByZWRpY3RBbGxvdG1lbnRQcm9iYWJpbGl0eShhbmFseXRpY3MpO1xyXG5cclxuICAgICAgLy8gUHJpY2UgdGFyZ2V0IHByZWRpY3Rpb25cclxuICAgICAgcHJlZGljdGlvbnMucHJpY2VUYXJnZXRzID0gdGhpcy5wcmVkaWN0UHJpY2VUYXJnZXRzKGFuYWx5dGljcyk7XHJcblxyXG4gICAgICAvLyBSaXNrLWFkanVzdGVkIHJldHVybnNcclxuICAgICAgcHJlZGljdGlvbnMucmlza0FkanVzdGVkUmV0dXJucyA9IHRoaXMuY2FsY3VsYXRlUmlza0FkanVzdGVkUmV0dXJucyhcclxuICAgICAgICBwcmVkaWN0aW9ucy5saXN0aW5nR2FpbixcclxuICAgICAgICBhbmFseXRpY3Mucmlza0Fzc2Vzc21lbnQub3ZlcmFsbFJpc2tTY29yZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gQ29uZmlkZW5jZSBpbnRlcnZhbHNcclxuICAgICAgcHJlZGljdGlvbnMuY29uZmlkZW5jZUludGVydmFscyA9XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVDb25maWRlbmNlSW50ZXJ2YWxzKHByZWRpY3Rpb25zKTtcclxuXHJcbiAgICAgIHByZWRpY3Rpb25zLmxhc3RVcGRhdGVkID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgICBwcmVkaWN0aW9ucy5tb2RlbCA9IFwiSVBPX0FOQUxZVElDU19WMS4wXCI7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiUHJlZGljdGlvbnMgY29tcHV0YXRpb24gZmFpbGVkOlwiLCBlcnJvcik7XHJcbiAgICAgIHByZWRpY3Rpb25zLnN0YXR1cyA9IFwiZXJyb3JcIjtcclxuICAgICAgcHJlZGljdGlvbnMubWVzc2FnZSA9IFwiUHJlZGljdGlvbnMgdW5hdmFpbGFibGVcIjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJlZGljdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvLyBDb21wYXJhdGl2ZSBhbmFseXNpc1xyXG4gIGFzeW5jIGNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzKGlwb0RhdGEpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEZpbmQgc2ltaWxhciBJUE9zIGJ5IHNlY3Rvciwgc2l6ZSwgYW5kIHRpbWUgcGVyaW9kXHJcbiAgICAgIGNvbnN0IHNpbWlsYXJJUE9zID0gYXdhaXQgdGhpcy5maW5kU2ltaWxhcklQT3MoaXBvRGF0YSk7XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgcmVsYXRpdmUgcGVyZm9ybWFuY2VcclxuICAgICAgY29uc3QgcmVsYXRpdmVQZXJmb3JtYW5jZSA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlUmVsYXRpdmVQZXJmb3JtYW5jZShcclxuICAgICAgICBpcG9EYXRhLFxyXG4gICAgICAgIHNpbWlsYXJJUE9zXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBNYXJrZXQgcG9zaXRpb25pbmdcclxuICAgICAgY29uc3QgbWFya2V0UG9zaXRpb25pbmcgPSB0aGlzLmNhbGN1bGF0ZU1hcmtldFBvc2l0aW9uaW5nKFxyXG4gICAgICAgIGlwb0RhdGEsXHJcbiAgICAgICAgc2ltaWxhcklQT3NcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc2ltaWxhcklQT3NDb3VudDogc2ltaWxhcklQT3MubGVuZ3RoLFxyXG4gICAgICAgIHJlbGF0aXZlUGVyZm9ybWFuY2UsXHJcbiAgICAgICAgbWFya2V0UG9zaXRpb25pbmcsXHJcbiAgICAgICAgYmVuY2htYXJrczogYXdhaXQgdGhpcy5jYWxjdWxhdGVJbmR1c3RyeUJlbmNobWFya3MoaXBvRGF0YS5pc3N1ZVR5cGUpLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkNvbXBhcmF0aXZlIGFuYWx5c2lzIGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiQ29tcGFyYXRpdmUgYW5hbHlzaXMgdW5hdmFpbGFibGVcIixcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEluc2lnaHRzIGdlbmVyYXRpb25cclxuICBnZW5lcmF0ZUluc2lnaHRzKGFuYWx5dGljcykge1xyXG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcclxuXHJcbiAgICAvLyBHTVAgaW5zaWdodHNcclxuICAgIGlmIChhbmFseXRpY3MuZ21wQW5hbHl0aWNzLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xyXG4gICAgICBjb25zdCBnbXAgPSBhbmFseXRpY3MuZ21wQW5hbHl0aWNzO1xyXG5cclxuICAgICAgaWYgKGdtcC5zdGF0aXN0aWNzLmN1cnJlbnQgPiBnbXAuc3RhdGlzdGljcy5hdmVyYWdlICogMS4yKSB7XHJcbiAgICAgICAgaW5zaWdodHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcInBvc2l0aXZlXCIsXHJcbiAgICAgICAgICBjYXRlZ29yeTogXCJHTVBcIixcclxuICAgICAgICAgIHRpdGxlOiBcIlN0cm9uZyBHTVAgUGVyZm9ybWFuY2VcIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgQ3VycmVudCBHTVAgKOKCuSR7Z21wLnN0YXRpc3RpY3MuY3VycmVudH0pIGlzICR7KChnbXAuc3RhdGlzdGljcy5jdXJyZW50IC8gZ21wLnN0YXRpc3RpY3MuYXZlcmFnZSAtIDEpICogMTAwKS50b0ZpeGVkKDEpfSUgYWJvdmUgYXZlcmFnZWAsXHJcbiAgICAgICAgICBpbXBhY3Q6IFwiSW5kaWNhdGVzIHN0cm9uZyBtYXJrZXQgZGVtYW5kXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChnbXAudm9sYXRpbGl0eS5sZXZlbCA9PT0gXCJoaWdoXCIpIHtcclxuICAgICAgICBpbnNpZ2h0cy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiR01QXCIsXHJcbiAgICAgICAgICB0aXRsZTogXCJIaWdoIFByaWNlIFZvbGF0aWxpdHlcIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgR01QIHNob3dpbmcgaGlnaCB2b2xhdGlsaXR5ICgke2dtcC52b2xhdGlsaXR5LmNvZWZmaWNpZW50fSUpYCxcclxuICAgICAgICAgIGltcGFjdDogXCJJbmNyZWFzZWQgdW5jZXJ0YWludHkgaW4gcHJpY2UgZXhwZWN0YXRpb25zXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTdWJzY3JpcHRpb24gaW5zaWdodHNcclxuICAgIGlmIChhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzLnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIikge1xyXG4gICAgICBjb25zdCBzdWIgPSBhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzO1xyXG5cclxuICAgICAgaWYgKHN1Yi5vdmVyYWxsLnRvdGFsU3Vic2NyaXB0aW9uID4gNSkge1xyXG4gICAgICAgIGluc2lnaHRzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogXCJwb3NpdGl2ZVwiLFxyXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiU3Vic2NyaXB0aW9uXCIsXHJcbiAgICAgICAgICB0aXRsZTogXCJTdHJvbmcgT3ZlcnN1YnNjcmlwdGlvblwiLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBJUE8gb3ZlcnN1YnNjcmliZWQgYnkgJHtzdWIub3ZlcmFsbC50b3RhbFN1YnNjcmlwdGlvbi50b0ZpeGVkKDIpfXhgLFxyXG4gICAgICAgICAgaW1wYWN0OiBcIkhpZ2ggaW52ZXN0b3IgaW50ZXJlc3QgYnV0IGxvd2VyIGFsbG90bWVudCBwcm9iYWJpbGl0eVwiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3ViLm92ZXJhbGwudG90YWxTdWJzY3JpcHRpb24gPCAxKSB7XHJcbiAgICAgICAgaW5zaWdodHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiBcIm5lZ2F0aXZlXCIsXHJcbiAgICAgICAgICBjYXRlZ29yeTogXCJTdWJzY3JpcHRpb25cIixcclxuICAgICAgICAgIHRpdGxlOiBcIlVuZGVyc3Vic2NyaWJlZCBJUE9cIixcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSVBPIHN1YnNjcmliZWQgb25seSAkeyhzdWIub3ZlcmFsbC50b3RhbFN1YnNjcmlwdGlvbiAqIDEwMCkudG9GaXhlZCgxKX0lYCxcclxuICAgICAgICAgIGltcGFjdDogXCJXZWFrIGludmVzdG9yIGRlbWFuZCwgcG90ZW50aWFsIGxpc3RpbmcgY29uY2VybnNcIixcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJpc2sgaW5zaWdodHNcclxuICAgIGNvbnN0IHJpc2sgPSBhbmFseXRpY3Mucmlza0Fzc2Vzc21lbnQ7XHJcbiAgICBpZiAocmlzay5yaXNrTGV2ZWwgPT09IFwiaGlnaFwiKSB7XHJcbiAgICAgIGluc2lnaHRzLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxyXG4gICAgICAgIGNhdGVnb3J5OiBcIlJpc2tcIixcclxuICAgICAgICB0aXRsZTogXCJIaWdoIFJpc2sgSW52ZXN0bWVudFwiLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgUmlzayBzY29yZSBvZiAke3Jpc2sub3ZlcmFsbFJpc2tTY29yZX0gaW5kaWNhdGVzIGVsZXZhdGVkIHJpc2tgLFxyXG4gICAgICAgIGltcGFjdDogXCJDYXJlZnVsIGNvbnNpZGVyYXRpb24gcmVxdWlyZWQgYmVmb3JlIGludmVzdG1lbnRcIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluc2lnaHRzO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVjb21tZW5kYXRpb25zIGdlbmVyYXRpb25cclxuICBnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhhbmFseXRpY3MpIHtcclxuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IFtdO1xyXG4gICAgY29uc3QgcmlzayA9IGFuYWx5dGljcy5yaXNrQXNzZXNzbWVudC5vdmVyYWxsUmlza1Njb3JlO1xyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID1cclxuICAgICAgYW5hbHl0aWNzLnN1YnNjcmlwdGlvbkFuYWx5dGljcy5vdmVyYWxsPy50b3RhbFN1YnNjcmlwdGlvbiB8fCAwO1xyXG4gICAgY29uc3QgZ21wID0gYW5hbHl0aWNzLmdtcEFuYWx5dGljcy5zdGF0aXN0aWNzPy5jdXJyZW50IHx8IDA7XHJcblxyXG4gICAgLy8gSW52ZXN0bWVudCByZWNvbW1lbmRhdGlvblxyXG4gICAgaWYgKHJpc2sgPCAzMCAmJiBzdWJzY3JpcHRpb24gPiAyICYmIGdtcCA+IDApIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQlVZXCIsXHJcbiAgICAgICAgY29uZmlkZW5jZTogXCJoaWdoXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIkxvdyByaXNrLCBzdHJvbmcgZGVtYW5kLCBwb3NpdGl2ZSBHTVBcIixcclxuICAgICAgICBhY3Rpb246IFwiQ29uc2lkZXIgYXBwbHlpbmcgZm9yIG1heGltdW0gYWxsb2NhdGlvblwiLFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAocmlzayA8IDUwICYmIHN1YnNjcmlwdGlvbiA+IDEpIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiSE9MRFwiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIk1vZGVyYXRlIHJpc2sgd2l0aCBhZGVxdWF0ZSBkZW1hbmRcIixcclxuICAgICAgICBhY3Rpb246IFwiQXBwbHkgd2l0aCBjYXV0aW9uLCBjb25zaWRlciBzbWFsbGVyIGFsbG9jYXRpb25cIixcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHJpc2sgPiA3MCB8fCBzdWJzY3JpcHRpb24gPCAwLjUpIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQVZPSURcIixcclxuICAgICAgICBjb25maWRlbmNlOiBcImhpZ2hcIixcclxuICAgICAgICByZWFzb25pbmc6IFwiSGlnaCByaXNrIG9yIHdlYWsgZGVtYW5kIGluZGljYXRvcnNcIixcclxuICAgICAgICBhY3Rpb246IFwiQ29uc2lkZXIgYWx0ZXJuYXRpdmUgaW52ZXN0bWVudCBvcHBvcnR1bml0aWVzXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRpbWluZyByZWNvbW1lbmRhdGlvbnNcclxuICAgIGlmIChhbmFseXRpY3MucGVyZm9ybWFuY2VJbmRpY2F0b3JzPy5saXN0aW5nUmVhZGluZXNzID4gMC44KSB7XHJcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcclxuICAgICAgICB0eXBlOiBcIlRJTUlOR1wiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwibWVkaXVtXCIsXHJcbiAgICAgICAgcmVhc29uaW5nOiBcIklQTyBhcHBlYXJzIHJlYWR5IGZvciBzdWNjZXNzZnVsIGxpc3RpbmdcIixcclxuICAgICAgICBhY3Rpb246IFwiR29vZCB0aW1pbmcgZm9yIGFwcGxpY2F0aW9uXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbG9jYXRpb24gcmVjb21tZW5kYXRpb25zXHJcbiAgICBpZiAoc3Vic2NyaXB0aW9uID4gMTApIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xyXG4gICAgICAgIHR5cGU6IFwiQUxMT0NBVElPTlwiLFxyXG4gICAgICAgIGNvbmZpZGVuY2U6IFwiaGlnaFwiLFxyXG4gICAgICAgIHJlYXNvbmluZzogXCJWZXJ5IGhpZ2ggb3ZlcnN1YnNjcmlwdGlvblwiLFxyXG4gICAgICAgIGFjdGlvbjogXCJBcHBseSBmb3IgbWF4aW11bSByZXRhaWwgcXVvdGEgdG8gaW1wcm92ZSBhbGxvdG1lbnQgY2hhbmNlc1wiLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zO1xyXG4gIH1cclxuXHJcbiAgLy8gVXRpbGl0eSBtZXRob2RzIGZvciBjYWxjdWxhdGlvbnNcclxuICBjYWxjdWxhdGVBdmVyYWdlKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCkgLyB2YWx1ZXMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlTWVkaWFuKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICBjb25zdCBzb3J0ZWQgPSBbLi4udmFsdWVzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKHNvcnRlZC5sZW5ndGggLyAyKTtcclxuICAgIHJldHVybiBzb3J0ZWQubGVuZ3RoICUgMiA9PT0gMFxyXG4gICAgICA/IChzb3J0ZWRbbWlkIC0gMV0gKyBzb3J0ZWRbbWlkXSkgLyAyXHJcbiAgICAgIDogc29ydGVkW21pZF07XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVNb2RlKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICBjb25zdCBmcmVxdWVuY3kgPSB7fTtcclxuICAgIHZhbHVlcy5mb3JFYWNoKCh2YWwpID0+IChmcmVxdWVuY3lbdmFsXSA9IChmcmVxdWVuY3lbdmFsXSB8fCAwKSArIDEpKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmcmVxdWVuY3kpLnJlZHVjZSgoYSwgYikgPT5cclxuICAgICAgZnJlcXVlbmN5W2FdID4gZnJlcXVlbmN5W2JdID8gYSA6IGJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpO1xyXG4gICAgY29uc3QgdmFyaWFuY2UgPVxyXG4gICAgICB2YWx1ZXMucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgTWF0aC5wb3codmFsIC0gYXZnLCAyKSwgMCkgL1xyXG4gICAgICB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2YXJpYW5jZSk7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVWYXJpYW5jZSh2YWx1ZXMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZSh2YWx1ZXMpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIE1hdGgucG93KHZhbCAtIGF2ZywgMiksIDApIC9cclxuICAgICAgdmFsdWVzLmxlbmd0aFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUNvZWZmaWNpZW50T2ZWYXJpYXRpb24odmFsdWVzKSB7XHJcbiAgICBjb25zdCBhdmcgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2UodmFsdWVzKTtcclxuICAgIGNvbnN0IHN0ZERldiA9IHRoaXMuY2FsY3VsYXRlU3RhbmRhcmREZXZpYXRpb24odmFsdWVzKTtcclxuICAgIHJldHVybiBhdmcgPiAwID8gKHN0ZERldiAvIGF2ZykgKiAxMDAgOiAwO1xyXG4gIH1cclxuXHJcbiAgYW5hbHl6ZVRyZW5kKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA8IDIpXHJcbiAgICAgIHJldHVybiB7IGRpcmVjdGlvbjogXCJzdGFibGVcIiwgc3RyZW5ndGg6IDAgfTtcclxuXHJcbiAgICBjb25zdCByZWNlbnQgPSB2YWx1ZXMuc2xpY2UoMCwgTWF0aC5taW4oNSwgTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMikpKTtcclxuICAgIGNvbnN0IG9sZGVyID0gdmFsdWVzLnNsaWNlKC1NYXRoLm1pbig1LCBNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKSkpO1xyXG5cclxuICAgIGNvbnN0IHJlY2VudEF2ZyA9IHRoaXMuY2FsY3VsYXRlQXZlcmFnZShyZWNlbnQpO1xyXG4gICAgY29uc3Qgb2xkZXJBdmcgPSB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2Uob2xkZXIpO1xyXG5cclxuICAgIGNvbnN0IGNoYW5nZSA9IHJlY2VudEF2ZyAtIG9sZGVyQXZnO1xyXG4gICAgY29uc3QgY2hhbmdlUGVyY2VudCA9IG9sZGVyQXZnID4gMCA/IChjaGFuZ2UgLyBvbGRlckF2ZykgKiAxMDAgOiAwO1xyXG5cclxuICAgIGxldCBkaXJlY3Rpb24gPSBcInN0YWJsZVwiO1xyXG4gICAgbGV0IHN0cmVuZ3RoID0gTWF0aC5hYnMoY2hhbmdlUGVyY2VudCk7XHJcblxyXG4gICAgaWYgKGNoYW5nZVBlcmNlbnQgPiA1KSBkaXJlY3Rpb24gPSBcImJ1bGxpc2hcIjtcclxuICAgIGVsc2UgaWYgKGNoYW5nZVBlcmNlbnQgPCAtNSkgZGlyZWN0aW9uID0gXCJiZWFyaXNoXCI7XHJcblxyXG4gICAgcmV0dXJuIHsgZGlyZWN0aW9uLCBzdHJlbmd0aCwgY2hhbmdlLCBjaGFuZ2VQZXJjZW50IH07XHJcbiAgfVxyXG5cclxuICBhbmFseXplVm9sYXRpbGl0eSh2YWx1ZXMsIHRpbWVzdGFtcHMpIHtcclxuICAgIGlmICghdmFsdWVzIHx8IHZhbHVlcy5sZW5ndGggPCAyKVxyXG4gICAgICByZXR1cm4geyBsZXZlbDogXCJ1bmtub3duXCIsIGNvZWZmaWNpZW50OiAwIH07XHJcblxyXG4gICAgY29uc3QgY29lZmZpY2llbnQgPSB0aGlzLmNhbGN1bGF0ZUNvZWZmaWNpZW50T2ZWYXJpYXRpb24odmFsdWVzKTtcclxuICAgIGxldCBsZXZlbCA9IFwibG93XCI7XHJcblxyXG4gICAgaWYgKGNvZWZmaWNpZW50ID4gMzApIGxldmVsID0gXCJoaWdoXCI7XHJcbiAgICBlbHNlIGlmIChjb2VmZmljaWVudCA+IDE1KSBsZXZlbCA9IFwibWVkaXVtXCI7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGV2ZWwsXHJcbiAgICAgIGNvZWZmaWNpZW50LFxyXG4gICAgICBzdGFuZGFyZERldmlhdGlvbjogdGhpcy5jYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZU1vbWVudHVtKHZhbHVlcykge1xyXG4gICAgaWYgKCF2YWx1ZXMgfHwgdmFsdWVzLmxlbmd0aCA8IDMpIHJldHVybiB7IHNjb3JlOiAwLCBkaXJlY3Rpb246IFwibmV1dHJhbFwiIH07XHJcblxyXG4gICAgY29uc3QgcmVjZW50ID0gdmFsdWVzLnNsaWNlKDAsIDMpO1xyXG4gICAgY29uc3QgbW9tZW50dW0gPSByZWNlbnRbMF0gLSByZWNlbnRbMl07XHJcbiAgICBjb25zdCBtb21lbnR1bVBlcmNlbnQgPSByZWNlbnRbMl0gPiAwID8gKG1vbWVudHVtIC8gcmVjZW50WzJdKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgbGV0IGRpcmVjdGlvbiA9IFwibmV1dHJhbFwiO1xyXG4gICAgaWYgKG1vbWVudHVtUGVyY2VudCA+IDIpIGRpcmVjdGlvbiA9IFwicG9zaXRpdmVcIjtcclxuICAgIGVsc2UgaWYgKG1vbWVudHVtUGVyY2VudCA8IC0yKSBkaXJlY3Rpb24gPSBcIm5lZ2F0aXZlXCI7XHJcblxyXG4gICAgcmV0dXJuIHsgc2NvcmU6IG1vbWVudHVtUGVyY2VudCwgZGlyZWN0aW9uLCBhYnNvbHV0ZTogbW9tZW50dW0gfTtcclxuICB9XHJcblxyXG4gIC8vIERhdGEgZmV0Y2hpbmcgbWV0aG9kc1xyXG4gIGFzeW5jIGdldElQT0Jhc2ljRGF0YShpcG9JZCkge1xyXG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS5pUE8uZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiBpcG9JZCB9LFxyXG4gICAgICBpbmNsdWRlOiB7IGNhdGVnb3JpZXM6IHRydWUgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0R01QRGF0YShpcG9JZCwgZGF5cyA9IDMwKSB7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIGRheXMpO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEuZ01QLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBpcG9JZCxcclxuICAgICAgICB0aW1lc3RhbXA6IHsgZ3RlOiBzdGFydERhdGUgfSxcclxuICAgICAgfSxcclxuICAgICAgb3JkZXJCeTogeyB0aW1lc3RhbXA6IFwiZGVzY1wiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFN1YnNjcmlwdGlvbkRhdGEoaXBvSWQsIGRheXMgPSAzMCkge1xyXG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSBkYXlzKTtcclxuXHJcbiAgICByZXR1cm4gYXdhaXQgcHJpc21hLnN1YnNjcmlwdGlvbkRhdGEuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZToge1xyXG4gICAgICAgIGlwb0lkLFxyXG4gICAgICAgIHRpbWVzdGFtcDogeyBndGU6IHN0YXJ0RGF0ZSB9LFxyXG4gICAgICB9LFxyXG4gICAgICBvcmRlckJ5OiB7IHRpbWVzdGFtcDogXCJkZXNjXCIgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0RGVtYW5kRGF0YShpcG9JZCwgZGF5cyA9IDMwKSB7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIGRheXMpO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEubWFya2V0RGVtYW5kLmZpbmRNYW55KHtcclxuICAgICAgd2hlcmU6IHtcclxuICAgICAgICBpcG9JZCxcclxuICAgICAgICB0aW1lc3RhbXA6IHsgZ3RlOiBzdGFydERhdGUgfSxcclxuICAgICAgfSxcclxuICAgICAgb3JkZXJCeTogeyB0aW1lc3RhbXA6IFwiZGVzY1wiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldElQT0NhdGVnb3JpZXMoaXBvSWQpIHtcclxuICAgIHJldHVybiBhd2FpdCBwcmlzbWEuaVBPQ2F0ZWdvcnkuZmluZE1hbnkoe1xyXG4gICAgICB3aGVyZTogeyBpcG9JZCB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBDYWNoZSBtYW5hZ2VtZW50XHJcbiAgYXN5bmMgZ2V0Q2FjaGVkQW5hbHl0aWNzKGtleSkge1xyXG4gICAgLy8gQ2hlY2sgaW4tbWVtb3J5IGNhY2hlIGZpcnN0XHJcbiAgICBpZiAodGhpcy5hbmFseXRpY3NDYWNoZS5oYXMoa2V5KSkge1xyXG4gICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmFuYWx5dGljc0NhY2hlLmdldChrZXkpO1xyXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIGNhY2hlZC50aW1lc3RhbXAgPCB0aGlzLmNhY2hlVFRMLkRFVEFJTEVEKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZC5kYXRhO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYW5hbHl0aWNzQ2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgUmVkaXMgY2FjaGVcclxuICAgIHJldHVybiBhd2FpdCBjYWNoZS5nZXQoa2V5KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNldENhY2hlZEFuYWx5dGljcyhrZXksIGRhdGEsIHR0bCkge1xyXG4gICAgLy8gU2V0IGluLW1lbW9yeSBjYWNoZVxyXG4gICAgdGhpcy5hbmFseXRpY3NDYWNoZS5zZXQoa2V5LCB7XHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNldCBpbiBSZWRpc1xyXG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlLnNldChrZXksIGRhdGEsIHR0bCAvIDEwMDApO1xyXG4gIH1cclxuXHJcbiAgLy8gSGVscGVyIG1ldGhvZHNcclxuICBjYXRlZ29yaXplSXNzdWVTaXplKHNpemUpIHtcclxuICAgIGlmIChzaXplIDwgNTAwICogMTAwMDAwMDApIHJldHVybiBcInNtYWxsXCI7IC8vIDwgNTAwIENyXHJcbiAgICBpZiAoc2l6ZSA8IDIwMDAgKiAxMDAwMDAwMCkgcmV0dXJuIFwibWVkaXVtXCI7IC8vIDwgMjAwMCBDclxyXG4gICAgcmV0dXJuIFwibGFyZ2VcIjsgLy8gPj0gMjAwMCBDclxyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlRHVyYXRpb24oc3RhcnREYXRlLCBlbmREYXRlKSB7XHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZShlbmREYXRlKTtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcbiAgfVxyXG5cclxuICBjYXRlZ29yaXplUmlza0xldmVsKHNjb3JlKSB7XHJcbiAgICBpZiAoc2NvcmUgPCAzMCkgcmV0dXJuIFwibG93XCI7XHJcbiAgICBpZiAoc2NvcmUgPCA2MCkgcmV0dXJuIFwibWVkaXVtXCI7XHJcbiAgICByZXR1cm4gXCJoaWdoXCI7XHJcbiAgfVxyXG5cclxuICBnZXRMYXRlc3RTdWJzY3JpcHRpb25CeUNhdGVnb3J5KHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIGNvbnN0IGxhdGVzdCA9IHt9O1xyXG5cclxuICAgIHN1YnNjcmlwdGlvbkRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSBpdGVtLmNhdGVnb3J5ICsgKGl0ZW0uc3ViQ2F0ZWdvcnkgfHwgXCJcIik7XHJcbiAgICAgIGlmICghbGF0ZXN0W2tleV0gfHwgaXRlbS50aW1lc3RhbXAgPiBsYXRlc3Rba2V5XS50aW1lc3RhbXApIHtcclxuICAgICAgICBsYXRlc3Rba2V5XSA9IGl0ZW07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBsYXRlc3Q7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVPdmVyYWxsU3Vic2NyaXB0aW9uKGxhdGVzdEJ5Q2F0ZWdvcnkpIHtcclxuICAgIGNvbnN0IHJhdGlvcyA9IE9iamVjdC52YWx1ZXMobGF0ZXN0QnlDYXRlZ29yeSkubWFwKFxyXG4gICAgICAoaXRlbSkgPT4gaXRlbS5zdWJzY3JpcHRpb25SYXRpbyB8fCAwXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJhdGlvcy5sZW5ndGggPiAwID8gTWF0aC5tYXgoLi4ucmF0aW9zKSA6IDA7XHJcbiAgfVxyXG5cclxuICAvLyBQZXJmb3JtYW5jZSB0cmFja2luZ1xyXG4gIHVwZGF0ZU1ldHJpY3MoY29tcHV0YXRpb25UaW1lKSB7XHJcbiAgICB0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkKys7XHJcbiAgICB0aGlzLm1ldHJpY3MuYXZlcmFnZUNvbXB1dGF0aW9uVGltZSA9XHJcbiAgICAgICh0aGlzLm1ldHJpY3MuYXZlcmFnZUNvbXB1dGF0aW9uVGltZSAqXHJcbiAgICAgICAgKHRoaXMubWV0cmljcy5jb21wdXRhdGlvbnNQZXJmb3JtZWQgLSAxKSArXHJcbiAgICAgICAgY29tcHV0YXRpb25UaW1lKSAvXHJcbiAgICAgIHRoaXMubWV0cmljcy5jb21wdXRhdGlvbnNQZXJmb3JtZWQ7XHJcbiAgfVxyXG5cclxuICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKSB7XHJcbiAgICBjb25zdCBoaXRSYXRlID1cclxuICAgICAgdGhpcy5tZXRyaWNzLmNhY2hlSGl0cyArIHRoaXMubWV0cmljcy5jYWNoZU1pc3NlcyA+IDBcclxuICAgICAgICA/IChcclxuICAgICAgICAgICAgKHRoaXMubWV0cmljcy5jYWNoZUhpdHMgL1xyXG4gICAgICAgICAgICAgICh0aGlzLm1ldHJpY3MuY2FjaGVIaXRzICsgdGhpcy5tZXRyaWNzLmNhY2hlTWlzc2VzKSkgKlxyXG4gICAgICAgICAgICAxMDBcclxuICAgICAgICAgICkudG9GaXhlZCgyKVxyXG4gICAgICAgIDogXCIwLjAwXCI7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5tZXRyaWNzLFxyXG4gICAgICBjYWNoZUhpdFJhdGU6IGAke2hpdFJhdGV9JWAsXHJcbiAgICAgIGF2ZXJhZ2VDb21wdXRhdGlvblRpbWU6IE1hdGgucm91bmQodGhpcy5tZXRyaWNzLmF2ZXJhZ2VDb21wdXRhdGlvblRpbWUpLFxyXG4gICAgICBzdWNjZXNzUmF0ZTpcclxuICAgICAgICB0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkID4gMFxyXG4gICAgICAgICAgPyAoXHJcbiAgICAgICAgICAgICAgKCh0aGlzLm1ldHJpY3MuY29tcHV0YXRpb25zUGVyZm9ybWVkIC0gdGhpcy5tZXRyaWNzLmVycm9ycykgL1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRyaWNzLmNvbXB1dGF0aW9uc1BlcmZvcm1lZCkgKlxyXG4gICAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgICApLnRvRml4ZWQoMilcclxuICAgICAgICAgIDogXCIxMDAuMDBcIixcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBQbGFjZWhvbGRlciBtZXRob2RzIGZvciBhZHZhbmNlZCBmZWF0dXJlcyAodG8gYmUgaW1wbGVtZW50ZWQpXHJcbiAgYXN5bmMgZ2V0Q29tcGFyYWJsZUlQT3MoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICBhc3luYyBjYWxjdWxhdGVIaXN0b3JpY2FsTWV0cmljcyhpcG9JZCwgdGltZVJhbmdlKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG4gIGFzeW5jIGNhbGN1bGF0ZUhpc3RvcmljYWxUcmVuZHMoaXBvSWQsIHRpbWVSYW5nZSkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuICBhc3luYyBjYWxjdWxhdGVCZW5jaG1hcmtzKGNvbXBhcmFibGVJUE9zKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG4gIGFzeW5jIGZpbmRTaW1pbGFySVBPcyhpcG9EYXRhKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIGFzeW5jIGNhbGN1bGF0ZVJlbGF0aXZlUGVyZm9ybWFuY2UoaXBvRGF0YSwgc2ltaWxhcklQT3MpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbiAgY2FsY3VsYXRlTWFya2V0UG9zaXRpb25pbmcoaXBvRGF0YSwgc2ltaWxhcklQT3MpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcbiAgYXN5bmMgY2FsY3VsYXRlSW5kdXN0cnlCZW5jaG1hcmtzKGlzc3VlVHlwZSkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgcHJlZGljdExpc3RpbmdHYWluKGFuYWx5dGljcykge1xyXG4gICAgY29uc3QgZ21wID0gYW5hbHl0aWNzLmdtcEFuYWx5dGljcy5zdGF0aXN0aWNzPy5jdXJyZW50IHx8IDA7XHJcbiAgICBjb25zdCByaXNrID0gYW5hbHl0aWNzLnJpc2tBc3Nlc3NtZW50Lm92ZXJhbGxSaXNrU2NvcmUgfHwgNTA7XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPVxyXG4gICAgICBhbmFseXRpY3Muc3Vic2NyaXB0aW9uQW5hbHl0aWNzLm92ZXJhbGw/LnRvdGFsU3Vic2NyaXB0aW9uIHx8IDE7XHJcblxyXG4gICAgLy8gU2ltcGxlIHByZWRpY3Rpb24gbW9kZWwgKGVuaGFuY2Ugd2l0aCBNTClcclxuICAgIGxldCBwcmVkaWN0aW9uID0gZ21wICogMC44OyAvLyBDb25zZXJ2YXRpdmUgZXN0aW1hdGVcclxuXHJcbiAgICAvLyBBZGp1c3QgZm9yIHJpc2tcclxuICAgIHByZWRpY3Rpb24gKj0gMSAtIHJpc2sgLyAyMDA7IC8vIFJlZHVjZSBieSBoYWxmIHRoZSByaXNrIHBlcmNlbnRhZ2VcclxuXHJcbiAgICAvLyBBZGp1c3QgZm9yIHN1YnNjcmlwdGlvblxyXG4gICAgaWYgKHN1YnNjcmlwdGlvbiA+IDUpXHJcbiAgICAgIHByZWRpY3Rpb24gKj0gMC45OyAvLyBIaWdoIHN1YnNjcmlwdGlvbiBtYXkgbGltaXQgZ2FpbnNcclxuICAgIGVsc2UgaWYgKHN1YnNjcmlwdGlvbiA8IDEpIHByZWRpY3Rpb24gKj0gMC43OyAvLyBMb3cgc3Vic2NyaXB0aW9uIGlzIGJlYXJpc2hcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWx1ZTogTWF0aC5yb3VuZChwcmVkaWN0aW9uKSxcclxuICAgICAgY29uZmlkZW5jZTogMC42LCAvLyA2MCUgY29uZmlkZW5jZVxyXG4gICAgICByYW5nZToge1xyXG4gICAgICAgIG1pbjogTWF0aC5yb3VuZChwcmVkaWN0aW9uICogMC43KSxcclxuICAgICAgICBtYXg6IE1hdGgucm91bmQocHJlZGljdGlvbiAqIDEuMyksXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJlZGljdEFsbG90bWVudFByb2JhYmlsaXR5KGFuYWx5dGljcykge1xyXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID1cclxuICAgICAgYW5hbHl0aWNzLnN1YnNjcmlwdGlvbkFuYWx5dGljcy5vdmVyYWxsPy50b3RhbFN1YnNjcmlwdGlvbiB8fCAxO1xyXG5cclxuICAgIGxldCBwcm9iYWJpbGl0eSA9IDEwMDtcclxuICAgIGlmIChzdWJzY3JpcHRpb24gPiAxKSB7XHJcbiAgICAgIHByb2JhYmlsaXR5ID0gTWF0aC5taW4oOTUsIDEwMCAvIHN1YnNjcmlwdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmV0YWlsOiBNYXRoLnJvdW5kKHByb2JhYmlsaXR5KSxcclxuICAgICAgY29uZmlkZW5jZTogMC44LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByZWRpY3RQcmljZVRhcmdldHMoYW5hbHl0aWNzKSB7XHJcbiAgICBjb25zdCBnbXAgPSBhbmFseXRpY3MuZ21wQW5hbHl0aWNzLnN0YXRpc3RpY3M/LmN1cnJlbnQgfHwgMDtcclxuICAgIGNvbnN0IGJhc2VQcmljZSA9IGFuYWx5dGljcy5iYXNpY01ldHJpY3M/LnByaWNlUmFuZ2U/Lm1heCB8fCAwO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbnNlcnZhdGl2ZTogYmFzZVByaWNlICsgZ21wICogMC41LFxyXG4gICAgICBtb2RlcmF0ZTogYmFzZVByaWNlICsgZ21wICogMC44LFxyXG4gICAgICBhZ2dyZXNzaXZlOiBiYXNlUHJpY2UgKyBnbXAgKiAxLjIsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlUmlza0FkanVzdGVkUmV0dXJucyhsaXN0aW5nR2Fpbiwgcmlza1Njb3JlKSB7XHJcbiAgICBjb25zdCBnYWluID0gbGlzdGluZ0dhaW4udmFsdWUgfHwgMDtcclxuICAgIGNvbnN0IHJpc2sgPSByaXNrU2NvcmUgfHwgNTA7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmlza0FkanVzdGVkUmV0dXJuOiBnYWluICogKDEgLSByaXNrIC8gMTAwKSxcclxuICAgICAgc2hhcnBlUmF0aW86IHJpc2sgPiAwID8gZ2FpbiAvIHJpc2sgOiAwLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZUNvbmZpZGVuY2VJbnRlcnZhbHMocHJlZGljdGlvbnMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxpc3RpbmdHYWluOiB7XHJcbiAgICAgICAgY29uZmlkZW5jZTkwOiB7XHJcbiAgICAgICAgICBtaW46IHByZWRpY3Rpb25zLmxpc3RpbmdHYWluPy5yYW5nZT8ubWluIHx8IDAsXHJcbiAgICAgICAgICBtYXg6IHByZWRpY3Rpb25zLmxpc3RpbmdHYWluPy5yYW5nZT8ubWF4IHx8IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBBZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzXHJcbiAgYW5hbHl6ZVZvbHVtZSh2b2x1bWVzLCB2YWx1ZXMpIHtcclxuICAgIHJldHVybiB7IGNvcnJlbGF0aW9uOiAwLCB0cmVuZDogXCJzdGFibGVcIiB9O1xyXG4gIH1cclxuICBjYWxjdWxhdGVQcmljZVRhcmdldHMoc3RhdHMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1cHBvcnQ6IHN0YXRzLm1pbixcclxuICAgICAgcmVzaXN0YW5jZTogc3RhdHMubWF4LFxyXG4gICAgICBwaXZvdDogc3RhdHMuYXZlcmFnZSxcclxuICAgIH07XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUdNUFJpc2tNZXRyaWNzKHZhbHVlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsdWVBdFJpc2s6IHRoaXMuY2FsY3VsYXRlU3RhbmRhcmREZXZpYXRpb24odmFsdWVzKSAqIDEuNjQ1LCAvLyA5NSUgVmFSXHJcbiAgICAgIG1heERyYXdkb3duOiB0aGlzLmNhbGN1bGF0ZU1heERyYXdkb3duKHZhbHVlcyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlTWF4RHJhd2Rvd24odmFsdWVzKSB7XHJcbiAgICBsZXQgbWF4RHJhd2Rvd24gPSAwO1xyXG4gICAgbGV0IHBlYWsgPSB2YWx1ZXNbMF07XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHZhbHVlc1tpXSA+IHBlYWspIHtcclxuICAgICAgICBwZWFrID0gdmFsdWVzW2ldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGRyYXdkb3duID0gKHBlYWsgLSB2YWx1ZXNbaV0pIC8gcGVhaztcclxuICAgICAgICBtYXhEcmF3ZG93biA9IE1hdGgubWF4KG1heERyYXdkb3duLCBkcmF3ZG93bik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWF4RHJhd2Rvd24gKiAxMDA7IC8vIFJldHVybiBhcyBwZXJjZW50YWdlXHJcbiAgfVxyXG5cclxuICBhbmFseXplU3Vic2NyaXB0aW9uUGF0dGVybnMoc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgdHJlbmQ6IFwiaW5jcmVhc2luZ1wiIH07XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUFsbG90bWVudFByb2JhYmlsaXRpZXMobGF0ZXN0QnlDYXRlZ29yeSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtjYXRlZ29yeSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMobGF0ZXN0QnlDYXRlZ29yeSkpIHtcclxuICAgICAgY29uc3QgcmF0aW8gPSBkYXRhLnN1YnNjcmlwdGlvblJhdGlvIHx8IDE7XHJcbiAgICAgIHJlc3VsdFtjYXRlZ29yeV0gPSByYXRpbyA+IDEgPyBNYXRoLm1pbig5NSwgMTAwIC8gcmF0aW8pIDogOTU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVTdWJzY3JpcHRpb25JbnNpZ2h0cyhvdmVyYWxsLCBjYXRlZ29yaWVzKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIGFuYWx5emVQcmljZVdpc2VEZW1hbmQoZGVtYW5kRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgZGlzdHJpYnV0aW9uOiBcIm5vcm1hbFwiIH07XHJcbiAgfVxyXG4gIGFuYWx5emVDdXRPZmZEZW1hbmQoZGVtYW5kRGF0YSkge1xyXG4gICAgcmV0dXJuIHsgcGVyY2VudGFnZTogMCB9O1xyXG4gIH1cclxuICBhbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uKGRlbWFuZERhdGEpIHtcclxuICAgIHJldHVybiB7IGNvbmNlbnRyYXRpb246IFwiZGlzdHJpYnV0ZWRcIiB9O1xyXG4gIH1cclxuICBhbmFseXplQmlkQ29uY2VudHJhdGlvbihkZW1hbmREYXRhKSB7XHJcbiAgICByZXR1cm4geyBoZXJmaW5kYWhsSW5kZXg6IDAgfTtcclxuICB9XHJcbiAgY2FsY3VsYXRlTWFya2V0U2VudGltZW50KGdtcERhdGEsIHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIHJldHVybiAwLjU7XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoKHN1YnNjcmlwdGlvbkRhdGEpIHtcclxuICAgIHJldHVybiAwLjU7XHJcbiAgfVxyXG4gIGNhbGN1bGF0ZUxpc3RpbmdSZWFkaW5lc3MoaXBvRGF0YSwgc3Vic2NyaXB0aW9uRGF0YSkge1xyXG4gICAgcmV0dXJuIDAuODtcclxuICB9XHJcbiAgY2FsY3VsYXRlQXR0cmFjdGl2ZW5lc3NTY29yZShpbmRpY2F0b3JzKSB7XHJcbiAgICByZXR1cm4gMC43O1xyXG4gIH1cclxuICBjYWxjdWxhdGVUaW1lc3BhbihkYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEgfHwgZGF0YS5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuICAgIGNvbnN0IGZpcnN0ID0gbmV3IERhdGUoZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnRpbWVzdGFtcCk7XHJcbiAgICBjb25zdCBsYXN0ID0gbmV3IERhdGUoZGF0YVswXS50aW1lc3RhbXApO1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCgobGFzdCAtIGZpcnN0KSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcbiAgfVxyXG4gIGdlbmVyYXRlUmlza1JlY29tbWVuZGF0aW9uKHNjb3JlLCBmYWN0b3JzKSB7XHJcbiAgICBpZiAoc2NvcmUgPCAzMClcclxuICAgICAgcmV0dXJuIFwiTG93IHJpc2sgaW52ZXN0bWVudCwgc3VpdGFibGUgZm9yIGNvbnNlcnZhdGl2ZSBpbnZlc3RvcnNcIjtcclxuICAgIGlmIChzY29yZSA8IDYwKSByZXR1cm4gXCJNb2RlcmF0ZSByaXNrLCBzdWl0YWJsZSBmb3IgYmFsYW5jZWQgcG9ydGZvbGlvc1wiO1xyXG4gICAgcmV0dXJuIFwiSGlnaCByaXNrIGludmVzdG1lbnQsIHN1aXRhYmxlIG9ubHkgZm9yIGFnZ3Jlc3NpdmUgaW52ZXN0b3JzXCI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXHJcbmV4cG9ydCBjb25zdCBhbmFseXRpY3NTZXJ2aWNlID0gbmV3IEFuYWx5dGljc1NlcnZpY2UoKTtcclxuXHJcbi8vIENsZWFudXAgb2xkIGNhY2hlIGVudHJpZXMgcGVyaW9kaWNhbGx5XHJcbnNldEludGVydmFsKFxyXG4gICgpID0+IHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhbmFseXRpY3NTZXJ2aWNlLmFuYWx5dGljc0NhY2hlLmVudHJpZXMoKSkge1xyXG4gICAgICBpZiAobm93IC0gdmFsdWUudGltZXN0YW1wID4gYW5hbHl0aWNzU2VydmljZS5jYWNoZVRUTC5ERVRBSUxFRCkge1xyXG4gICAgICAgIGFuYWx5dGljc1NlcnZpY2UuYW5hbHl0aWNzQ2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIDEwICogNjAgKiAxMDAwXHJcbik7IC8vIEV2ZXJ5IDEwIG1pbnV0ZXNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFuYWx5dGljc1NlcnZpY2U7XHJcbiJdLCJuYW1lcyI6WyJwcmlzbWEiLCJjYWNoZSIsIkFuYWx5dGljc1NlcnZpY2UiLCJjb25zdHJ1Y3RvciIsIm1ldHJpY3MiLCJjb21wdXRhdGlvbnNQZXJmb3JtZWQiLCJjYWNoZUhpdHMiLCJjYWNoZU1pc3NlcyIsImF2ZXJhZ2VDb21wdXRhdGlvblRpbWUiLCJlcnJvcnMiLCJhbmFseXRpY3NDYWNoZSIsIk1hcCIsImNhY2hlVFRMIiwiQkFTSUMiLCJERVRBSUxFRCIsIkhJU1RPUklDQUwiLCJQUkVESUNUSU9OUyIsInJpc2tXZWlnaHRzIiwiR01QX1ZPTEFUSUxJVFkiLCJTVUJTQ1JJUFRJT05fUkFUSU8iLCJJU1NVRV9TSVpFIiwiTUFSS0VUX0NPTkRJVElPTlMiLCJTRUNUT1JfUEVSRk9STUFOQ0UiLCJwcmVkaWN0aW9uTW9kZWxzIiwiTElTVElOR19HQUlOIiwiZmFjdG9ycyIsIndlaWdodHMiLCJBTExPVE1FTlRfUFJPQkFCSUxJVFkiLCJjb21wdXRlSVBPQW5hbHl0aWNzIiwiaXBvSWQiLCJvcHRpb25zIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImluY2x1ZGVIaXN0b3JpY2FsIiwiaW5jbHVkZVByZWRpY3Rpb25zIiwidGltZVJhbmdlIiwicmVmcmVzaENhY2hlIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJnZXRDYWNoZWRBbmFseXRpY3MiLCJpcG9EYXRhIiwiZ21wRGF0YSIsInN1YnNjcmlwdGlvbkRhdGEiLCJkZW1hbmREYXRhIiwiY2F0ZWdvcnlEYXRhIiwiUHJvbWlzZSIsImFsbCIsImdldElQT0Jhc2ljRGF0YSIsImdldEdNUERhdGEiLCJnZXRTdWJzY3JpcHRpb25EYXRhIiwiZ2V0RGVtYW5kRGF0YSIsImdldElQT0NhdGVnb3JpZXMiLCJFcnJvciIsImFuYWx5dGljcyIsInN5bWJvbCIsIm5hbWUiLCJzdGF0dXMiLCJjb21wdXRlZEF0IiwidG9JU09TdHJpbmciLCJiYXNpY01ldHJpY3MiLCJjb21wdXRlQmFzaWNNZXRyaWNzIiwiZ21wQW5hbHl0aWNzIiwiY29tcHV0ZUdNUEFuYWx5dGljcyIsInN1YnNjcmlwdGlvbkFuYWx5dGljcyIsImNvbXB1dGVTdWJzY3JpcHRpb25BbmFseXRpY3MiLCJkZW1hbmRBbmFseXRpY3MiLCJjb21wdXRlRGVtYW5kQW5hbHl0aWNzIiwicmlza0Fzc2Vzc21lbnQiLCJjb21wdXRlUmlza0Fzc2Vzc21lbnQiLCJwZXJmb3JtYW5jZUluZGljYXRvcnMiLCJjb21wdXRlUGVyZm9ybWFuY2VJbmRpY2F0b3JzIiwiaGlzdG9yaWNhbEFuYWx5c2lzIiwiY29tcHV0ZUhpc3RvcmljYWxBbmFseXNpcyIsInByZWRpY3Rpb25zIiwiY29tcHV0ZVByZWRpY3Rpb25zIiwiY29tcGFyYXRpdmVBbmFseXNpcyIsImNvbXB1dGVDb21wYXJhdGl2ZUFuYWx5c2lzIiwiaW5zaWdodHMiLCJnZW5lcmF0ZUluc2lnaHRzIiwicmVjb21tZW5kYXRpb25zIiwiZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMiLCJzZXRDYWNoZWRBbmFseXRpY3MiLCJjb21wdXRhdGlvblRpbWUiLCJ1cGRhdGVNZXRyaWNzIiwiZXJyb3IiLCJjb25zb2xlIiwicHJpY2VSYW5nZSIsIm1heFByaWNlIiwibWluUHJpY2UiLCJpc3N1ZVNpemUiLCJOdW1iZXIiLCJsb3RWYWx1ZSIsImxvdFNpemUiLCJtaW4iLCJtYXgiLCJzcHJlYWQiLCJzcHJlYWRQZXJjZW50YWdlIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJpc3N1ZSIsInNpemUiLCJzaXplQ2F0ZWdvcnkiLCJjYXRlZ29yaXplSXNzdWVTaXplIiwiZmFjZVZhbHVlIiwidGltZWxpbmUiLCJvcGVuRGF0ZSIsImNsb3NlRGF0ZSIsImxpc3RpbmdEYXRlIiwiZHVyYXRpb25EYXlzIiwiY2FsY3VsYXRlRHVyYXRpb24iLCJkYXlzVG9MaXN0aW5nIiwidHlwZSIsImlzc3VlVHlwZSIsInN1YlR5cGUiLCJyZWdpc3RyYXIiLCJsZW5ndGgiLCJtZXNzYWdlIiwidmFsdWVzIiwibWFwIiwiZyIsInZhbHVlIiwicGVyY2VudGFnZXMiLCJwZXJjZW50YWdlIiwidm9sdW1lcyIsInZvbHVtZSIsInN0YXRzIiwiY3VycmVudCIsImF2ZXJhZ2UiLCJjYWxjdWxhdGVBdmVyYWdlIiwibWVkaWFuIiwiY2FsY3VsYXRlTWVkaWFuIiwibW9kZSIsImNhbGN1bGF0ZU1vZGUiLCJNYXRoIiwicmFuZ2UiLCJzdGFuZGFyZERldmlhdGlvbiIsImNhbGN1bGF0ZVN0YW5kYXJkRGV2aWF0aW9uIiwidmFyaWFuY2UiLCJjYWxjdWxhdGVWYXJpYW5jZSIsImNvZWZmaWNpZW50IiwiY2FsY3VsYXRlQ29lZmZpY2llbnRPZlZhcmlhdGlvbiIsInRyZW5kIiwiYW5hbHl6ZVRyZW5kIiwidm9sYXRpbGl0eSIsImFuYWx5emVWb2xhdGlsaXR5IiwidGltZXN0YW1wIiwidm9sdW1lQW5hbHlzaXMiLCJhbmFseXplVm9sdW1lIiwibW9tZW50dW0iLCJjYWxjdWxhdGVNb21lbnR1bSIsInJlY29yZENvdW50IiwidGltZXNwYW4iLCJjYWxjdWxhdGVUaW1lc3BhbiIsInN0YXRpc3RpY3MiLCJwcmljZVRhcmdldHMiLCJjYWxjdWxhdGVQcmljZVRhcmdldHMiLCJyaXNrTWV0cmljcyIsImNhbGN1bGF0ZUdNUFJpc2tNZXRyaWNzIiwibGF0ZXN0QnlDYXRlZ29yeSIsImdldExhdGVzdFN1YnNjcmlwdGlvbkJ5Q2F0ZWdvcnkiLCJvdmVyYWxsTWV0cmljcyIsInRvdGFsU3Vic2NyaXB0aW9uIiwiY2FsY3VsYXRlT3ZlcmFsbFN1YnNjcmlwdGlvbiIsImlzT3ZlcnN1YnNjcmliZWQiLCJvdmVyc3Vic2NyaXB0aW9uUmF0aW8iLCJ0b3RhbEFwcGxpY2F0aW9ucyIsInRvdGFsUXVhbnRpdHkiLCJCaWdJbnQiLCJjYXRlZ29yeUFuYWx5c2lzIiwiY2F0ZWdvcnkiLCJkYXRhIiwiT2JqZWN0IiwiZW50cmllcyIsInN1YnNjcmlwdGlvblJhdGlvIiwicXVhbnRpdHkiLCJ0b1N0cmluZyIsImJpZENvdW50IiwiYXZlcmFnZUJpZFNpemUiLCJwYXR0ZXJucyIsImFuYWx5emVTdWJzY3JpcHRpb25QYXR0ZXJucyIsImFsbG90bWVudFByb2JhYmlsaXR5IiwiY2FsY3VsYXRlQWxsb3RtZW50UHJvYmFiaWxpdGllcyIsIm92ZXJhbGwiLCJjYXRlZ29yaWVzIiwiZ2VuZXJhdGVTdWJzY3JpcHRpb25JbnNpZ2h0cyIsInByaWNlV2lzZURlbWFuZCIsImFuYWx5emVQcmljZVdpc2VEZW1hbmQiLCJjdXRPZmZBbmFseXNpcyIsImFuYWx5emVDdXRPZmZEZW1hbmQiLCJkaXN0cmlidXRpb24iLCJhbmFseXplRGVtYW5kRGlzdHJpYnV0aW9uIiwiY29uY2VudHJhdGlvbiIsImFuYWx5emVCaWRDb25jZW50cmF0aW9uIiwic3VtbWFyeSIsInJlZHVjZSIsInN1bSIsImQiLCJhYnNvbHV0ZVF1YW50aXR5IiwidG90YWxCaWRzIiwiYWJzb2x1dGVCaWRDb3VudCIsInByaWNlIiwiZmlsdGVyIiwicCIsInJpc2tTY29yZSIsInJpc2tGYWN0b3JzIiwiZ21wVmFsdWVzIiwiYXZnR01QIiwidm9sYXRpbGl0eVJhdGlvIiwicHVzaCIsImltcGFjdCIsImRlc2NyaXB0aW9uIiwibWl0aWdhdGlvbiIsImxhdGVzdFN1YnNjcmlwdGlvbiIsIm92ZXJhbGxTdWJzY3JpcHRpb24iLCJvdmVyYWxsUmlza1Njb3JlIiwicmlza0xldmVsIiwiY2F0ZWdvcml6ZVJpc2tMZXZlbCIsInJlY29tbWVuZGF0aW9uIiwiZ2VuZXJhdGVSaXNrUmVjb21tZW5kYXRpb24iLCJsYXN0VXBkYXRlZCIsImluZGljYXRvcnMiLCJtYXJrZXRTZW50aW1lbnQiLCJjYWxjdWxhdGVNYXJrZXRTZW50aW1lbnQiLCJkZW1hbmRTdHJlbmd0aCIsImNhbGN1bGF0ZURlbWFuZFN0cmVuZ3RoIiwicHJpY2VNb21lbnR1bSIsImxpc3RpbmdSZWFkaW5lc3MiLCJjYWxjdWxhdGVMaXN0aW5nUmVhZGluZXNzIiwiYXR0cmFjdGl2ZW5lc3NTY29yZSIsImNhbGN1bGF0ZUF0dHJhY3RpdmVuZXNzU2NvcmUiLCJjb21wYXJhYmxlSVBPcyIsImdldENvbXBhcmFibGVJUE9zIiwiaGlzdG9yaWNhbE1ldHJpY3MiLCJjYWxjdWxhdGVIaXN0b3JpY2FsTWV0cmljcyIsInRyZW5kcyIsImNhbGN1bGF0ZUhpc3RvcmljYWxUcmVuZHMiLCJiZW5jaG1hcmtzIiwiY2FsY3VsYXRlQmVuY2htYXJrcyIsImxpc3RpbmdHYWluIiwicHJlZGljdExpc3RpbmdHYWluIiwicHJlZGljdEFsbG90bWVudFByb2JhYmlsaXR5IiwicHJlZGljdFByaWNlVGFyZ2V0cyIsInJpc2tBZGp1c3RlZFJldHVybnMiLCJjYWxjdWxhdGVSaXNrQWRqdXN0ZWRSZXR1cm5zIiwiY29uZmlkZW5jZUludGVydmFscyIsImNhbGN1bGF0ZUNvbmZpZGVuY2VJbnRlcnZhbHMiLCJtb2RlbCIsInNpbWlsYXJJUE9zIiwiZmluZFNpbWlsYXJJUE9zIiwicmVsYXRpdmVQZXJmb3JtYW5jZSIsImNhbGN1bGF0ZVJlbGF0aXZlUGVyZm9ybWFuY2UiLCJtYXJrZXRQb3NpdGlvbmluZyIsImNhbGN1bGF0ZU1hcmtldFBvc2l0aW9uaW5nIiwic2ltaWxhcklQT3NDb3VudCIsImNhbGN1bGF0ZUluZHVzdHJ5QmVuY2htYXJrcyIsImdtcCIsInRpdGxlIiwibGV2ZWwiLCJzdWIiLCJyaXNrIiwic3Vic2NyaXB0aW9uIiwiY29uZmlkZW5jZSIsInJlYXNvbmluZyIsImFjdGlvbiIsInZhbCIsInNvcnRlZCIsInNvcnQiLCJhIiwiYiIsIm1pZCIsImZsb29yIiwiZnJlcXVlbmN5IiwiZm9yRWFjaCIsImtleXMiLCJhdmciLCJwb3ciLCJzcXJ0Iiwic3RkRGV2IiwiZGlyZWN0aW9uIiwic3RyZW5ndGgiLCJyZWNlbnQiLCJzbGljZSIsIm9sZGVyIiwicmVjZW50QXZnIiwib2xkZXJBdmciLCJjaGFuZ2UiLCJjaGFuZ2VQZXJjZW50IiwiYWJzIiwidGltZXN0YW1wcyIsInNjb3JlIiwibW9tZW50dW1QZXJjZW50IiwiYWJzb2x1dGUiLCJpUE8iLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJpZCIsImluY2x1ZGUiLCJkYXlzIiwic3RhcnREYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJnTVAiLCJmaW5kTWFueSIsImd0ZSIsIm9yZGVyQnkiLCJtYXJrZXREZW1hbmQiLCJpUE9DYXRlZ29yeSIsImtleSIsImhhcyIsImdldCIsImRlbGV0ZSIsInR0bCIsInNldCIsImVuZERhdGUiLCJzdGFydCIsImVuZCIsImNlaWwiLCJsYXRlc3QiLCJpdGVtIiwic3ViQ2F0ZWdvcnkiLCJyYXRpb3MiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJoaXRSYXRlIiwiY2FjaGVIaXRSYXRlIiwicm91bmQiLCJzdWNjZXNzUmF0ZSIsInByZWRpY3Rpb24iLCJwcm9iYWJpbGl0eSIsInJldGFpbCIsImJhc2VQcmljZSIsImNvbnNlcnZhdGl2ZSIsIm1vZGVyYXRlIiwiYWdncmVzc2l2ZSIsImdhaW4iLCJyaXNrQWRqdXN0ZWRSZXR1cm4iLCJzaGFycGVSYXRpbyIsImNvbmZpZGVuY2U5MCIsImNvcnJlbGF0aW9uIiwic3VwcG9ydCIsInJlc2lzdGFuY2UiLCJwaXZvdCIsInZhbHVlQXRSaXNrIiwibWF4RHJhd2Rvd24iLCJjYWxjdWxhdGVNYXhEcmF3ZG93biIsInBlYWsiLCJpIiwiZHJhd2Rvd24iLCJyZXN1bHQiLCJyYXRpbyIsImhlcmZpbmRhaGxJbmRleCIsImZpcnN0IiwibGFzdCIsImFuYWx5dGljc1NlcnZpY2UiLCJzZXRJbnRlcnZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/analytics.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache.js":
/*!**************************!*\
  !*** ./src/lib/cache.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cache: () => (/* binding */ cache),\n/* harmony export */   cacheMiddleware: () => (/* binding */ cacheMiddleware),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   invalidateCacheOnUpdate: () => (/* binding */ invalidateCacheOnUpdate)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n\n\nclass CacheService {\n    constructor(){\n        this.redis = new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n            url: process.env.UPSTASH_REDIS_REST_URL,\n            token: process.env.UPSTASH_REDIS_REST_TOKEN\n        });\n        // Memory cache fallback for when Redis is unavailable\n        this.memoryCache = new Map();\n        this.memoryCacheSize = 0;\n        this.maxMemoryCache = 1000; // Maximum items in memory cache\n        // Cache key prefixes for organization\n        this.prefixes = {\n            IPO: \"ipo:\",\n            GMP: \"gmp:\",\n            SUBSCRIPTION: \"sub:\",\n            DEMAND: \"demand:\",\n            ALLOTMENT: \"allot:\",\n            USER: \"user:\",\n            SESSION: \"session:\",\n            API: \"api:\",\n            ANALYTICS: \"analytics:\",\n            REALTIME: \"rt:\",\n            SEARCH: \"search:\",\n            SYSTEM: \"sys:\"\n        };\n        // Default TTL values (in seconds)\n        this.defaultTTL = {\n            IPO_LIST: 300,\n            IPO_DETAIL: 180,\n            GMP_DATA: 60,\n            SUBSCRIPTION: 30,\n            DEMAND: 30,\n            ALLOTMENT: 3600,\n            USER_SESSION: 3600,\n            API_RESPONSE: 60,\n            ANALYTICS: 1800,\n            SEARCH: 600,\n            REALTIME: 15,\n            SYSTEM: 300\n        };\n        // Performance metrics\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Generate cache key with prefix\n    key(prefix, identifier) {\n        return `${this.prefixes[prefix] || \"\"}${identifier}`;\n    }\n    // Enhanced get with fallback to memory cache\n    async get(key) {\n        this.metrics.operations++;\n        try {\n            // Try Redis first\n            const data = await this.redis.get(key);\n            if (data !== null) {\n                this.metrics.hits++;\n                return typeof data === \"string\" ? JSON.parse(data) : data;\n            }\n            // Fallback to memory cache\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                this.metrics.hits++;\n                return memoryData.value;\n            }\n            this.metrics.misses++;\n            return null;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache get error:\", error);\n            // Try memory cache as fallback\n            const memoryData = this.memoryCache.get(key);\n            if (memoryData && memoryData.expiresAt > Date.now()) {\n                return memoryData.value;\n            }\n            return null;\n        }\n    }\n    // Enhanced set with memory cache backup\n    async set(key, value, ttl = null) {\n        this.metrics.operations++;\n        try {\n            const serialized = typeof value === \"string\" ? value : JSON.stringify(value);\n            let result;\n            if (ttl) {\n                result = await this.redis.setex(key, ttl, serialized);\n            } else {\n                result = await this.redis.set(key, serialized);\n            }\n            // Also store in memory cache as backup\n            this.setMemoryCache(key, value, ttl);\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache set error:\", error);\n            // Fallback to memory cache only\n            this.setMemoryCache(key, value, ttl);\n            return false;\n        }\n    }\n    // Memory cache management\n    setMemoryCache(key, value, ttl = null) {\n        const expiresAt = ttl ? Date.now() + ttl * 1000 : Date.now() + 5 * 60 * 1000; // Default 5 min\n        // Remove old entry if exists\n        if (this.memoryCache.has(key)) {\n            this.memoryCacheSize--;\n        }\n        // Check if we need to evict items\n        if (this.memoryCacheSize >= this.maxMemoryCache) {\n            this.evictOldestMemoryCache();\n        }\n        this.memoryCache.set(key, {\n            value,\n            expiresAt\n        });\n        this.memoryCacheSize++;\n    }\n    // Evict oldest items from memory cache\n    evictOldestMemoryCache() {\n        const entries = Array.from(this.memoryCache.entries());\n        entries.sort((a, b)=>a[1].expiresAt - b[1].expiresAt);\n        // Remove oldest 10% of items\n        const toRemove = Math.max(1, Math.floor(entries.length * 0.1));\n        for(let i = 0; i < toRemove; i++){\n            this.memoryCache.delete(entries[i][0]);\n            this.memoryCacheSize--;\n        }\n    }\n    // Enhanced delete with memory cache cleanup\n    async del(key) {\n        this.metrics.operations++;\n        try {\n            const result = await this.redis.del(key);\n            // Also remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return result;\n        } catch (error) {\n            this.metrics.errors++;\n            console.error(\"Cache delete error:\", error);\n            // Still try to remove from memory cache\n            if (this.memoryCache.has(key)) {\n                this.memoryCache.delete(key);\n                this.memoryCacheSize--;\n            }\n            return false;\n        }\n    }\n    // Check if key exists\n    async exists(key) {\n        try {\n            const redisExists = await this.redis.exists(key);\n            if (redisExists) return true;\n            // Check memory cache\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        } catch (error) {\n            console.error(\"Cache exists error:\", error);\n            // Check memory cache only\n            const memoryData = this.memoryCache.get(key);\n            return memoryData && memoryData.expiresAt > Date.now();\n        }\n    }\n    // IPO-specific cache operations\n    async cacheIPOList(ipos, filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.set(cacheKey, ipos, this.defaultTTL.IPO_LIST);\n    }\n    async getCachedIPOList(filters = {}) {\n        const filterKey = Object.keys(filters).sort().map((k)=>`${k}:${filters[k]}`).join(\"|\");\n        const cacheKey = this.key(\"IPO\", `list:${filterKey || \"all\"}`);\n        return this.get(cacheKey);\n    }\n    async cacheIPODetail(ipoId, data) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.set(cacheKey, data, this.defaultTTL.IPO_DETAIL);\n    }\n    async getCachedIPODetail(ipoId) {\n        const cacheKey = this.key(\"IPO\", `detail:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Real-time data cache with pub/sub support\n    async cacheRealTimeData(type, identifier, data) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const enrichedData = {\n            ...data,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Cache with short TTL for real-time data\n        await this.set(cacheKey, enrichedData, this.defaultTTL.REALTIME);\n        // Also publish to Redis pub/sub for WebSocket distribution (if available)\n        try {\n            await this.redis.publish(`realtime:${type}:${identifier}`, JSON.stringify(enrichedData));\n        } catch (error) {\n            console.warn(\"Redis publish failed, continuing without pub/sub:\", error.message);\n        }\n        return enrichedData;\n    }\n    async getRealTimeData(type, identifier) {\n        const cacheKey = this.key(\"REALTIME\", `${type}:${identifier}`);\n        const data = await this.get(cacheKey);\n        // Check if data is fresh (less than TTL)\n        if (data && Date.now() - data.timestamp < this.defaultTTL.REALTIME * 1000) {\n            return data;\n        }\n        return null;\n    }\n    // GMP cache operations\n    async cacheGMPData(ipoId, gmpData) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.set(cacheKey, gmpData, this.defaultTTL.GMP_DATA);\n    }\n    async getCachedGMPData(ipoId) {\n        const cacheKey = this.key(\"GMP\", `data:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    async cacheLiveGMP(ipoId, gmpValue) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        const gmpData = {\n            value: gmpValue,\n            timestamp: Date.now(),\n            cached_at: new Date().toISOString()\n        };\n        // Store with short TTL for real-time updates\n        return this.set(cacheKey, gmpData, 30);\n    }\n    async getCachedLiveGMP(ipoId) {\n        const cacheKey = this.key(\"GMP\", `live:${ipoId}`);\n        return this.get(cacheKey);\n    }\n    // Subscription data cache\n    async cacheSubscriptionData(symbol, data) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.SUBSCRIPTION);\n    }\n    async getCachedSubscriptionData(symbol) {\n        const cacheKey = this.key(\"SUBSCRIPTION\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Market demand cache\n    async cacheDemandData(symbol, data) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.set(cacheKey, data, this.defaultTTL.DEMAND);\n    }\n    async getCachedDemandData(symbol) {\n        const cacheKey = this.key(\"DEMAND\", `data:${symbol}`);\n        return this.get(cacheKey);\n    }\n    // Allotment cache\n    async cacheAllotmentStatus(panNumber, applicationNumber, data) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.set(cacheKey, data, this.defaultTTL.ALLOTMENT);\n    }\n    async getCachedAllotmentStatus(panNumber, applicationNumber) {\n        const cacheKey = this.key(\"ALLOTMENT\", `status:${panNumber}:${applicationNumber}`);\n        return this.get(cacheKey);\n    }\n    // User session cache\n    async cacheUserSession(userId, sessionData) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.set(cacheKey, sessionData, this.defaultTTL.USER_SESSION);\n    }\n    async getCachedUserSession(userId) {\n        const cacheKey = this.key(\"USER\", `session:${userId}`);\n        return this.get(cacheKey);\n    }\n    // API response cache\n    async cacheAPIResponse(endpoint, params, data) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.set(cacheKey, data, this.defaultTTL.API_RESPONSE);\n    }\n    async getCachedAPIResponse(endpoint, params) {\n        const paramKey = Object.keys(params).sort().map((k)=>`${k}:${params[k]}`).join(\"|\");\n        const cacheKey = this.key(\"API\", `${endpoint}:${paramKey}`);\n        return this.get(cacheKey);\n    }\n    // Search results cache\n    async cacheSearchResults(query, results) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.set(cacheKey, results, this.defaultTTL.SEARCH);\n    }\n    async getCachedSearchResults(query) {\n        const cacheKey = this.key(\"SEARCH\", `query:${query.toLowerCase()}`);\n        return this.get(cacheKey);\n    }\n    // Analytics cache\n    async cacheAnalytics(type, identifier, data) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.set(cacheKey, data, this.defaultTTL.ANALYTICS);\n    }\n    async getCachedAnalytics(type, identifier) {\n        const cacheKey = this.key(\"ANALYTICS\", `${type}:${identifier}`);\n        return this.get(cacheKey);\n    }\n    // Batch operations\n    async mget(keys) {\n        try {\n            return await this.redis.mget(...keys);\n        } catch (error) {\n            console.error(\"Cache mget error:\", error);\n            // Fallback to individual gets from memory cache\n            const results = [];\n            for (const key of keys){\n                const memoryData = this.memoryCache.get(key);\n                if (memoryData && memoryData.expiresAt > Date.now()) {\n                    results.push(memoryData.value);\n                } else {\n                    results.push(null);\n                }\n            }\n            return results;\n        }\n    }\n    async mset(keyValuePairs) {\n        try {\n            const pairs = [];\n            for (const [key, value] of keyValuePairs){\n                pairs.push(key, typeof value === \"string\" ? value : JSON.stringify(value));\n                // Also set in memory cache\n                this.setMemoryCache(key, value);\n            }\n            return await this.redis.mset(...pairs);\n        } catch (error) {\n            console.error(\"Cache mset error:\", error);\n            // Fallback to memory cache only\n            for (const [key, value] of keyValuePairs){\n                this.setMemoryCache(key, value);\n            }\n            return false;\n        }\n    }\n    // Cache invalidation\n    async invalidatePattern(pattern) {\n        try {\n            const keys = await this.redis.keys(pattern);\n            if (keys.length > 0) {\n                // Delete from Redis\n                const redisResult = await this.redis.del(...keys);\n                // Delete from memory cache\n                for (const key of keys){\n                    if (this.memoryCache.has(key)) {\n                        this.memoryCache.delete(key);\n                        this.memoryCacheSize--;\n                    }\n                }\n                return redisResult;\n            }\n            return 0;\n        } catch (error) {\n            console.error(\"Cache invalidation error:\", error);\n            // Try to clear memory cache patterns (simple string matching)\n            let cleared = 0;\n            for (const [key] of this.memoryCache){\n                if (key.includes(pattern.replace(\"*\", \"\"))) {\n                    this.memoryCache.delete(key);\n                    this.memoryCacheSize--;\n                    cleared++;\n                }\n            }\n            return cleared;\n        }\n    }\n    async invalidateIPOCache(ipoId) {\n        const patterns = [\n            this.key(\"IPO\", `detail:${ipoId}`),\n            this.key(\"IPO\", \"list:*\"),\n            this.key(\"GMP\", `*:${ipoId}`),\n            this.key(\"SUBSCRIPTION\", `*:${ipoId}`),\n            this.key(\"DEMAND\", `*:${ipoId}`),\n            this.key(\"REALTIME\", `*:${ipoId}`)\n        ];\n        const results = await Promise.allSettled(patterns.map((pattern)=>this.invalidatePattern(pattern)));\n        return results.every((result)=>result.status === \"fulfilled\");\n    }\n    // Performance monitoring\n    async getCacheStats() {\n        try {\n            const redisInfo = await this.redis.info();\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: true,\n                redis: {\n                    memory: redisInfo.match(/used_memory_human:(.+)/)?.[1]?.trim(),\n                    keys: redisInfo.match(/db0:keys=(\\d+)/)?.[1],\n                    hits: redisInfo.match(/keyspace_hits:(\\d+)/)?.[1],\n                    misses: redisInfo.match(/keyspace_misses:(\\d+)/)?.[1]\n                },\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            const hitRate = this.metrics.operations > 0 ? (this.metrics.hits / this.metrics.operations * 100).toFixed(2) : \"0.00\";\n            return {\n                connected: false,\n                error: error.message,\n                local: {\n                    hitRate: `${hitRate}%`,\n                    totalOperations: this.metrics.operations,\n                    hits: this.metrics.hits,\n                    misses: this.metrics.misses,\n                    errors: this.metrics.errors,\n                    memoryCacheSize: this.memoryCacheSize,\n                    memoryCacheLimit: this.maxMemoryCache\n                },\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Cache warming for frequently accessed data\n    async warmCache() {\n        try {\n            console.log(\"\\uD83D\\uDD25 Starting cache warm-up...\");\n            // Cache active IPOs\n            const activeIPOs = await _db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: {\n                    status: {\n                        in: [\n                            \"open\",\n                            \"upcoming\"\n                        ]\n                    },\n                    isActive: true\n                },\n                include: {\n                    gmp: {\n                        take: 10,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscription: {\n                        take: 5,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    analytics: true\n                }\n            });\n            const cachePromises = activeIPOs.map((ipo)=>this.cacheIPODetail(ipo.id, ipo));\n            await Promise.all(cachePromises);\n            // Cache IPO list with common filters\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"open\"), {\n                status: \"open\"\n            });\n            await this.cacheIPOList(activeIPOs.filter((ipo)=>ipo.status === \"upcoming\"), {\n                status: \"upcoming\"\n            });\n            console.log(`🔥 Cache warmed with ${activeIPOs.length} active IPOs`);\n            return true;\n        } catch (error) {\n            console.error(\"Cache warm-up failed:\", error);\n            return false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const testKey = \"health_check\";\n            const testValue = Date.now().toString();\n            await this.set(testKey, testValue, 10);\n            const retrieved = await this.get(testKey);\n            await this.del(testKey);\n            const isHealthy = retrieved === testValue;\n            return {\n                status: isHealthy ? \"healthy\" : \"degraded\",\n                redis: isHealthy,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Cache health check failed:\", error);\n            return {\n                status: \"unhealthy\",\n                redis: false,\n                memoryCache: this.memoryCacheSize < this.maxMemoryCache,\n                error: error.message,\n                metrics: this.metrics,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Clean expired entries from memory cache\n    cleanExpiredMemoryCache() {\n        const now = Date.now();\n        const toDelete = [];\n        for (const [key, data] of this.memoryCache){\n            if (data.expiresAt <= now) {\n                toDelete.push(key);\n            }\n        }\n        for (const key of toDelete){\n            this.memoryCache.delete(key);\n            this.memoryCacheSize--;\n        }\n        return toDelete.length;\n    }\n    // Reset metrics\n    resetMetrics() {\n        this.metrics = {\n            hits: 0,\n            misses: 0,\n            errors: 0,\n            operations: 0\n        };\n    }\n    // Get cache size info\n    getCacheSize() {\n        return {\n            memoryCache: this.memoryCacheSize,\n            maxMemoryCache: this.maxMemoryCache,\n            utilizationPercent: (this.memoryCacheSize / this.maxMemoryCache * 100).toFixed(2)\n        };\n    }\n}\n// Export singleton instance\nconst cache = new CacheService();\n// Utility middleware for cache management\nconst cacheMiddleware = (ttl = 300)=>{\n    return async (req, res, next)=>{\n        const cacheKey = cache.key(\"API\", `${req.path}:${JSON.stringify(req.query)}`);\n        try {\n            const cached = await cache.get(cacheKey);\n            if (cached) {\n                return res.json({\n                    ...cached,\n                    cached: true,\n                    cacheTimestamp: new Date().toISOString()\n                });\n            }\n            // Store original res.json\n            const originalJson = res.json;\n            // Override res.json to cache the response\n            res.json = function(data) {\n                cache.set(cacheKey, data, ttl);\n                return originalJson.call(this, data);\n            };\n            next();\n        } catch (error) {\n            console.error(\"Cache middleware error:\", error);\n            next();\n        }\n    };\n};\n// Middleware to invalidate cache on updates\nconst invalidateCacheOnUpdate = (patterns)=>{\n    return async (req, res, next)=>{\n        // Store original response methods\n        const originalJson = res.json;\n        const originalSend = res.send;\n        const cleanup = async (data)=>{\n            if (res.statusCode >= 200 && res.statusCode < 300) {\n                // Success response, invalidate cache\n                await Promise.all(patterns.map((pattern)=>cache.invalidatePattern(pattern)));\n            }\n            return data;\n        };\n        res.json = function(data) {\n            cleanup(data);\n            return originalJson.call(this, data);\n        };\n        res.send = function(data) {\n            cleanup(data);\n            return originalSend.call(this, data);\n        };\n        next();\n    };\n};\n// Auto-cleanup expired memory cache entries every 5 minutes\nsetInterval(()=>{\n    const cleaned = cache.cleanExpiredMemoryCache();\n    if (cleaned > 0) {\n        console.log(`🧹 Cleaned up ${cleaned} expired memory cache entries`);\n    }\n}, 5 * 60 * 1000);\n// Periodic cache warming (every hour)\nsetInterval(async ()=>{\n    try {\n        await cache.warmCache();\n    } catch (error) {\n        console.error(\"Scheduled cache warming failed:\", error);\n    }\n}, 60 * 60 * 1000);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/db.js":
/*!***********************!*\
  !*** ./src/lib/db.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchOperation: () => (/* binding */ batchOperation),\n/* harmony export */   checkDBHealth: () => (/* binding */ checkDBHealth),\n/* harmony export */   checkDatabaseSeeded: () => (/* binding */ checkDatabaseSeeded),\n/* harmony export */   cleanupExpiredCache: () => (/* binding */ cleanupExpiredCache),\n/* harmony export */   cleanupOldSyncLogs: () => (/* binding */ cleanupOldSyncLogs),\n/* harmony export */   createBackupSnapshot: () => (/* binding */ createBackupSnapshot),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConnectionInfo: () => (/* binding */ getConnectionInfo),\n/* harmony export */   getDatabaseMetrics: () => (/* binding */ getDatabaseMetrics),\n/* harmony export */   getDatabaseSize: () => (/* binding */ getDatabaseSize),\n/* harmony export */   getSlowQueries: () => (/* binding */ getSlowQueries),\n/* harmony export */   optimizeDatabase: () => (/* binding */ optimizeDatabase),\n/* harmony export */   performMaintenance: () => (/* binding */ performMaintenance),\n/* harmony export */   prisma: () => (/* binding */ prisma),\n/* harmony export */   resetTables: () => (/* binding */ resetTables),\n/* harmony export */   withTransaction: () => (/* binding */ withTransaction)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ],\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    },\n    // Connection pool configuration for better performance\n    __internal: {\n        engine: {\n            connectTimeout: 60000,\n            queryTimeout: 60000\n        }\n    }\n});\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n// Database health check\nasync function checkDBHealth() {\n    try {\n        await prisma.$queryRaw`SELECT 1 as health`;\n        return {\n            status: \"healthy\",\n            timestamp: new Date().toISOString(),\n            connection: \"active\",\n            version: await getDatabaseVersion()\n        };\n    } catch (error) {\n        return {\n            status: \"unhealthy\",\n            error: error.message,\n            timestamp: new Date().toISOString(),\n            connection: \"failed\"\n        };\n    }\n}\n// Get database version\nasync function getDatabaseVersion() {\n    try {\n        const result = await prisma.$queryRaw`SELECT VERSION() as version`;\n        return result[0]?.version || \"unknown\";\n    } catch (error) {\n        return \"unknown\";\n    }\n}\n// Database cleanup utility for expired cache entries\nasync function cleanupExpiredCache() {\n    try {\n        const result = await prisma.cacheEntry.deleteMany({\n            where: {\n                expiresAt: {\n                    lt: new Date()\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} expired cache entries`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Cache cleanup failed:\", error);\n        return 0;\n    }\n}\n// Cleanup old sync logs (keep only last 30 days)\nasync function cleanupOldSyncLogs() {\n    try {\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const result = await prisma.syncLog.deleteMany({\n            where: {\n                createdAt: {\n                    lt: thirtyDaysAgo\n                }\n            }\n        });\n        console.log(`🧹 Cleaned up ${result.count} old sync logs`);\n        return result.count;\n    } catch (error) {\n        console.error(\"Sync logs cleanup failed:\", error);\n        return 0;\n    }\n}\n// Transaction helper for complex operations\nasync function withTransaction(callback) {\n    return await prisma.$transaction(callback, {\n        maxWait: 5000,\n        timeout: 10000,\n        isolationLevel: \"ReadCommitted\"\n    });\n}\n// Batch operations helper\nasync function batchOperation(operation, data, batchSize = 100) {\n    const results = [];\n    const errors = [];\n    for(let i = 0; i < data.length; i += batchSize){\n        const batch = data.slice(i, i + batchSize);\n        try {\n            const batchResult = await operation(batch);\n            results.push(batchResult);\n        } catch (error) {\n            errors.push({\n                batchIndex: Math.floor(i / batchSize),\n                error: error.message,\n                data: batch\n            });\n        }\n    }\n    return {\n        results,\n        errors\n    };\n}\n// Connection pool management\nasync function getConnectionInfo() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        count(*) as total_connections,\r\n        count(*) FILTER (WHERE state = 'active') as active_connections,\r\n        count(*) FILTER (WHERE state = 'idle') as idle_connections\r\n      FROM pg_stat_activity \r\n      WHERE datname = current_database()\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get connection info:\", error);\n        return null;\n    }\n}\n// Database performance metrics\nasync function getDatabaseMetrics() {\n    try {\n        const [connectionInfo, tableStats, indexStats] = await Promise.all([\n            getConnectionInfo(),\n            getTableStats(),\n            getIndexStats()\n        ]);\n        return {\n            connections: connectionInfo,\n            tables: tableStats,\n            indexes: indexStats,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Failed to get database metrics:\", error);\n        return {\n            error: error.message\n        };\n    }\n}\n// Get table statistics\nasync function getTableStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        n_tup_ins as inserts,\r\n        n_tup_upd as updates,\r\n        n_tup_del as deletes,\r\n        n_live_tup as live_tuples,\r\n        n_dead_tup as dead_tuples\r\n      FROM pg_stat_user_tables\r\n      ORDER BY n_live_tup DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Get index statistics\nasync function getIndexStats() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        schemaname,\r\n        tablename,\r\n        indexname,\r\n        idx_tup_read as tuples_read,\r\n        idx_tup_fetch as tuples_fetched\r\n      FROM pg_stat_user_indexes\r\n      WHERE idx_tup_read > 0\r\n      ORDER BY idx_tup_read DESC\r\n      LIMIT 10\r\n    `;\n        return result;\n    } catch (error) {\n        return [];\n    }\n}\n// Backup and maintenance functions\nasync function createBackupSnapshot() {\n    try {\n        const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n        console.log(`📦 Creating backup snapshot at ${timestamp}`);\n        // This would integrate with your backup solution\n        // For now, we'll just log the operation\n        console.log(\"✅ Backup snapshot created successfully\");\n        return {\n            success: true,\n            timestamp,\n            message: \"Backup snapshot created\"\n        };\n    } catch (error) {\n        console.error(\"Backup snapshot failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Database optimization\nasync function optimizeDatabase() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting database optimization...\");\n        // Analyze tables for better query planning\n        await prisma.$executeRaw`ANALYZE`;\n        // Vacuum to reclaim space (for PostgreSQL)\n        await prisma.$executeRaw`VACUUM (ANALYZE, VERBOSE)`;\n        console.log(\"✅ Database optimization completed\");\n        return {\n            success: true,\n            message: \"Database optimization completed\",\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(\"Database optimization failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Seed check - verify if database has initial data\nasync function checkDatabaseSeeded() {\n    try {\n        const ipoCount = await prisma.iPO.count();\n        const userCount = await prisma.user.count();\n        return {\n            isSeeded: ipoCount > 0 && userCount > 0,\n            counts: {\n                ipos: ipoCount,\n                users: userCount\n            }\n        };\n    } catch (error) {\n        return {\n            isSeeded: false,\n            error: error.message\n        };\n    }\n}\n// Utility function to reset specific tables (for development)\nasync function resetTables(tableNames = []) {\n    if (false) {}\n    try {\n        console.log(`🗑️  Resetting tables: ${tableNames.join(\", \")}`);\n        for (const tableName of tableNames){\n            switch(tableName.toLowerCase()){\n                case \"gmp\":\n                    await prisma.gMP.deleteMany();\n                    break;\n                case \"subscription\":\n                    await prisma.subscriptionData.deleteMany();\n                    break;\n                case \"demand\":\n                    await prisma.marketDemand.deleteMany();\n                    break;\n                case \"allotments\":\n                    await prisma.allotment.deleteMany();\n                    break;\n                case \"analytics\":\n                    await prisma.iPOAnalytics.deleteMany();\n                    break;\n                case \"synclogs\":\n                    await prisma.syncLog.deleteMany();\n                    break;\n                case \"cache\":\n                    await prisma.cacheEntry.deleteMany();\n                    break;\n                default:\n                    console.warn(`Unknown table: ${tableName}`);\n            }\n        }\n        console.log(\"✅ Tables reset successfully\");\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Table reset failed:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Get database size and usage information\nasync function getDatabaseSize() {\n    try {\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        pg_size_pretty(pg_database_size(current_database())) as database_size,\r\n        pg_size_pretty(pg_total_relation_size('ipos')) as ipos_table_size,\r\n        pg_size_pretty(pg_total_relation_size('gmp')) as gmp_table_size,\r\n        pg_size_pretty(pg_total_relation_size('subscription_data')) as subscription_table_size\r\n    `;\n        return result[0];\n    } catch (error) {\n        console.error(\"Failed to get database size:\", error);\n        return null;\n    }\n}\n// Monitor slow queries (if available)\nasync function getSlowQueries(limit = 10) {\n    try {\n        // This requires pg_stat_statements extension\n        const result = await prisma.$queryRaw`\r\n      SELECT \r\n        query,\r\n        calls,\r\n        total_time,\r\n        mean_time,\r\n        rows\r\n      FROM pg_stat_statements\r\n      ORDER BY mean_time DESC\r\n      LIMIT ${limit}\r\n    `;\n        return result;\n    } catch (error) {\n        // Extension might not be available\n        return [];\n    }\n}\n// Periodic maintenance function\nasync function performMaintenance() {\n    try {\n        console.log(\"\\uD83D\\uDD27 Starting periodic maintenance...\");\n        const results = await Promise.allSettled([\n            cleanupExpiredCache(),\n            cleanupOldSyncLogs(),\n            optimizeDatabase()\n        ]);\n        const summary = {\n            timestamp: new Date().toISOString(),\n            operations: [\n                {\n                    name: \"cleanupExpiredCache\",\n                    status: results[0].status,\n                    result: results[0].value || results[0].reason\n                },\n                {\n                    name: \"cleanupOldSyncLogs\",\n                    status: results[1].status,\n                    result: results[1].value || results[1].reason\n                },\n                {\n                    name: \"optimizeDatabase\",\n                    status: results[2].status,\n                    result: results[2].value || results[2].reason\n                }\n            ]\n        };\n        console.log(\"✅ Periodic maintenance completed:\", summary);\n        return summary;\n    } catch (error) {\n        console.error(\"Periodic maintenance failed:\", error);\n        return {\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n// Schedule periodic maintenance (runs every 6 hours)\nif ( true && process.env.ENABLE_MAINTENANCE !== \"false\") {\n    setInterval(async ()=>{\n        try {\n            await performMaintenance();\n        } catch (error) {\n            console.error(\"Scheduled maintenance failed:\", error);\n        }\n    }, 6 * 60 * 60 * 1000); // 6 hours\n}\n// Graceful shutdown handler\nasync function gracefulShutdown() {\n    console.log(\"\\uD83D\\uDD0C Closing database connections...\");\n    try {\n        await prisma.$disconnect();\n        console.log(\"✅ Database connections closed successfully\");\n    } catch (error) {\n        console.error(\"❌ Error closing database connections:\", error);\n    }\n}\n// Handle process shutdown\nprocess.on(\"SIGINT\", gracefulShutdown);\nprocess.on(\"SIGTERM\", gracefulShutdown);\nprocess.on(\"SIGQUIT\", gracefulShutdown);\n// Handle uncaught exceptions\nprocess.on(\"uncaughtException\", async (error)=>{\n    console.error(\"Uncaught Exception:\", error);\n    await gracefulShutdown();\n    process.exit(1);\n});\nprocess.on(\"unhandledRejection\", async (reason, promise)=>{\n    console.error(\"Unhandled Rejection at:\", promise, \"reason:\", reason);\n    await gracefulShutdown();\n    process.exit(1);\n});\n// Default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/db.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/websocket.js":
/*!******************************!*\
  !*** ./src/lib/websocket.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   io: () => (/* binding */ io),\n/* harmony export */   webSocketService: () => (/* binding */ webSocketService)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"(rsc)/./node_modules/socket.io/wrapper.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./src/lib/db.js\");\n\n\n\n\nclass WebSocketService {\n    constructor(){\n        this.io = null;\n        this.server = null;\n        this.connectedClients = new Map();\n        this.roomSubscriptions = new Map();\n        this.port = process.env.WEBSOCKET_PORT || 3001;\n        // Event types for real-time updates\n        this.events = {\n            IPO_UPDATE: \"ipo:update\",\n            GMP_UPDATE: \"gmp:update\",\n            SUBSCRIPTION_UPDATE: \"subscription:update\",\n            DEMAND_UPDATE: \"demand:update\",\n            ALLOTMENT_UPDATE: \"allotment:update\",\n            SYSTEM_STATUS: \"system:status\",\n            ANALYTICS_UPDATE: \"analytics:update\",\n            NEWS_UPDATE: \"news:update\",\n            ALERT_TRIGGERED: \"alert:triggered\"\n        };\n        // Rate limiting configuration\n        this.rateLimits = new Map();\n        this.maxEventsPerSecond = 20;\n        this.maxSubscriptionsPerClient = 100;\n        // Performance monitoring\n        this.metrics = {\n            totalConnections: 0,\n            currentConnections: 0,\n            totalMessages: 0,\n            totalSubscriptions: 0,\n            errors: 0,\n            startTime: Date.now(),\n            averageResponseTime: 0,\n            peakConnections: 0\n        };\n        // Connection health tracking\n        this.connectionHealth = new Map();\n        // Message queue for offline clients\n        this.messageQueue = new Map();\n        this.maxQueueSize = 50;\n    }\n    // Initialize WebSocket server with enhanced configuration\n    initialize() {\n        try {\n            this.server = (0,http__WEBPACK_IMPORTED_MODULE_1__.createServer)();\n            this.io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(this.server, {\n                cors: {\n                    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n                    methods: [\n                        \"GET\",\n                        \"POST\"\n                    ],\n                    credentials: true\n                },\n                pingTimeout: 60000,\n                pingInterval: 25000,\n                maxHttpBufferSize: 2e6,\n                transports: [\n                    \"websocket\",\n                    \"polling\"\n                ],\n                allowEIO3: true,\n                // Connection rate limiting\n                connectTimeout: 45000,\n                upgradeTimeout: 10000\n            });\n            this.setupEventHandlers();\n            this.startHeartbeat();\n            this.startMetricsCollection();\n            this.startHealthMonitoring();\n            console.log(\"\\uD83D\\uDD0C WebSocket service initialized successfully\");\n            return this;\n        } catch (error) {\n            console.error(\"❌ Failed to initialize WebSocket service:\", error);\n            throw error;\n        }\n    }\n    // Start the WebSocket server\n    async start() {\n        try {\n            await new Promise((resolve, reject)=>{\n                this.server.listen(this.port, (err)=>{\n                    if (err) {\n                        reject(err);\n                    } else {\n                        console.log(`🚀 WebSocket server running on port ${this.port}`);\n                        console.log(`🌐 Accepting connections from: ${process.env.FRONTEND_URL || \"http://localhost:3000\"}`);\n                        resolve();\n                    }\n                });\n            });\n            // Start periodic cleanup\n            this.startPeriodicCleanup();\n        } catch (error) {\n            console.error(\"❌ Failed to start WebSocket server:\", error);\n            throw error;\n        }\n    }\n    // Enhanced event handlers\n    setupEventHandlers() {\n        this.io.on(\"connection\", (socket)=>{\n            this.handleClientConnection(socket);\n            this.setupClientEventListeners(socket);\n            // Track metrics\n            this.metrics.totalConnections++;\n            this.metrics.currentConnections++;\n            this.metrics.peakConnections = Math.max(this.metrics.peakConnections, this.metrics.currentConnections);\n        });\n        // Handle server errors\n        this.io.on(\"error\", (error)=>{\n            console.error(\"\\uD83D\\uDD0C WebSocket server error:\", error);\n            this.metrics.errors++;\n        });\n    }\n    handleClientConnection(socket) {\n        const clientIP = socket.handshake.address;\n        const userAgent = socket.handshake.headers[\"user-agent\"] || \"Unknown\";\n        console.log(`🔌 Client connected: ${socket.id} from ${clientIP}`);\n        const clientInfo = {\n            socket,\n            connectedAt: new Date(),\n            subscriptions: new Set(),\n            lastActivity: new Date(),\n            subscriptionCount: 0,\n            messageCount: 0,\n            userAgent,\n            ipAddress: clientIP,\n            isHealthy: true,\n            lastPing: Date.now(),\n            reconnectCount: 0\n        };\n        this.connectedClients.set(socket.id, clientInfo);\n        this.connectionHealth.set(socket.id, {\n            status: \"connected\",\n            latency: 0,\n            lastSeen: Date.now()\n        });\n        // Send connection confirmation with server info\n        socket.emit(\"connected\", {\n            socketId: socket.id,\n            timestamp: Date.now(),\n            serverVersion: \"1.0.0\",\n            availableEvents: Object.values(this.events),\n            maxSubscriptions: this.maxSubscriptionsPerClient,\n            rateLimits: {\n                maxEventsPerSecond: this.maxEventsPerSecond\n            },\n            features: {\n                realTimeUpdates: true,\n                batchSubscriptions: true,\n                messageQueue: true,\n                analytics: true\n            }\n        });\n        // Send queued messages if any\n        this.sendQueuedMessages(socket.id);\n    }\n    setupClientEventListeners(socket) {\n        // IPO subscription with enhanced features\n        socket.on(\"subscribe:ipo\", async (data)=>{\n            await this.handleSubscription(socket, \"ipo\", data, async ()=>{\n                const { ipoId, symbol, includeAnalytics = false } = data;\n                if (ipoId) {\n                    socket.join(`ipo:${ipoId}`);\n                    this.addSubscription(socket.id, \"ipo\", ipoId);\n                    // Send current data immediately\n                    const ipoData = await this.getCurrentIPOData(ipoId);\n                    if (ipoData) {\n                        socket.emit(this.events.IPO_UPDATE, {\n                            ipoId,\n                            data: ipoData,\n                            type: \"initial_data\",\n                            timestamp: Date.now()\n                        });\n                        // Send analytics if requested\n                        if (includeAnalytics && ipoData.analytics) {\n                            socket.emit(this.events.ANALYTICS_UPDATE, {\n                                ipoId,\n                                data: ipoData.analytics,\n                                type: \"initial_analytics\",\n                                timestamp: Date.now()\n                            });\n                        }\n                    }\n                }\n            });\n        });\n        // Enhanced GMP subscription\n        socket.on(\"subscribe:gmp\", async (data)=>{\n            await this.handleSubscription(socket, \"gmp\", data, async ()=>{\n                const { ipoId, symbol, historical = false, alertThreshold = null } = data;\n                if (ipoId) {\n                    socket.join(`gmp:${ipoId}`);\n                    this.addSubscription(socket.id, \"gmp\", ipoId);\n                    // Send current GMP data\n                    const gmpData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"GMP\", ipoId);\n                    if (gmpData) {\n                        socket.emit(this.events.GMP_UPDATE, {\n                            ipoId,\n                            data: gmpData,\n                            type: \"current\",\n                            timestamp: Date.now()\n                        });\n                    }\n                    // Send historical data if requested\n                    if (historical) {\n                        const historicalGMP = await this.getHistoricalGMPData(ipoId, 30);\n                        socket.emit(\"gmp:historical\", {\n                            ipoId,\n                            data: historicalGMP,\n                            type: \"historical\",\n                            days: 30\n                        });\n                    }\n                    // Set up alert threshold if provided\n                    if (alertThreshold !== null) {\n                        this.setupGMPAlert(socket.id, ipoId, alertThreshold);\n                    }\n                }\n            });\n        });\n        // Real-time subscription data updates\n        socket.on(\"subscribe:subscription\", async (data)=>{\n            await this.handleSubscription(socket, \"subscription\", data, async ()=>{\n                const { symbol, categories = [], realTime = true } = data;\n                socket.join(`subscription:${symbol}`);\n                this.addSubscription(socket.id, \"subscription\", symbol);\n                // Send current subscription data\n                const subData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"SUBSCRIPTION\", symbol);\n                if (subData) {\n                    const filteredData = categories.length > 0 ? subData.data?.filter((item)=>categories.includes(item.category)) : subData;\n                    socket.emit(this.events.SUBSCRIPTION_UPDATE, {\n                        symbol,\n                        data: filteredData,\n                        categories: categories.length > 0 ? categories : \"all\",\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // Market demand updates with price filtering\n        socket.on(\"subscribe:demand\", async (data)=>{\n            await this.handleSubscription(socket, \"demand\", data, async ()=>{\n                const { symbol, priceRange = null, cutOffOnly = false } = data;\n                socket.join(`demand:${symbol}`);\n                this.addSubscription(socket.id, \"demand\", symbol);\n                // Send current demand data\n                const demandData = await _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.getRealTimeData(\"DEMAND\", symbol);\n                if (demandData) {\n                    let filteredData = demandData.data || [];\n                    // Apply filters\n                    if (cutOffOnly) {\n                        filteredData = filteredData.filter((item)=>item.cutOffIndicator);\n                    }\n                    if (priceRange && priceRange.min !== undefined && priceRange.max !== undefined) {\n                        filteredData = filteredData.filter((item)=>item.price >= priceRange.min && item.price <= priceRange.max);\n                    }\n                    socket.emit(this.events.DEMAND_UPDATE, {\n                        symbol,\n                        data: filteredData,\n                        filters: {\n                            priceRange,\n                            cutOffOnly\n                        },\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // Analytics subscription with customizable metrics\n        socket.on(\"subscribe:analytics\", async (data)=>{\n            await this.handleSubscription(socket, \"analytics\", data, async ()=>{\n                const { ipoId, type = \"all\", metrics = [], updateInterval = 30000 } = data;\n                socket.join(`analytics:${ipoId}`);\n                this.addSubscription(socket.id, \"analytics\", ipoId);\n                // Send current analytics\n                const analytics = await this.getCurrentAnalytics(ipoId, type);\n                if (analytics) {\n                    const filteredAnalytics = metrics.length > 0 ? this.filterAnalyticsByMetrics(analytics, metrics) : analytics;\n                    socket.emit(this.events.ANALYTICS_UPDATE, {\n                        ipoId,\n                        type,\n                        data: filteredAnalytics,\n                        metrics: metrics.length > 0 ? metrics : \"all\",\n                        timestamp: Date.now()\n                    });\n                }\n            });\n        });\n        // System status subscription\n        socket.on(\"subscribe:system\", async ()=>{\n            socket.join(\"system:status\");\n            this.addSubscription(socket.id, \"system\", \"status\");\n            // Send current system status\n            const systemStatus = await this.getSystemStatus();\n            socket.emit(this.events.SYSTEM_STATUS, {\n                ...systemStatus,\n                type: \"current_status\",\n                timestamp: Date.now()\n            });\n        });\n        // Batch subscription for multiple IPOs with advanced options\n        socket.on(\"subscribe:batch\", async (data)=>{\n            const { subscriptions = [], options = {} } = data;\n            const { maxSubscriptions = 20, skipErrors = true } = options;\n            const results = [];\n            // Limit batch size\n            const limitedSubscriptions = subscriptions.slice(0, maxSubscriptions);\n            for (const sub of limitedSubscriptions){\n                try {\n                    await this.handleSingleSubscription(socket, sub);\n                    results.push({\n                        ...sub,\n                        status: \"success\"\n                    });\n                } catch (error) {\n                    results.push({\n                        ...sub,\n                        status: \"error\",\n                        error: error.message\n                    });\n                    if (!skipErrors) {\n                        break;\n                    }\n                }\n            }\n            socket.emit(\"subscribe:batch:result\", {\n                results,\n                processed: results.length,\n                successful: results.filter((r)=>r.status === \"success\").length,\n                errors: results.filter((r)=>r.status === \"error\").length,\n                timestamp: Date.now()\n            });\n        });\n        // Enhanced unsubscribe with patterns\n        socket.on(\"unsubscribe\", (data)=>{\n            const { type, identifier, pattern } = data;\n            if (pattern === \"all\") {\n                this.unsubscribeAll(socket.id);\n                socket.emit(\"unsubscribe:result\", {\n                    pattern: \"all\",\n                    status: \"success\",\n                    message: \"Unsubscribed from all events\"\n                });\n            } else if (type && identifier) {\n                const roomKey = `${type}:${identifier}`;\n                socket.leave(roomKey);\n                this.removeSubscription(socket.id, type, identifier);\n                socket.emit(\"unsubscribe:result\", {\n                    type,\n                    identifier,\n                    status: \"success\"\n                });\n            } else if (type) {\n                // Unsubscribe from all subscriptions of a specific type\n                this.unsubscribeByType(socket.id, type);\n                socket.emit(\"unsubscribe:result\", {\n                    type,\n                    status: \"success\",\n                    message: `Unsubscribed from all ${type} events`\n                });\n            }\n        });\n        // Enhanced heartbeat with performance metrics\n        socket.on(\"ping\", (data)=>{\n            const client = this.connectedClients.get(socket.id);\n            const now = Date.now();\n            if (client) {\n                client.lastActivity = new Date();\n                client.messageCount++;\n                client.lastPing = now;\n            }\n            // Calculate latency\n            const latency = data?.timestamp ? now - data.timestamp : 0;\n            this.connectionHealth.set(socket.id, {\n                status: \"healthy\",\n                latency,\n                lastSeen: now\n            });\n            socket.emit(\"pong\", {\n                timestamp: now,\n                serverUptime: now - this.metrics.startTime,\n                latency,\n                clientInfo: client ? {\n                    subscriptions: client.subscriptionCount,\n                    messages: client.messageCount,\n                    connectedFor: now - client.connectedAt.getTime()\n                } : null\n            });\n        });\n        // Client info and statistics request\n        socket.on(\"client:info\", ()=>{\n            const client = this.connectedClients.get(socket.id);\n            const health = this.connectionHealth.get(socket.id);\n            if (client) {\n                socket.emit(\"client:info\", {\n                    socketId: socket.id,\n                    connectedAt: client.connectedAt,\n                    subscriptions: Array.from(client.subscriptions),\n                    subscriptionCount: client.subscriptionCount,\n                    messageCount: client.messageCount,\n                    userAgent: client.userAgent,\n                    ipAddress: client.ipAddress,\n                    health: health || {\n                        status: \"unknown\"\n                    },\n                    serverMetrics: {\n                        totalConnections: this.metrics.currentConnections,\n                        serverUptime: Date.now() - this.metrics.startTime\n                    }\n                });\n            }\n        });\n        // Request server statistics\n        socket.on(\"server:stats\", ()=>{\n            if (this.isAuthorized(socket)) {\n                // Only for authorized clients\n                const stats = this.getDetailedStats();\n                socket.emit(\"server:stats\", stats);\n            } else {\n                socket.emit(\"error\", {\n                    type: \"unauthorized\",\n                    message: \"Not authorized to view server statistics\"\n                });\n            }\n        });\n        // Error handling\n        socket.on(\"error\", (error)=>{\n            console.error(`🔌 Socket error for ${socket.id}:`, error);\n            this.metrics.errors++;\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                client.isHealthy = false;\n            }\n            this.connectionHealth.set(socket.id, {\n                status: \"error\",\n                error: error.message,\n                lastSeen: Date.now()\n            });\n        });\n        // Disconnect handling with cleanup\n        socket.on(\"disconnect\", (reason)=>{\n            console.log(`🔌 Client disconnected: ${socket.id}, reason: ${reason}`);\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                // Store disconnection info for potential reconnection\n                this.handleClientDisconnection(socket.id, reason);\n            }\n            this.cleanupClient(socket.id);\n            this.metrics.currentConnections--;\n        });\n        // Reconnection handling\n        socket.on(\"reconnect\", (data)=>{\n            console.log(`🔄 Client reconnected: ${socket.id}`);\n            const client = this.connectedClients.get(socket.id);\n            if (client) {\n                client.reconnectCount++;\n                client.lastActivity = new Date();\n                // Send queued messages\n                this.sendQueuedMessages(socket.id);\n            }\n        });\n    }\n    // Enhanced subscription handling with validation\n    async handleSubscription(socket, type, data, subscriptionLogic) {\n        try {\n            const client = this.connectedClients.get(socket.id);\n            if (!client) {\n                throw new Error(\"Client not found\");\n            }\n            // Check subscription limits\n            if (client.subscriptionCount >= this.maxSubscriptionsPerClient) {\n                throw new Error(`Maximum subscriptions limit reached (${this.maxSubscriptionsPerClient})`);\n            }\n            // Check rate limits\n            if (!this.checkRateLimit(socket.id, type)) {\n                throw new Error(\"Rate limit exceeded. Please slow down.\");\n            }\n            // Validate subscription data\n            this.validateSubscriptionData(type, data);\n            // Execute subscription logic\n            await subscriptionLogic();\n            // Update client info\n            client.lastActivity = new Date();\n            client.messageCount++;\n            // Send success confirmation\n            socket.emit(\"subscribe:success\", {\n                type,\n                data,\n                timestamp: Date.now(),\n                subscriptionCount: client.subscriptionCount\n            });\n        } catch (error) {\n            console.error(`Subscription failed for ${socket.id}:`, error.message);\n            socket.emit(\"subscribe:error\", {\n                type: \"subscription_failed\",\n                message: error.message,\n                subscriptionType: type,\n                data,\n                timestamp: Date.now()\n            });\n        }\n    }\n    // Validate subscription data\n    validateSubscriptionData(type, data) {\n        switch(type){\n            case \"ipo\":\n                if (!data.ipoId && !data.symbol) {\n                    throw new Error(\"Either ipoId or symbol is required for IPO subscription\");\n                }\n                break;\n            case \"gmp\":\n                if (!data.ipoId && !data.symbol) {\n                    throw new Error(\"Either ipoId or symbol is required for GMP subscription\");\n                }\n                break;\n            case \"subscription\":\n            case \"demand\":\n                if (!data.symbol) {\n                    throw new Error(\"Symbol is required for subscription/demand data\");\n                }\n                break;\n            case \"analytics\":\n                if (!data.ipoId) {\n                    throw new Error(\"IPO ID is required for analytics subscription\");\n                }\n                break;\n        }\n    }\n    // Handle single subscription (for batch operations)\n    async handleSingleSubscription(socket, { type, ipoId, symbol, options = {} }) {\n        switch(type){\n            case \"ipo\":\n                if (ipoId) {\n                    socket.join(`ipo:${ipoId}`);\n                    this.addSubscription(socket.id, \"ipo\", ipoId);\n                }\n                break;\n            case \"gmp\":\n                if (ipoId) {\n                    socket.join(`gmp:${ipoId}`);\n                    this.addSubscription(socket.id, \"gmp\", ipoId);\n                }\n                break;\n            case \"subscription\":\n                if (symbol) {\n                    socket.join(`subscription:${symbol}`);\n                    this.addSubscription(socket.id, \"subscription\", symbol);\n                }\n                break;\n            case \"demand\":\n                if (symbol) {\n                    socket.join(`demand:${symbol}`);\n                    this.addSubscription(socket.id, \"demand\", symbol);\n                }\n                break;\n            case \"analytics\":\n                if (ipoId) {\n                    socket.join(`analytics:${ipoId}`);\n                    this.addSubscription(socket.id, \"analytics\", ipoId);\n                }\n                break;\n            default:\n                throw new Error(`Unknown subscription type: ${type}`);\n        }\n    }\n    // Enhanced rate limiting\n    checkRateLimit(socketId, eventType) {\n        const key = `${socketId}:${eventType}`;\n        const now = Date.now();\n        const windowStart = Math.floor(now / 1000) * 1000;\n        if (!this.rateLimits.has(key)) {\n            this.rateLimits.set(key, {\n                count: 0,\n                windowStart\n            });\n        }\n        const limit = this.rateLimits.get(key);\n        if (limit.windowStart !== windowStart) {\n            limit.count = 0;\n            limit.windowStart = windowStart;\n        }\n        if (limit.count >= this.maxEventsPerSecond) {\n            return false;\n        }\n        limit.count++;\n        return true;\n    }\n    // Subscription management\n    addSubscription(socketId, type, identifier) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionKey = `${type}:${identifier}`;\n            client.subscriptions.add(subscriptionKey);\n            client.subscriptionCount = client.subscriptions.size;\n            // Track room subscriptions\n            if (!this.roomSubscriptions.has(subscriptionKey)) {\n                this.roomSubscriptions.set(subscriptionKey, new Set());\n            }\n            this.roomSubscriptions.get(subscriptionKey).add(socketId);\n            this.metrics.totalSubscriptions++;\n        }\n    }\n    removeSubscription(socketId, type, identifier) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionKey = `${type}:${identifier}`;\n            client.subscriptions.delete(subscriptionKey);\n            client.subscriptionCount = client.subscriptions.size;\n            // Remove from room subscriptions\n            const roomSubs = this.roomSubscriptions.get(subscriptionKey);\n            if (roomSubs) {\n                roomSubs.delete(socketId);\n                if (roomSubs.size === 0) {\n                    this.roomSubscriptions.delete(subscriptionKey);\n                }\n            }\n        }\n    }\n    unsubscribeAll(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            for (const subscription of client.subscriptions){\n                const [type, identifier] = subscription.split(\":\");\n                client.socket.leave(subscription);\n                this.removeSubscription(socketId, type, identifier);\n            }\n        }\n    }\n    unsubscribeByType(socketId, type) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            const subscriptionsToRemove = Array.from(client.subscriptions).filter((sub)=>sub.startsWith(`${type}:`));\n            for (const subscription of subscriptionsToRemove){\n                const [, identifier] = subscription.split(\":\");\n                client.socket.leave(subscription);\n                this.removeSubscription(socketId, type, identifier);\n            }\n        }\n    }\n    // Enhanced broadcasting methods\n    async broadcastIPOUpdate(ipoId, updateData, options = {}) {\n        try {\n            const { priority = \"normal\", excludeSocket = null, includeAnalytics = false } = options;\n            if (!this.checkBroadcastRateLimit(\"ipo\", ipoId)) {\n                return;\n            }\n            const room = `ipo:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    ipoId,\n                    data: updateData,\n                    timestamp: Date.now(),\n                    priority,\n                    server: process.env.SERVER_ID || \"ws-1\",\n                    type: \"update\"\n                };\n                if (includeAnalytics && updateData.analytics) {\n                    enrichedData.analytics = updateData.analytics;\n                }\n                if (excludeSocket) {\n                    this.io.to(room).except(excludeSocket).emit(this.events.IPO_UPDATE, enrichedData);\n                } else {\n                    this.io.to(room).emit(this.events.IPO_UPDATE, enrichedData);\n                }\n                console.log(`📡 IPO update broadcast to ${subscriberCount} clients for IPO ${ipoId}`);\n                this.metrics.totalMessages++;\n                // Queue message for offline clients if critical\n                if (priority === \"high\") {\n                    this.queueMessageForOfflineClients(room, enrichedData);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting IPO update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastGMPUpdate(ipoId, gmpData, options = {}) {\n        try {\n            const { historical = false, alertCheck = true } = options;\n            if (!this.checkBroadcastRateLimit(\"gmp\", ipoId)) {\n                return;\n            }\n            const room = `gmp:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const change = await this.calculateGMPChange(ipoId, gmpData.value);\n                const enrichedData = {\n                    ipoId,\n                    data: gmpData,\n                    timestamp: Date.now(),\n                    historical,\n                    change,\n                    trend: this.calculateGMPTrend(change),\n                    volatility: await this.calculateGMPVolatility(ipoId)\n                };\n                this.io.to(room).emit(this.events.GMP_UPDATE, enrichedData);\n                console.log(`💰 GMP update broadcast to ${subscriberCount} clients for IPO ${ipoId} (Value: ${gmpData.value})`);\n                this.metrics.totalMessages++;\n                // Check for GMP alerts\n                if (alertCheck) {\n                    this.checkGMPAlerts(ipoId, gmpData.value);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting GMP update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastSubscriptionUpdate(symbol, subscriptionData, options = {}) {\n        try {\n            const { category = null, alertOnOversubscription = true } = options;\n            if (!this.checkBroadcastRateLimit(\"subscription\", symbol)) {\n                return;\n            }\n            const room = `subscription:${symbol}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    symbol,\n                    data: subscriptionData,\n                    timestamp: Date.now(),\n                    category,\n                    overallSubscription: this.calculateOverallSubscription(subscriptionData),\n                    isOversubscribed: this.isOversubscribed(subscriptionData)\n                };\n                this.io.to(room).emit(this.events.SUBSCRIPTION_UPDATE, enrichedData);\n                console.log(`📊 Subscription update broadcast to ${subscriberCount} clients for ${symbol}`);\n                this.metrics.totalMessages++;\n                // Alert on oversubscription\n                if (alertOnOversubscription && enrichedData.isOversubscribed) {\n                    this.broadcastAlert(\"oversubscription\", {\n                        symbol,\n                        subscription: enrichedData.overallSubscription,\n                        timestamp: Date.now()\n                    });\n                }\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting subscription update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastDemandUpdate(symbol, demandData, options = {}) {\n        try {\n            const { priceLevel = null } = options;\n            if (!this.checkBroadcastRateLimit(\"demand\", symbol)) {\n                return;\n            }\n            const room = `demand:${symbol}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    symbol,\n                    data: demandData,\n                    timestamp: Date.now(),\n                    priceLevel,\n                    totalDemand: this.calculateTotalDemand(demandData),\n                    cutOffDemand: this.calculateCutOffDemand(demandData)\n                };\n                this.io.to(room).emit(this.events.DEMAND_UPDATE, enrichedData);\n                console.log(`📈 Demand update broadcast to ${subscriberCount} clients for ${symbol}`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting demand update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    async broadcastAnalyticsUpdate(ipoId, analyticsData, options = {}) {\n        try {\n            const { type = \"general\", metrics = null } = options;\n            if (!this.checkBroadcastRateLimit(\"analytics\", ipoId)) {\n                return;\n            }\n            const room = `analytics:${ipoId}`;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedData = {\n                    ipoId,\n                    type,\n                    data: analyticsData,\n                    metrics,\n                    timestamp: Date.now(),\n                    insights: await this.generateAnalyticsInsights(analyticsData)\n                };\n                this.io.to(room).emit(this.events.ANALYTICS_UPDATE, enrichedData);\n                console.log(`📊 Analytics update broadcast to ${subscriberCount} clients for IPO ${ipoId}`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting analytics update:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast system status\n    async broadcastSystemStatus(status, options = {}) {\n        try {\n            const { priority = \"normal\", room = \"system:status\" } = options;\n            const subscriberCount = this.roomSubscriptions.get(room)?.size || 0;\n            if (subscriberCount > 0) {\n                const enrichedStatus = {\n                    ...status,\n                    timestamp: Date.now(),\n                    server: process.env.SERVER_ID || \"ws-1\",\n                    priority,\n                    connections: this.metrics.currentConnections\n                };\n                this.io.to(room).emit(this.events.SYSTEM_STATUS, enrichedStatus);\n                console.log(`🔔 System status broadcast to ${subscriberCount} clients`);\n                this.metrics.totalMessages++;\n            }\n        } catch (error) {\n            console.error(\"Error broadcasting system status:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast alerts\n    async broadcastAlert(alertType, alertData) {\n        try {\n            const enrichedAlert = {\n                type: alertType,\n                data: alertData,\n                timestamp: Date.now(),\n                server: process.env.SERVER_ID || \"ws-1\",\n                severity: this.getAlertSeverity(alertType)\n            };\n            // Broadcast to all connected clients\n            this.io.emit(this.events.ALERT_TRIGGERED, enrichedAlert);\n            console.log(`🚨 Alert broadcast: ${alertType}`);\n            this.metrics.totalMessages++;\n            // Store alert for queuing\n            this.queueMessageForOfflineClients(\"global\", enrichedAlert);\n        } catch (error) {\n            console.error(\"Error broadcasting alert:\", error);\n            this.metrics.errors++;\n        }\n    }\n    // Broadcast rate limiting\n    checkBroadcastRateLimit(eventType, identifier) {\n        const key = `broadcast:${eventType}:${identifier}`;\n        const now = Date.now();\n        const windowStart = Math.floor(now / 5000) * 5000; // 5-second window\n        if (!this.rateLimits.has(key)) {\n            this.rateLimits.set(key, {\n                count: 0,\n                windowStart\n            });\n        }\n        const limit = this.rateLimits.get(key);\n        if (limit.windowStart !== windowStart) {\n            limit.count = 0;\n            limit.windowStart = windowStart;\n        }\n        // Max 10 broadcasts per 5 seconds per event type\n        if (limit.count >= 10) {\n            return false;\n        }\n        limit.count++;\n        return true;\n    }\n    // Calculate GMP change and trend\n    async calculateGMPChange(ipoId, currentValue) {\n        try {\n            if (!this.previousGMPValues) {\n                this.previousGMPValues = new Map();\n            }\n            const previousValue = this.previousGMPValues.get(ipoId) || currentValue;\n            this.previousGMPValues.set(ipoId, currentValue);\n            return {\n                absolute: currentValue - previousValue,\n                percentage: previousValue > 0 ? parseFloat(((currentValue - previousValue) / previousValue * 100).toFixed(2)) : 0,\n                direction: currentValue > previousValue ? \"up\" : currentValue < previousValue ? \"down\" : \"stable\"\n            };\n        } catch (error) {\n            return {\n                absolute: 0,\n                percentage: 0,\n                direction: \"stable\"\n            };\n        }\n    }\n    calculateGMPTrend(change) {\n        if (Math.abs(change.percentage) < 1) return \"stable\";\n        if (change.percentage > 5) return \"bullish\";\n        if (change.percentage < -5) return \"bearish\";\n        return change.direction;\n    }\n    async calculateGMPVolatility(ipoId) {\n        try {\n            const recentGMP = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.gMP.findMany({\n                where: {\n                    ipoId\n                },\n                orderBy: {\n                    timestamp: \"desc\"\n                },\n                take: 10\n            });\n            if (recentGMP.length < 2) return 0;\n            const values = recentGMP.map((g)=>g.value);\n            const mean = values.reduce((a, b)=>a + b) / values.length;\n            const variance = values.reduce((acc, val)=>acc + Math.pow(val - mean, 2), 0) / values.length;\n            return Math.round(Math.sqrt(variance) * 100) / 100;\n        } catch (error) {\n            return 0;\n        }\n    }\n    // Subscription calculation utilities\n    calculateOverallSubscription(subscriptionData) {\n        if (!Array.isArray(subscriptionData)) return 0;\n        const ratios = subscriptionData.map((item)=>parseFloat(item.subscriptionRatio || 0));\n        return ratios.length > 0 ? Math.max(...ratios) : 0;\n    }\n    isOversubscribed(subscriptionData) {\n        return this.calculateOverallSubscription(subscriptionData) > 1;\n    }\n    calculateTotalDemand(demandData) {\n        if (!Array.isArray(demandData)) return 0;\n        return demandData.reduce((total, item)=>total + parseInt(item.absoluteQuantity || 0), 0);\n    }\n    calculateCutOffDemand(demandData) {\n        if (!Array.isArray(demandData)) return 0;\n        return demandData.filter((item)=>item.cutOffIndicator).reduce((total, item)=>total + parseInt(item.absoluteQuantity || 0), 0);\n    }\n    // Generate analytics insights\n    async generateAnalyticsInsights(analyticsData) {\n        const insights = [];\n        try {\n            if (analyticsData.gmpVolatility > 20) {\n                insights.push({\n                    type: \"warning\",\n                    message: \"High GMP volatility detected\",\n                    value: analyticsData.gmpVolatility\n                });\n            }\n            if (analyticsData.finalSubscription > 5) {\n                insights.push({\n                    type: \"positive\",\n                    message: \"Strong subscription demand\",\n                    value: analyticsData.finalSubscription\n                });\n            }\n            if (analyticsData.riskScore > 70) {\n                insights.push({\n                    type: \"caution\",\n                    message: \"High risk score\",\n                    value: analyticsData.riskScore\n                });\n            }\n        } catch (error) {\n            console.error(\"Error generating insights:\", error);\n        }\n        return insights;\n    }\n    // Data fetching methods\n    async getCurrentIPOData(ipoId) {\n        try {\n            const ipo = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.iPO.findUnique({\n                where: {\n                    id: ipoId\n                },\n                include: {\n                    gmp: {\n                        take: 5,\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscription: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 10\n                    },\n                    analytics: true,\n                    categories: true\n                }\n            });\n            return ipo;\n        } catch (error) {\n            console.error(\"Error fetching current IPO data:\", error);\n            return null;\n        }\n    }\n    async getHistoricalGMPData(ipoId, days = 30) {\n        try {\n            const startDate = new Date();\n            startDate.setDate(startDate.getDate() - days);\n            const gmpData = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.gMP.findMany({\n                where: {\n                    ipoId,\n                    timestamp: {\n                        gte: startDate\n                    }\n                },\n                orderBy: {\n                    timestamp: \"asc\"\n                },\n                take: 1000\n            });\n            return gmpData;\n        } catch (error) {\n            console.error(\"Error fetching historical GMP data:\", error);\n            return [];\n        }\n    }\n    async getCurrentAnalytics(ipoId, type = \"all\") {\n        try {\n            const analytics = await _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.iPOAnalytics.findUnique({\n                where: {\n                    ipoId\n                }\n            });\n            if (type === \"all\") {\n                return analytics;\n            }\n            // Return specific analytics based on type\n            const typeMapping = {\n                gmp: [\n                    \"avgGMP\",\n                    \"maxGMP\",\n                    \"minGMP\",\n                    \"gmpVolatility\"\n                ],\n                subscription: [\n                    \"finalSubscription\",\n                    \"retailSubscription\",\n                    \"qibSubscription\"\n                ],\n                prediction: [\n                    \"predictedListingGain\",\n                    \"allotmentProbability\",\n                    \"riskScore\"\n                ]\n            };\n            if (typeMapping[type] && analytics) {\n                const filteredAnalytics = {};\n                typeMapping[type].forEach((key)=>{\n                    if (analytics[key] !== undefined) {\n                        filteredAnalytics[key] = analytics[key];\n                    }\n                });\n                return filteredAnalytics;\n            }\n            return analytics;\n        } catch (error) {\n            console.error(\"Error fetching analytics:\", error);\n            return null;\n        }\n    }\n    // System status\n    async getSystemStatus() {\n        try {\n            const [dbHealth, cacheHealth] = await Promise.allSettled([\n                _db_js__WEBPACK_IMPORTED_MODULE_3__.prisma.$queryRaw`SELECT 1`,\n                _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.healthCheck()\n            ]);\n            return {\n                status: \"operational\",\n                connections: this.metrics.currentConnections,\n                uptime: Date.now() - this.metrics.startTime,\n                database: dbHealth.status === \"fulfilled\" ? \"healthy\" : \"degraded\",\n                cache: cacheHealth.status === \"fulfilled\" && cacheHealth.value.status === \"healthy\" ? \"healthy\" : \"degraded\",\n                websocket: \"healthy\",\n                version: \"1.0.0\"\n            };\n        } catch (error) {\n            return {\n                status: \"degraded\",\n                error: error.message,\n                uptime: Date.now() - this.metrics.startTime\n            };\n        }\n    }\n    // Filter analytics by specific metrics\n    filterAnalyticsByMetrics(analytics, metrics) {\n        if (!analytics || !Array.isArray(metrics)) return analytics;\n        const filtered = {};\n        metrics.forEach((metric)=>{\n            if (analytics[metric] !== undefined) {\n                filtered[metric] = analytics[metric];\n            }\n        });\n        return filtered;\n    }\n    // GMP Alert management\n    setupGMPAlert(socketId, ipoId, threshold) {\n        if (!this.gmpAlerts) {\n            this.gmpAlerts = new Map();\n        }\n        const alertKey = `${socketId}:${ipoId}`;\n        this.gmpAlerts.set(alertKey, {\n            threshold,\n            triggered: false,\n            createdAt: Date.now()\n        });\n    }\n    checkGMPAlerts(ipoId, currentGMP) {\n        if (!this.gmpAlerts) return;\n        for (const [alertKey, alert] of this.gmpAlerts){\n            const [socketId, alertIpoId] = alertKey.split(\":\");\n            if (alertIpoId === ipoId && !alert.triggered) {\n                if (currentGMP >= alert.threshold) {\n                    const client = this.connectedClients.get(socketId);\n                    if (client) {\n                        client.socket.emit(this.events.ALERT_TRIGGERED, {\n                            type: \"gmp_threshold\",\n                            ipoId,\n                            threshold: alert.threshold,\n                            currentValue: currentGMP,\n                            timestamp: Date.now()\n                        });\n                        alert.triggered = true;\n                        console.log(`🚨 GMP alert triggered for ${socketId}: ${ipoId} reached ${currentGMP}`);\n                    }\n                }\n            }\n        }\n    }\n    // Get alert severity\n    getAlertSeverity(alertType) {\n        const severityMap = {\n            gmp_threshold: \"medium\",\n            oversubscription: \"high\",\n            system_error: \"critical\",\n            connection_issue: \"low\",\n            rate_limit: \"medium\"\n        };\n        return severityMap[alertType] || \"low\";\n    }\n    // Message queuing for offline clients\n    queueMessageForOfflineClients(room, message) {\n        if (!this.messageQueue.has(room)) {\n            this.messageQueue.set(room, []);\n        }\n        const queue = this.messageQueue.get(room);\n        queue.push({\n            message,\n            timestamp: Date.now()\n        });\n        // Keep only the latest messages\n        if (queue.length > this.maxQueueSize) {\n            queue.splice(0, queue.length - this.maxQueueSize);\n        }\n    }\n    sendQueuedMessages(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (!client) return;\n        // Send queued messages for subscribed rooms\n        for (const subscription of client.subscriptions){\n            const queuedMessages = this.messageQueue.get(subscription);\n            if (queuedMessages && queuedMessages.length > 0) {\n                client.socket.emit(\"queued:messages\", {\n                    room: subscription,\n                    messages: queuedMessages,\n                    count: queuedMessages.length\n                });\n                // Clear the queue after sending\n                this.messageQueue.delete(subscription);\n            }\n        }\n    }\n    // Client disconnection handling\n    handleClientDisconnection(socketId, reason) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            // Store disconnection info\n            this.disconnectionLog = this.disconnectionLog || new Map();\n            this.disconnectionLog.set(socketId, {\n                reason,\n                disconnectedAt: Date.now(),\n                subscriptions: Array.from(client.subscriptions),\n                reconnectCount: client.reconnectCount\n            });\n            // Keep only recent disconnections\n            if (this.disconnectionLog.size > 1000) {\n                const entries = Array.from(this.disconnectionLog.entries());\n                entries.sort((a, b)=>b[1].disconnectedAt - a[1].disconnectedAt);\n                this.disconnectionLog = new Map(entries.slice(0, 500));\n            }\n        }\n    }\n    // Authorization check (implement based on your auth system)\n    isAuthorized(socket) {\n        // Implement your authorization logic here\n        // For now, return true for basic functionality\n        return true;\n    }\n    // Enhanced heartbeat with health monitoring\n    startHeartbeat() {\n        setInterval(()=>{\n            const now = Date.now();\n            const staleThreshold = 5 * 60 * 1000; // 5 minutes\n            const staleClients = [];\n            for (const [socketId, client] of this.connectedClients){\n                const timeSinceLastActivity = now - client.lastActivity.getTime();\n                if (timeSinceLastActivity > staleThreshold) {\n                    console.log(`🧹 Disconnecting stale client: ${socketId} (inactive for ${Math.round(timeSinceLastActivity / 1000)}s)`);\n                    client.socket.disconnect(true);\n                    staleClients.push(socketId);\n                }\n            }\n            if (staleClients.length > 0) {\n                console.log(`🧹 Cleaned up ${staleClients.length} stale connections`);\n            }\n            // Broadcast system heartbeat every 5 minutes\n            if (now % (5 * 60 * 1000) < 60000) {\n                // Within 1 minute of 5-minute mark\n                this.broadcastSystemStatus({\n                    type: \"heartbeat\",\n                    status: \"healthy\",\n                    uptime: now - this.metrics.startTime,\n                    connections: this.metrics.currentConnections,\n                    message: \"System running normally\"\n                });\n            }\n        }, 60000); // Check every minute\n    }\n    // Health monitoring\n    startHealthMonitoring() {\n        setInterval(()=>{\n            const now = Date.now();\n            // Monitor connection health\n            for (const [socketId, health] of this.connectionHealth){\n                if (now - health.lastSeen > 2 * 60 * 1000) {\n                    // 2 minutes\n                    health.status = \"stale\";\n                }\n                if (health.latency > 1000) {\n                    // High latency\n                    health.status = \"degraded\";\n                }\n            }\n            // Clean up old health records\n            const healthEntries = Array.from(this.connectionHealth.entries());\n            const activeClients = new Set(this.connectedClients.keys());\n            for (const [socketId] of healthEntries){\n                if (!activeClients.has(socketId)) {\n                    this.connectionHealth.delete(socketId);\n                }\n            }\n        }, 30000); // Every 30 seconds\n    }\n    // Metrics collection\n    startMetricsCollection() {\n        setInterval(()=>{\n            const stats = this.getDetailedStats();\n            console.log(`📊 WebSocket Metrics: Connections: ${stats.connections}, Messages: ${stats.totalMessages}, Uptime: ${Math.round(stats.uptime / 1000)}s`);\n            // Store metrics in cache for monitoring dashboards\n            _cache_js__WEBPACK_IMPORTED_MODULE_2__.cache.set(\"websocket_metrics\", stats, 300); // 5 minutes\n            // Reset hourly counters\n            const now = Date.now();\n            if (now - this.metrics.startTime > 60 * 60 * 1000) {\n                // Every hour\n                this.resetHourlyMetrics();\n            }\n        }, 30000); // Every 30 seconds\n    }\n    // Periodic cleanup\n    startPeriodicCleanup() {\n        setInterval(()=>{\n            // Clean up rate limits\n            const now = Date.now();\n            for (const [key, limit] of this.rateLimits){\n                if (now - limit.windowStart > 60000) {\n                    // 1 minute old\n                    this.rateLimits.delete(key);\n                }\n            }\n            // Clean up old GMP alerts\n            if (this.gmpAlerts) {\n                for (const [key, alert] of this.gmpAlerts){\n                    if (now - alert.createdAt > 24 * 60 * 60 * 1000) {\n                        // 24 hours old\n                        this.gmpAlerts.delete(key);\n                    }\n                }\n            }\n            // Clean up message queues\n            for (const [room, messages] of this.messageQueue){\n                const validMessages = messages.filter((msg)=>now - msg.timestamp < 60 * 60 * 1000 // Keep messages for 1 hour\n                );\n                if (validMessages.length === 0) {\n                    this.messageQueue.delete(room);\n                } else {\n                    this.messageQueue.set(room, validMessages);\n                }\n            }\n        }, 5 * 60 * 1000); // Every 5 minutes\n    }\n    // Reset hourly metrics\n    resetHourlyMetrics() {\n        this.metrics.totalMessages = 0;\n        this.metrics.errors = 0;\n        console.log(\"\\uD83D\\uDCCA Hourly metrics reset\");\n    }\n    // Enhanced statistics\n    getDetailedStats() {\n        const connections = this.connectedClients.size;\n        const rooms = Array.from(this.roomSubscriptions.keys());\n        const totalSubscriptions = Array.from(this.roomSubscriptions.values()).reduce((sum, subs)=>sum + subs.size, 0);\n        // Calculate averages\n        const avgSubscriptionsPerClient = connections > 0 ? parseFloat((totalSubscriptions / connections).toFixed(2)) : 0;\n        // Get memory usage\n        const memoryUsage = process.memoryUsage();\n        // Calculate health stats\n        const healthyConnections = Array.from(this.connectionHealth.values()).filter((h)=>h.status === \"healthy\").length;\n        return {\n            connections,\n            rooms: rooms.length,\n            subscriptions: totalSubscriptions,\n            avgSubscriptionsPerClient,\n            totalMessages: this.metrics.totalMessages,\n            totalConnections: this.metrics.totalConnections,\n            peakConnections: this.metrics.peakConnections,\n            errors: this.metrics.errors,\n            uptime: Date.now() - this.metrics.startTime,\n            rateLimitEntries: this.rateLimits.size,\n            queuedMessages: Array.from(this.messageQueue.values()).reduce((sum, msgs)=>sum + msgs.length, 0),\n            health: {\n                healthy: healthyConnections,\n                degraded: this.connectionHealth.size - healthyConnections,\n                healthRate: this.connectionHealth.size > 0 ? parseFloat((healthyConnections / this.connectionHealth.size * 100).toFixed(2)) : 100\n            },\n            memory: {\n                rss: Math.round(memoryUsage.rss / 1024 / 1024) + \"MB\",\n                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + \"MB\",\n                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + \"MB\",\n                external: Math.round(memoryUsage.external / 1024 / 1024) + \"MB\"\n            },\n            roomDetails: Object.fromEntries(Array.from(this.roomSubscriptions.entries()).map(([room, subs])=>[\n                    room,\n                    subs.size\n                ])),\n            timestamp: Date.now()\n        };\n    }\n    // Health check\n    getHealthCheck() {\n        const stats = this.getDetailedStats();\n        const isHealthy = this.io && stats.connections >= 0 && !this.isOverloaded();\n        return {\n            status: isHealthy ? \"healthy\" : \"unhealthy\",\n            uptime: stats.uptime,\n            connections: stats.connections,\n            rooms: stats.rooms,\n            subscriptions: stats.subscriptions,\n            averageLoad: this.calculateAverageLoad(),\n            memoryUsage: stats.memory,\n            health: stats.health,\n            errors: stats.errors,\n            lastErrors: this.getRecentErrors(),\n            timestamp: Date.now()\n        };\n    }\n    isOverloaded() {\n        const stats = this.getDetailedStats();\n        const memoryUsage = process.memoryUsage();\n        // Define overload thresholds\n        const maxConnections = parseInt(process.env.WS_MAX_CONNECTIONS) || 10000;\n        const maxMemoryMB = parseInt(process.env.WS_MAX_MEMORY_MB) || 1024;\n        const maxSubscriptions = parseInt(process.env.WS_MAX_SUBSCRIPTIONS) || 50000;\n        return stats.connections > maxConnections || memoryUsage.heapUsed / 1024 / 1024 > maxMemoryMB || stats.subscriptions > maxSubscriptions || stats.errors > 100 // High error rate\n        ;\n    }\n    calculateAverageLoad() {\n        const timeDiff = (Date.now() - this.metrics.startTime) / 1000;\n        const messagesPerSecond = timeDiff > 0 ? this.metrics.totalMessages / timeDiff : 0;\n        const connectionsRatio = this.connectedClients.size / 1000; // Normalize to 1000 connections\n        return parseFloat((messagesPerSecond * connectionsRatio).toFixed(2));\n    }\n    getRecentErrors() {\n        // In a production environment, you'd implement proper error logging\n        return {\n            count: this.metrics.errors,\n            lastErrorTime: this.lastErrorTime || null\n        };\n    }\n    // Client cleanup\n    cleanupClient(socketId) {\n        const client = this.connectedClients.get(socketId);\n        if (client) {\n            // Remove from all room subscriptions\n            for (const subscription of client.subscriptions){\n                const roomSubs = this.roomSubscriptions.get(subscription);\n                if (roomSubs) {\n                    roomSubs.delete(socketId);\n                    if (roomSubs.size === 0) {\n                        this.roomSubscriptions.delete(subscription);\n                    }\n                }\n            }\n            this.connectedClients.delete(socketId);\n        }\n        // Clean up connection health\n        this.connectionHealth.delete(socketId);\n        // Clean up rate limits for this client\n        const keysToDelete = [];\n        for (const [key] of this.rateLimits){\n            if (key.startsWith(socketId)) {\n                keysToDelete.push(key);\n            }\n        }\n        keysToDelete.forEach((key)=>this.rateLimits.delete(key));\n        // Clean up GMP alerts\n        if (this.gmpAlerts) {\n            const alertKeysToDelete = [];\n            for (const [key] of this.gmpAlerts){\n                if (key.startsWith(socketId)) {\n                    alertKeysToDelete.push(key);\n                }\n            }\n            alertKeysToDelete.forEach((key)=>this.gmpAlerts.delete(key));\n        }\n    }\n    // Graceful shutdown\n    async shutdown() {\n        console.log(\"\\uD83D\\uDD0C Shutting down WebSocket service...\");\n        if (this.io) {\n            // Notify all clients about shutdown\n            await this.broadcastSystemStatus({\n                type: \"shutdown\",\n                message: \"Server is shutting down for maintenance\",\n                estimatedDowntime: \"5 minutes\"\n            }, {\n                priority: \"high\"\n            });\n            // Give clients time to receive the message\n            await new Promise((resolve)=>setTimeout(resolve, 3000));\n            // Gracefully disconnect all clients\n            for (const [socketId, client] of this.connectedClients){\n                try {\n                    client.socket.emit(\"server:shutdown\", {\n                        message: \"Server shutting down\",\n                        reconnectIn: 10000\n                    });\n                    client.socket.disconnect(true);\n                } catch (error) {\n                    console.warn(`Error disconnecting client ${socketId}:`, error.message);\n                }\n            }\n            // Close the server\n            this.io.close();\n        }\n        if (this.server) {\n            this.server.close();\n        }\n        // Clear all data structures\n        this.connectedClients.clear();\n        this.roomSubscriptions.clear();\n        this.rateLimits.clear();\n        this.connectionHealth.clear();\n        this.messageQueue.clear();\n        if (this.gmpAlerts) {\n            this.gmpAlerts.clear();\n        }\n        console.log(\"✅ WebSocket service shutdown complete\");\n    }\n}\n// Export singleton instance\nconst webSocketService = new WebSocketService();\n// Initialize and start if not in test environment\nif (true) {\n    webSocketService.initialize();\n    if (process.env.AUTO_START_WEBSOCKET !== \"false\") {\n        webSocketService.start().catch((error)=>{\n            console.error(\"Failed to start WebSocket service:\", error);\n            process.exit(1);\n        });\n    }\n}\n// Graceful shutdown handlers\nprocess.on(\"SIGTERM\", async ()=>{\n    console.log(\"Received SIGTERM, shutting down WebSocket service gracefully...\");\n    await webSocketService.shutdown();\n    process.exit(0);\n});\nprocess.on(\"SIGINT\", async ()=>{\n    console.log(\"Received SIGINT, shutting down WebSocket service gracefully...\");\n    await webSocketService.shutdown();\n    process.exit(0);\n});\n// Unhandled error handling\nprocess.on(\"uncaughtException\", async (error)=>{\n    console.error(\"Uncaught Exception in WebSocket service:\", error);\n    webSocketService.lastErrorTime = Date.now();\n    webSocketService.metrics.errors++;\n    // Attempt graceful shutdown\n    try {\n        await webSocketService.shutdown();\n    } catch (shutdownError) {\n        console.error(\"Error during emergency shutdown:\", shutdownError);\n    }\n    process.exit(1);\n});\n// Export the io instance for use in other modules\nconst io = webSocketService.io;\n// Export default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (webSocketService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/websocket.js\n");

/***/ }),

/***/ "(rsc)/./src/services/prediction-service.js":
/*!********************************************!*\
  !*** ./src/services/prediction-service.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getEnsemblePrediction: () => (/* binding */ getEnsemblePrediction),\n/* harmony export */   predictAllotmentProbability: () => (/* binding */ predictAllotmentProbability),\n/* harmony export */   predictGMPPrice: () => (/* binding */ predictGMPPrice),\n/* harmony export */   predictIPOSuccess: () => (/* binding */ predictIPOSuccess),\n/* harmony export */   predictListingGain: () => (/* binding */ predictListingGain),\n/* harmony export */   predictMarketSentiment: () => (/* binding */ predictMarketSentiment),\n/* harmony export */   predictSubscriptionTrend: () => (/* binding */ predictSubscriptionTrend),\n/* harmony export */   predictionService: () => (/* binding */ predictionService)\n/* harmony export */ });\n/* harmony import */ var _lib_cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/cache.js */ \"(rsc)/./src/lib/cache.js\");\n/* harmony import */ var _lib_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/db.js */ \"(rsc)/./src/lib/db.js\");\n/* harmony import */ var _lib_websocket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/websocket.js */ \"(rsc)/./src/lib/websocket.js\");\n/* harmony import */ var _lib_analytics_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/analytics.js */ \"(rsc)/./src/lib/analytics.js\");\n\n\n\n\nclass PredictionService {\n    constructor(){\n        this.isRunning = false;\n        this.predictionModels = new Map();\n        this.trainingData = new Map();\n        this.modelAccuracy = new Map();\n        this.activePredictions = new Map();\n        // Prediction configuration\n        this.predictionConfig = {\n            UPDATE_INTERVAL: 5 * 60 * 1000,\n            TRAINING_INTERVAL: 60 * 60 * 1000,\n            ACCURACY_CHECK_INTERVAL: 30 * 60 * 1000,\n            MIN_TRAINING_DATA: 50,\n            CONFIDENCE_THRESHOLD: 0.7,\n            PREDICTION_HORIZON: 7,\n            MAX_RETRIES: 3\n        };\n        // Prediction models and their configurations\n        this.models = {\n            LISTING_GAIN: {\n                name: \"Listing Gain Prediction\",\n                type: \"regression\",\n                features: [\n                    \"avgGMP\",\n                    \"gmpVolatility\",\n                    \"subscriptionRatio\",\n                    \"qibSubscription\",\n                    \"retailSubscription\",\n                    \"nibSubscription\",\n                    \"issueSize\",\n                    \"lotSize\",\n                    \"priceRange\",\n                    \"marketSentiment\",\n                    \"sectorPerformance\",\n                    \"marketCap\",\n                    \"promoterHolding\",\n                    \"faceValue\",\n                    \"premiumDiscount\",\n                    \"registrarReputation\",\n                    \"leadManagers\",\n                    \"gmpTrend\",\n                    \"volumeWeightedGMP\",\n                    \"daysSinceOpen\"\n                ],\n                target: \"listingGainPercentage\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            },\n            ALLOTMENT_PROBABILITY: {\n                name: \"Allotment Probability Prediction\",\n                type: \"classification\",\n                features: [\n                    \"subscriptionRatio\",\n                    \"category\",\n                    \"applicationAmount\",\n                    \"lotQuantity\",\n                    \"biddingDay\",\n                    \"userHistory\",\n                    \"applicationTime\",\n                    \"applicationMethod\",\n                    \"brokerType\",\n                    \"bankType\",\n                    \"panCardAge\",\n                    \"dematAccountAge\",\n                    \"previousAllotments\",\n                    \"investmentPattern\",\n                    \"geographicLocation\"\n                ],\n                target: \"allotmentStatus\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            },\n            SUBSCRIPTION_TREND: {\n                name: \"Subscription Trend Prediction\",\n                type: \"time_series\",\n                features: [\n                    \"currentSubscription\",\n                    \"hourlyVelocity\",\n                    \"timeRemaining\",\n                    \"dayOfWeek\",\n                    \"timeOfDay\",\n                    \"marketConditions\",\n                    \"newssentiment\",\n                    \"competitorIPOs\",\n                    \"seasonality\",\n                    \"economicIndicators\",\n                    \"sectorTrends\",\n                    \"mediaAttention\"\n                ],\n                target: \"finalSubscriptionRatio\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            },\n            GMP_PREDICTION: {\n                name: \"GMP Price Prediction\",\n                type: \"time_series\",\n                features: [\n                    \"historicalGMP\",\n                    \"volume\",\n                    \"marketSentiment\",\n                    \"newsEvents\",\n                    \"competitorPerformance\",\n                    \"marketIndices\",\n                    \"sectorPE\",\n                    \"companyPE\",\n                    \"subscriptionStatus\",\n                    \"daysToListing\",\n                    \"marketVolatility\",\n                    \"tradingVolume\"\n                ],\n                target: \"nextGMPValue\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            },\n            MARKET_SENTIMENT: {\n                name: \"Market Sentiment Prediction\",\n                type: \"classification\",\n                features: [\n                    \"newsAnalysis\",\n                    \"socialMediaMentions\",\n                    \"analystRecommendations\",\n                    \"marketTrends\",\n                    \"economicIndicators\",\n                    \"sectorPerformance\",\n                    \"competitorNews\",\n                    \"managementReputation\",\n                    \"financialMetrics\",\n                    \"industryGrowth\",\n                    \"regulatoryChanges\",\n                    \"globalMarkets\"\n                ],\n                target: \"sentimentScore\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            },\n            IPO_SUCCESS: {\n                name: \"IPO Success Prediction\",\n                type: \"classification\",\n                features: [\n                    \"companyAge\",\n                    \"revenue\",\n                    \"profitability\",\n                    \"growthRate\",\n                    \"marketShare\",\n                    \"competitorAnalysis\",\n                    \"managementTeam\",\n                    \"businessModel\",\n                    \"scalability\",\n                    \"financialHealth\",\n                    \"debtRatio\",\n                    \"cashFlow\",\n                    \"marketTiming\",\n                    \"valuationMetrics\",\n                    \"riskFactors\",\n                    \"regulatoryEnvironment\"\n                ],\n                target: \"ipoSuccessCategory\",\n                accuracy: 0,\n                lastTrained: null,\n                sampleCount: 0,\n                enabled: true\n            }\n        };\n        // Performance tracking\n        this.performance = {\n            totalPredictions: 0,\n            accuratePredictions: 0,\n            totalTrainingSessions: 0,\n            averageTrainingTime: 0,\n            averagePredictionTime: 0,\n            modelUpdates: 0,\n            lastAccuracyCheck: null\n        };\n        // Real-time prediction cache\n        this.predictionCache = new Map();\n        this.cacheTTL = {\n            LISTING_GAIN: 30 * 60 * 1000,\n            ALLOTMENT_PROBABILITY: 60 * 60 * 1000,\n            SUBSCRIPTION_TREND: 10 * 60 * 1000,\n            GMP_PREDICTION: 5 * 60 * 1000,\n            MARKET_SENTIMENT: 15 * 60 * 1000,\n            IPO_SUCCESS: 24 * 60 * 60 * 1000\n        };\n        // Active intervals\n        this.activeIntervals = new Map();\n        // Feature engineering pipeline\n        this.featureProcessors = new Map();\n        this.initializeFeatureProcessors();\n        // Model ensemble weights\n        this.ensembleWeights = new Map();\n        this.initializeEnsembleWeights();\n        console.log(\"\\uD83D\\uDD2E Prediction Service initialized\");\n    }\n    // Start comprehensive prediction service\n    async start() {\n        if (this.isRunning) {\n            console.log(\"⚠️  Prediction Service is already running\");\n            return;\n        }\n        try {\n            console.log(\"\\uD83D\\uDE80 Starting Enhanced Prediction Service...\");\n            // Initialize prediction models\n            await this.initializePredictionModels();\n            // Load training data\n            await this.loadTrainingData();\n            // Train initial models\n            await this.trainAllModels();\n            // Start prediction workflows\n            this.startPredictionWorkflows();\n            // Start model training scheduler\n            this.startModelTraining();\n            // Start accuracy monitoring\n            this.startAccuracyMonitoring();\n            // Start performance monitoring\n            this.startPerformanceMonitoring();\n            // Start maintenance tasks\n            this.startMaintenanceTasks();\n            this.isRunning = true;\n            console.log(\"✅ Enhanced Prediction Service started successfully\");\n            console.log(`🔮 ${Object.keys(this.models).length} prediction models active`);\n            // Broadcast service start\n            await _lib_websocket_js__WEBPACK_IMPORTED_MODULE_2__.webSocketService.broadcastSystemStatus({\n                type: \"prediction_service_started\",\n                models: Object.keys(this.models).length,\n                accuracy: this.getOverallAccuracy(),\n                timestamp: Date.now()\n            });\n        } catch (error) {\n            console.error(\"❌ Failed to start Prediction Service:\", error);\n            throw error;\n        }\n    }\n    // Initialize prediction models\n    async initializePredictionModels() {\n        console.log(\"\\uD83E\\uDDE0 Initializing prediction models...\");\n        try {\n            for (const [modelKey, modelConfig] of Object.entries(this.models)){\n                // Initialize model structure\n                const model = {\n                    ...modelConfig,\n                    weights: new Map(),\n                    biases: new Map(),\n                    normalizers: new Map(),\n                    featureImportance: new Map(),\n                    trainingHistory: [],\n                    predictions: [],\n                    lastPrediction: null,\n                    isReady: false\n                };\n                // Load existing model if available\n                const savedModel = await this.loadSavedModel(modelKey);\n                if (savedModel) {\n                    Object.assign(model, savedModel);\n                    model.isReady = true;\n                    console.log(`📂 Loaded saved model: ${modelKey}`);\n                }\n                this.predictionModels.set(modelKey, model);\n                // Initialize ensemble weights\n                this.ensembleWeights.set(modelKey, 1.0 / Object.keys(this.models).length);\n            }\n            console.log(`✅ Initialized ${this.predictionModels.size} prediction models`);\n        } catch (error) {\n            console.error(\"❌ Failed to initialize prediction models:\", error);\n            throw error;\n        }\n    }\n    // Load training data from database\n    async loadTrainingData() {\n        console.log(\"\\uD83D\\uDCCA Loading training data...\");\n        try {\n            // Load IPO historical data\n            const ipos = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: {\n                    status: \"listed\",\n                    listingDate: {\n                        not: null\n                    }\n                },\n                include: {\n                    gmpData: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    subscriptionData: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        }\n                    },\n                    allotmentData: true,\n                    analytics: true,\n                    watchlists: true,\n                    alerts: true\n                }\n            });\n            // Process training data for each model\n            for (const [modelKey, model] of this.predictionModels){\n                const trainingSet = await this.prepareTrainingData(modelKey, ipos);\n                this.trainingData.set(modelKey, trainingSet);\n                console.log(`📈 Prepared ${trainingSet.length} training samples for ${modelKey}`);\n            }\n            console.log(`✅ Loaded training data for ${this.predictionModels.size} models`);\n        } catch (error) {\n            console.error(\"❌ Failed to load training data:\", error);\n            throw error;\n        }\n    }\n    // Prepare training data for specific model\n    async prepareTrainingData(modelKey, ipos) {\n        const model = this.predictionModels.get(modelKey);\n        const trainingSet = [];\n        try {\n            for (const ipo of ipos){\n                // Extract features based on model configuration\n                const features = await this.extractFeatures(modelKey, ipo);\n                const target = await this.extractTarget(modelKey, ipo);\n                if (features && target !== null && target !== undefined) {\n                    trainingSet.push({\n                        id: ipo.id,\n                        symbol: ipo.symbol,\n                        features,\n                        target,\n                        timestamp: ipo.listingDate,\n                        metadata: {\n                            issueSize: ipo.issueSize,\n                            sector: ipo.sector,\n                            registrar: ipo.registrar\n                        }\n                    });\n                }\n            }\n            // Validate and clean training data\n            return this.validateTrainingData(trainingSet, model);\n        } catch (error) {\n            console.error(`Error preparing training data for ${modelKey}:`, error);\n            return [];\n        }\n    }\n    // Extract features for model training/prediction\n    async extractFeatures(modelKey, ipo) {\n        const model = this.predictionModels.get(modelKey);\n        const features = {};\n        try {\n            for (const featureName of model.features){\n                const processor = this.featureProcessors.get(featureName);\n                if (processor) {\n                    features[featureName] = await processor(ipo);\n                } else {\n                    features[featureName] = this.extractBasicFeature(featureName, ipo);\n                }\n            }\n            return features;\n        } catch (error) {\n            console.error(`Error extracting features for ${modelKey}:`, error);\n            return null;\n        }\n    }\n    // Extract target variable for training\n    async extractTarget(modelKey, ipo) {\n        const model = this.predictionModels.get(modelKey);\n        try {\n            switch(model.target){\n                case \"listingGainPercentage\":\n                    return this.calculateListingGain(ipo);\n                case \"allotmentStatus\":\n                    return this.getAllotmentStatus(ipo);\n                case \"finalSubscriptionRatio\":\n                    return this.getFinalSubscriptionRatio(ipo);\n                case \"nextGMPValue\":\n                    return this.getNextGMPValue(ipo);\n                case \"sentimentScore\":\n                    return this.getSentimentScore(ipo);\n                case \"ipoSuccessCategory\":\n                    return this.getIPOSuccessCategory(ipo);\n                default:\n                    return null;\n            }\n        } catch (error) {\n            console.error(`Error extracting target for ${modelKey}:`, error);\n            return null;\n        }\n    }\n    // Initialize feature processors\n    initializeFeatureProcessors() {\n        // GMP-related features\n        this.featureProcessors.set(\"avgGMP\", async (ipo)=>{\n            const gmpValues = ipo.gmp?.map((g)=>g.value) || [];\n            return gmpValues.length > 0 ? gmpValues.reduce((a, b)=>a + b, 0) / gmpValues.length : 0;\n        });\n        this.featureProcessors.set(\"gmpVolatility\", async (ipo)=>{\n            const gmpValues = ipo.gmp?.map((g)=>g.value) || [];\n            if (gmpValues.length < 2) return 0;\n            const mean = gmpValues.reduce((a, b)=>a + b, 0) / gmpValues.length;\n            const variance = gmpValues.reduce((sum, val)=>sum + Math.pow(val - mean, 2), 0) / gmpValues.length;\n            return Math.sqrt(variance);\n        });\n        this.featureProcessors.set(\"gmpTrend\", async (ipo)=>{\n            const gmpValues = ipo.gmp?.map((g)=>g.value) || [];\n            if (gmpValues.length < 3) return 0;\n            const recentAvg = gmpValues.slice(0, 3).reduce((a, b)=>a + b, 0) / 3;\n            const olderAvg = gmpValues.slice(-3).reduce((a, b)=>a + b, 0) / 3;\n            return olderAvg > 0 ? (recentAvg - olderAvg) / olderAvg : 0;\n        });\n        // Subscription-related features\n        this.featureProcessors.set(\"subscriptionRatio\", async (ipo)=>{\n            const latest = ipo.subscription?.[0];\n            return latest?.subscriptionRatio || 0;\n        });\n        this.featureProcessors.set(\"qibSubscription\", async (ipo)=>{\n            const qibSub = ipo.subscription?.find((s)=>s.category === \"QIB\");\n            return qibSub?.subscriptionRatio || 0;\n        });\n        this.featureProcessors.set(\"retailSubscription\", async (ipo)=>{\n            const retailSub = ipo.subscription?.find((s)=>s.category === \"RETAIL\");\n            return retailSub?.subscriptionRatio || 0;\n        });\n        // Market and timing features\n        this.featureProcessors.set(\"daysSinceOpen\", async (ipo)=>{\n            const openDate = new Date(ipo.openDate);\n            const now = new Date();\n            return Math.ceil((now - openDate) / (1000 * 60 * 60 * 24));\n        });\n        this.featureProcessors.set(\"marketSentiment\", async (ipo)=>{\n            // Mock market sentiment - in production, integrate with news/social media APIs\n            return Math.random() * 2 - 1; // Range: -1 to 1\n        });\n        this.featureProcessors.set(\"sectorPerformance\", async (ipo)=>{\n            // Mock sector performance - in production, fetch from market data APIs\n            return Math.random() * 0.2 - 0.1; // Range: -10% to 10%\n        });\n        // Company-specific features\n        this.featureProcessors.set(\"issueSize\", async (ipo)=>{\n            return Number(ipo.issueSize || 0) / 1000000000; // Normalize to billions\n        });\n        this.featureProcessors.set(\"priceRange\", async (ipo)=>{\n            return ipo.maxPrice > 0 ? (ipo.maxPrice - ipo.minPrice) / ipo.maxPrice : 0;\n        });\n        console.log(`🔧 Initialized ${this.featureProcessors.size} feature processors`);\n    }\n    // Initialize ensemble weights\n    initializeEnsembleWeights() {\n        const modelCount = Object.keys(this.models).length;\n        const baseWeight = 1.0 / modelCount;\n        for (const modelKey of Object.keys(this.models)){\n            this.ensembleWeights.set(modelKey, baseWeight);\n        }\n        console.log(\"⚖️  Initialized ensemble weights\");\n    }\n    // Train all models\n    async trainAllModels() {\n        console.log(\"\\uD83C\\uDFAF Training all prediction models...\");\n        for (const [modelKey, model] of this.predictionModels){\n            try {\n                if (model.enabled) {\n                    await this.trainModel(modelKey);\n                }\n            } catch (error) {\n                console.error(`Error training model ${modelKey}:`, error);\n            }\n        }\n        console.log(\"✅ Completed training all models\");\n    }\n    // Train individual model\n    async trainModel(modelKey) {\n        const startTime = Date.now();\n        console.log(`🧠 Training model: ${modelKey}...`);\n        try {\n            const model = this.predictionModels.get(modelKey);\n            const trainingData = this.trainingData.get(modelKey);\n            if (!trainingData || trainingData.length < this.predictionConfig.MIN_TRAINING_DATA) {\n                console.warn(`Insufficient training data for ${modelKey}: ${trainingData?.length || 0} samples`);\n                return;\n            }\n            // Split data into training and validation sets\n            const splitIndex = Math.floor(trainingData.length * 0.8);\n            const trainSet = trainingData.slice(0, splitIndex);\n            const validationSet = trainingData.slice(splitIndex);\n            // Normalize features\n            const normalizers = this.calculateNormalizers(trainSet);\n            model.normalizers = normalizers;\n            // Train based on model type\n            let trainedWeights;\n            switch(model.type){\n                case \"regression\":\n                    trainedWeights = await this.trainRegressionModel(trainSet, normalizers);\n                    break;\n                case \"classification\":\n                    trainedWeights = await this.trainClassificationModel(trainSet, normalizers);\n                    break;\n                case \"time_series\":\n                    trainedWeights = await this.trainTimeSeriesModel(trainSet, normalizers);\n                    break;\n                default:\n                    throw new Error(`Unknown model type: ${model.type}`);\n            }\n            model.weights = trainedWeights.weights;\n            model.biases = trainedWeights.biases;\n            // Calculate accuracy on validation set\n            const accuracy = await this.validateModel(modelKey, validationSet);\n            model.accuracy = accuracy;\n            // Update model metadata\n            model.lastTrained = new Date();\n            model.sampleCount = trainSet.length;\n            model.isReady = true;\n            // Store training history\n            model.trainingHistory.push({\n                timestamp: Date.now(),\n                accuracy,\n                sampleCount: trainSet.length,\n                trainingTime: Date.now() - startTime\n            });\n            // Save model\n            await this.saveModel(modelKey, model);\n            // Update ensemble weights based on accuracy\n            this.updateEnsembleWeight(modelKey, accuracy);\n            const trainingTime = Date.now() - startTime;\n            this.updateTrainingMetrics(trainingTime);\n            console.log(`✅ Trained ${modelKey}: ${accuracy.toFixed(3)} accuracy (${trainingTime}ms)`);\n        } catch (error) {\n            console.error(`❌ Failed to train model ${modelKey}:`, error);\n            throw error;\n        }\n    }\n    // Train regression model (Linear Regression)\n    async trainRegressionModel(trainSet, normalizers) {\n        const features = trainSet[0].features;\n        const featureNames = Object.keys(features);\n        const m = trainSet.length;\n        const n = featureNames.length;\n        // Initialize weights and bias\n        const weights = new Map();\n        featureNames.forEach((name)=>weights.set(name, Math.random() * 0.01));\n        let bias = 0;\n        // Gradient descent parameters\n        const learningRate = 0.01;\n        const epochs = 1000;\n        // Training loop\n        for(let epoch = 0; epoch < epochs; epoch++){\n            let totalLoss = 0;\n            const gradients = new Map();\n            let biasGradient = 0;\n            // Initialize gradients\n            featureNames.forEach((name)=>gradients.set(name, 0));\n            // Forward pass and gradient calculation\n            for (const sample of trainSet){\n                const normalizedFeatures = this.normalizeFeatures(sample.features, normalizers);\n                // Prediction\n                let prediction = bias;\n                for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                    prediction += weights.get(featureName) * value;\n                }\n                // Loss (Mean Squared Error)\n                const error = prediction - sample.target;\n                totalLoss += error * error;\n                // Gradients\n                biasGradient += error;\n                for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                    gradients.set(featureName, gradients.get(featureName) + error * value);\n                }\n            }\n            // Update weights\n            bias -= learningRate * biasGradient / m;\n            for (const featureName of featureNames){\n                const currentWeight = weights.get(featureName);\n                weights.set(featureName, currentWeight - learningRate * gradients.get(featureName) / m);\n            }\n            // Early stopping check\n            if (epoch % 100 === 0) {\n                const avgLoss = totalLoss / m;\n                if (avgLoss < 0.001) break; // Convergence threshold\n            }\n        }\n        return {\n            weights,\n            biases: new Map([\n                [\n                    \"bias\",\n                    bias\n                ]\n            ])\n        };\n    }\n    // Train classification model (Logistic Regression)\n    async trainClassificationModel(trainSet, normalizers) {\n        const features = trainSet[0].features;\n        const featureNames = Object.keys(features);\n        const m = trainSet.length;\n        // Get unique classes\n        const classes = [\n            ...new Set(trainSet.map((s)=>s.target))\n        ];\n        const numClasses = classes.length;\n        // For binary classification\n        if (numClasses === 2) {\n            return this.trainBinaryClassifier(trainSet, normalizers, featureNames);\n        }\n        // For multiclass classification (One-vs-Rest)\n        const classifierWeights = new Map();\n        const classifierBiases = new Map();\n        for (const targetClass of classes){\n            // Create binary dataset for this class\n            const binaryTrainSet = trainSet.map((sample)=>({\n                    ...sample,\n                    target: sample.target === targetClass ? 1 : 0\n                }));\n            const { weights, biases } = await this.trainBinaryClassifier(binaryTrainSet, normalizers, featureNames);\n            classifierWeights.set(targetClass, weights);\n            classifierBiases.set(targetClass, biases);\n        }\n        return {\n            weights: classifierWeights,\n            biases: classifierBiases\n        };\n    }\n    // Train binary classifier\n    async trainBinaryClassifier(trainSet, normalizers, featureNames) {\n        const weights = new Map();\n        featureNames.forEach((name)=>weights.set(name, Math.random() * 0.01));\n        let bias = 0;\n        const learningRate = 0.01;\n        const epochs = 1000;\n        for(let epoch = 0; epoch < epochs; epoch++){\n            const gradients = new Map();\n            let biasGradient = 0;\n            featureNames.forEach((name)=>gradients.set(name, 0));\n            for (const sample of trainSet){\n                const normalizedFeatures = this.normalizeFeatures(sample.features, normalizers);\n                // Prediction (sigmoid)\n                let z = bias;\n                for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                    z += weights.get(featureName) * value;\n                }\n                const prediction = 1 / (1 + Math.exp(-z));\n                // Gradient calculation\n                const error = prediction - sample.target;\n                biasGradient += error;\n                for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                    gradients.set(featureName, gradients.get(featureName) + error * value);\n                }\n            }\n            // Update weights\n            bias -= learningRate * biasGradient / trainSet.length;\n            for (const featureName of featureNames){\n                const currentWeight = weights.get(featureName);\n                weights.set(featureName, currentWeight - learningRate * gradients.get(featureName) / trainSet.length);\n            }\n        }\n        return {\n            weights,\n            biases: new Map([\n                [\n                    \"bias\",\n                    bias\n                ]\n            ])\n        };\n    }\n    // Train time series model (Moving Average + Trend)\n    async trainTimeSeriesModel(trainSet, normalizers) {\n        // Simplified time series model using moving averages\n        const windowSizes = [\n            3,\n            5,\n            10,\n            20\n        ];\n        const weights = new Map();\n        const biases = new Map();\n        // Calculate weights for different window sizes\n        let totalError = 0;\n        let sampleCount = 0;\n        for (const windowSize of windowSizes){\n            let windowError = 0;\n            let windowSamples = 0;\n            for(let i = windowSize; i < trainSet.length; i++){\n                const historicalValues = trainSet.slice(i - windowSize, i).map((s)=>s.target);\n                const movingAverage = historicalValues.reduce((a, b)=>a + b, 0) / windowSize;\n                const actualValue = trainSet[i].target;\n                const error = Math.abs(actualValue - movingAverage);\n                windowError += error;\n                windowSamples++;\n            }\n            const avgError = windowSamples > 0 ? windowError / windowSamples : Infinity;\n            weights.set(`window_${windowSize}`, 1 / (1 + avgError));\n            totalError += windowError;\n            sampleCount += windowSamples;\n        }\n        // Normalize weights\n        const totalWeight = Array.from(weights.values()).reduce((a, b)=>a + b, 0);\n        for (const [key, weight] of weights){\n            weights.set(key, weight / totalWeight);\n        }\n        biases.set(\"trend_factor\", 0.1); // Simple trend factor\n        return {\n            weights,\n            biases\n        };\n    }\n    // Validate model accuracy\n    async validateModel(modelKey, validationSet) {\n        const model = this.predictionModels.get(modelKey);\n        if (!validationSet || validationSet.length === 0) return 0;\n        let correctPredictions = 0;\n        let totalError = 0;\n        for (const sample of validationSet){\n            const prediction = await this.makeSinglePrediction(modelKey, sample.features);\n            if (model.type === \"classification\") {\n                // For classification, check if prediction matches target\n                if (prediction.value === sample.target) {\n                    correctPredictions++;\n                }\n            } else {\n                // For regression, calculate mean absolute error\n                const error = Math.abs(prediction.value - sample.target);\n                totalError += error;\n            }\n        }\n        if (model.type === \"classification\") {\n            return correctPredictions / validationSet.length;\n        } else {\n            // Convert MAE to accuracy score (inverse relationship)\n            const mae = totalError / validationSet.length;\n            return Math.max(0, 1 - mae / 100); // Normalize to 0-1 range\n        }\n    }\n    // Make single prediction\n    async makeSinglePrediction(modelKey, features) {\n        const model = this.predictionModels.get(modelKey);\n        if (!model.isReady) {\n            throw new Error(`Model ${modelKey} is not ready for predictions`);\n        }\n        try {\n            // Normalize features\n            const normalizedFeatures = this.normalizeFeatures(features, model.normalizers);\n            // Make prediction based on model type\n            let prediction;\n            switch(model.type){\n                case \"regression\":\n                    prediction = await this.predictRegression(model, normalizedFeatures);\n                    break;\n                case \"classification\":\n                    prediction = await this.predictClassification(model, normalizedFeatures);\n                    break;\n                case \"time_series\":\n                    prediction = await this.predictTimeSeries(model, normalizedFeatures, features);\n                    break;\n                default:\n                    throw new Error(`Unknown model type: ${model.type}`);\n            }\n            return {\n                value: prediction.value,\n                confidence: prediction.confidence || 0.5,\n                modelKey,\n                timestamp: Date.now(),\n                features: Object.keys(features)\n            };\n        } catch (error) {\n            console.error(`Error making prediction with ${modelKey}:`, error);\n            throw error;\n        }\n    }\n    // Predict using regression model\n    async predictRegression(model, normalizedFeatures) {\n        let prediction = model.biases.get(\"bias\") || 0;\n        for (const [featureName, value] of Object.entries(normalizedFeatures)){\n            const weight = model.weights.get(featureName) || 0;\n            prediction += weight * value;\n        }\n        // Calculate confidence based on feature importance and model accuracy\n        const confidence = Math.min(0.95, model.accuracy * 0.8 + 0.2);\n        return {\n            value: prediction,\n            confidence\n        };\n    }\n    // Predict using classification model\n    async predictClassification(model, normalizedFeatures) {\n        if (model.weights instanceof Map && model.weights.size > 1) {\n            // Multiclass classification\n            const classScores = new Map();\n            for (const [className, classWeights] of model.weights){\n                let score = model.biases.get(className)?.get(\"bias\") || 0;\n                for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                    const weight = classWeights.get(featureName) || 0;\n                    score += weight * value;\n                }\n                // Apply sigmoid for probability\n                const probability = 1 / (1 + Math.exp(-score));\n                classScores.set(className, probability);\n            }\n            // Find class with highest probability\n            const bestClass = Array.from(classScores.entries()).reduce((a, b)=>a[1] > b[1] ? a : b);\n            return {\n                value: bestClass[0],\n                confidence: bestClass[1],\n                probabilities: Object.fromEntries(classScores)\n            };\n        } else {\n            // Binary classification\n            let score = model.biases.get(\"bias\") || 0;\n            for (const [featureName, value] of Object.entries(normalizedFeatures)){\n                const weight = model.weights.get(featureName) || 0;\n                score += weight * value;\n            }\n            const probability = 1 / (1 + Math.exp(-score));\n            return {\n                value: probability > 0.5 ? 1 : 0,\n                confidence: Math.abs(probability - 0.5) * 2,\n                probability\n            };\n        }\n    }\n    // Predict using time series model\n    async predictTimeSeries(model, normalizedFeatures, originalFeatures) {\n        let prediction = 0;\n        let totalWeight = 0;\n        // Use weighted moving averages\n        for (const [weightKey, weight] of model.weights){\n            if (weightKey.startsWith(\"window_\")) {\n                const windowSize = parseInt(weightKey.split(\"_\")[1]);\n                // For simplicity, use current value as base\n                // In production, you'd use actual historical data\n                const currentValue = originalFeatures.historicalGMP || originalFeatures.currentValue || 0;\n                prediction += weight * currentValue;\n                totalWeight += weight;\n            }\n        }\n        // Apply trend factor\n        const trendFactor = model.biases.get(\"trend_factor\") || 0;\n        prediction *= 1 + trendFactor;\n        const confidence = Math.min(0.9, model.accuracy * 0.7 + 0.3);\n        return {\n            value: prediction,\n            confidence\n        };\n    }\n    // Start prediction workflows\n    startPredictionWorkflows() {\n        // Real-time prediction updates\n        const predictionInterval = setInterval(async ()=>{\n            await this.updateRealTimePredictions();\n        }, this.predictionConfig.UPDATE_INTERVAL);\n        this.activeIntervals.set(\"PREDICTIONS\", predictionInterval);\n        console.log(\"\\uD83D\\uDD2E Started prediction workflows\");\n    }\n    // Update real-time predictions\n    async updateRealTimePredictions() {\n        try {\n            // Get active IPOs that need predictions\n            const activeIPOs = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findMany({\n                where: {\n                    isActive: true,\n                    status: {\n                        in: [\n                            \"upcoming\",\n                            \"open\",\n                            \"closed\"\n                        ]\n                    }\n                },\n                include: {\n                    gmp: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 20\n                    },\n                    subscription: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 20\n                    },\n                    analytics: true\n                }\n            });\n            let predictionsUpdated = 0;\n            for (const ipo of activeIPOs){\n                try {\n                    // Update predictions for each model\n                    for (const [modelKey, model] of this.predictionModels){\n                        if (model.isReady && model.enabled) {\n                            await this.updateIPOPrediction(modelKey, ipo);\n                            predictionsUpdated++;\n                        }\n                    }\n                } catch (error) {\n                    console.error(`Error updating predictions for IPO ${ipo.symbol}:`, error);\n                }\n            }\n            console.log(`🔮 Updated ${predictionsUpdated} predictions for ${activeIPOs.length} IPOs`);\n        } catch (error) {\n            console.error(\"Error updating real-time predictions:\", error);\n        }\n    }\n    // Update prediction for specific IPO and model\n    async updateIPOPrediction(modelKey, ipo) {\n        try {\n            // Check cache first\n            const cacheKey = `prediction:${modelKey}:${ipo.id}`;\n            const cached = this.predictionCache.get(cacheKey);\n            if (cached && Date.now() - cached.timestamp < this.cacheTTL[modelKey]) {\n                return cached.prediction;\n            }\n            // Extract features for current IPO\n            const features = await this.extractFeatures(modelKey, ipo);\n            if (!features) return null;\n            // Make prediction\n            const prediction = await this.makeSinglePrediction(modelKey, features);\n            // Cache prediction\n            this.predictionCache.set(cacheKey, {\n                prediction,\n                timestamp: Date.now()\n            });\n            // Store prediction in database\n            await this.storePrediction(ipo.id, modelKey, prediction);\n            // Broadcast prediction update\n            await this.broadcastPredictionUpdate(ipo, modelKey, prediction);\n            return prediction;\n        } catch (error) {\n            console.error(`Error updating prediction for ${modelKey}:`, error);\n            return null;\n        }\n    }\n    // Store prediction in database\n    async storePrediction(ipoId, modelKey, prediction) {\n        try {\n            await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.prediction.upsert({\n                where: {\n                    ipoId_modelType: {\n                        ipoId,\n                        modelType: modelKey\n                    }\n                },\n                update: {\n                    predictedValue: prediction.value,\n                    confidence: prediction.confidence,\n                    features: JSON.stringify(prediction.features),\n                    updatedAt: new Date()\n                },\n                create: {\n                    ipoId,\n                    modelType: modelKey,\n                    predictedValue: prediction.value,\n                    confidence: prediction.confidence,\n                    features: JSON.stringify(prediction.features),\n                    createdAt: new Date()\n                }\n            });\n        } catch (error) {\n            console.error(\"Error storing prediction:\", error);\n        }\n    }\n    // Broadcast prediction update via WebSocket\n    async broadcastPredictionUpdate(ipo, modelKey, prediction) {\n        try {\n            const updateData = {\n                ipoId: ipo.id,\n                symbol: ipo.symbol,\n                modelType: modelKey,\n                prediction: prediction.value,\n                confidence: prediction.confidence,\n                timestamp: Date.now(),\n                features: prediction.features\n            };\n            await _lib_websocket_js__WEBPACK_IMPORTED_MODULE_2__.webSocketService.broadcastAnalyticsUpdate(ipo.id, {\n                predictions: {\n                    [modelKey]: updateData\n                },\n                type: \"prediction_update\"\n            });\n        } catch (error) {\n            console.error(\"Error broadcasting prediction update:\", error);\n        }\n    }\n    // Public API methods\n    async predictListingGain(ipoId) {\n        return await this.getPrediction(ipoId, \"LISTING_GAIN\");\n    }\n    async predictAllotmentProbability(userId, ipoId, applicationData) {\n        const features = {\n            ...applicationData,\n            userHistory: await this.getUserHistory(userId),\n            applicationTime: Date.now()\n        };\n        return await this.makeSinglePrediction(\"ALLOTMENT_PROBABILITY\", features);\n    }\n    async predictSubscriptionTrend(ipoId) {\n        return await this.getPrediction(ipoId, \"SUBSCRIPTION_TREND\");\n    }\n    async predictGMPPrice(ipoId, horizon = 1) {\n        return await this.getPrediction(ipoId, \"GMP_PREDICTION\");\n    }\n    async predictMarketSentiment(ipoId) {\n        return await this.getPrediction(ipoId, \"MARKET_SENTIMENT\");\n    }\n    async predictIPOSuccess(ipoId) {\n        return await this.getPrediction(ipoId, \"IPO_SUCCESS\");\n    }\n    // Get ensemble prediction combining multiple models\n    async getEnsemblePrediction(ipoId, predictionType) {\n        try {\n            const relevantModels = this.getRelevantModels(predictionType);\n            const predictions = [];\n            let totalWeight = 0;\n            for (const modelKey of relevantModels){\n                try {\n                    const prediction = await this.getPrediction(ipoId, modelKey);\n                    if (prediction && prediction.confidence > this.predictionConfig.CONFIDENCE_THRESHOLD) {\n                        const weight = this.ensembleWeights.get(modelKey) * prediction.confidence;\n                        predictions.push({\n                            prediction,\n                            weight\n                        });\n                        totalWeight += weight;\n                    }\n                } catch (error) {\n                    console.warn(`Model ${modelKey} failed:`, error.message);\n                }\n            }\n            if (predictions.length === 0) {\n                throw new Error(\"No valid predictions available\");\n            }\n            // Calculate weighted average\n            let ensembleValue = 0;\n            let ensembleConfidence = 0;\n            for (const { prediction, weight } of predictions){\n                const normalizedWeight = weight / totalWeight;\n                ensembleValue += prediction.value * normalizedWeight;\n                ensembleConfidence += prediction.confidence * normalizedWeight;\n            }\n            return {\n                value: ensembleValue,\n                confidence: ensembleConfidence,\n                modelCount: predictions.length,\n                models: predictions.map((p)=>p.prediction.modelKey),\n                ensemble: true,\n                timestamp: Date.now()\n            };\n        } catch (error) {\n            console.error(\"Error getting ensemble prediction:\", error);\n            throw error;\n        }\n    }\n    // Get prediction from cache or generate new one\n    async getPrediction(ipoId, modelKey) {\n        try {\n            const cacheKey = `prediction:${modelKey}:${ipoId}`;\n            const cached = this.predictionCache.get(cacheKey);\n            if (cached && Date.now() - cached.timestamp < this.cacheTTL[modelKey]) {\n                return cached.prediction;\n            }\n            // Get IPO data\n            const ipo = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.iPO.findUnique({\n                where: {\n                    id: ipoId\n                },\n                include: {\n                    gmp: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 20\n                    },\n                    subscription: {\n                        orderBy: {\n                            timestamp: \"desc\"\n                        },\n                        take: 20\n                    },\n                    analytics: true\n                }\n            });\n            if (!ipo) {\n                throw new Error(`IPO not found: ${ipoId}`);\n            }\n            return await this.updateIPOPrediction(modelKey, ipo);\n        } catch (error) {\n            console.error(`Error getting prediction for ${modelKey}:`, error);\n            throw error;\n        }\n    }\n    // Helper methods\n    calculateNormalizers(trainSet) {\n        const normalizers = new Map();\n        const featureNames = Object.keys(trainSet[0].features);\n        for (const featureName of featureNames){\n            const values = trainSet.map((sample)=>sample.features[featureName]).filter((v)=>v !== null && v !== undefined);\n            if (values.length > 0) {\n                const min = Math.min(...values);\n                const max = Math.max(...values);\n                const mean = values.reduce((a, b)=>a + b, 0) / values.length;\n                const std = Math.sqrt(values.reduce((sum, val)=>sum + Math.pow(val - mean, 2), 0) / values.length);\n                normalizers.set(featureName, {\n                    min,\n                    max,\n                    mean,\n                    std\n                });\n            }\n        }\n        return normalizers;\n    }\n    normalizeFeatures(features, normalizers) {\n        const normalized = {};\n        for (const [featureName, value] of Object.entries(features)){\n            const norm = normalizers.get(featureName);\n            if (norm && value !== null && value !== undefined) {\n                // Z-score normalization\n                normalized[featureName] = norm.std > 0 ? (value - norm.mean) / norm.std : 0;\n            } else {\n                normalized[featureName] = 0;\n            }\n        }\n        return normalized;\n    }\n    extractBasicFeature(featureName, ipo) {\n        switch(featureName){\n            case \"lotSize\":\n                return ipo.lotSize || 0;\n            case \"faceValue\":\n                return ipo.faceValue || 0;\n            case \"minPrice\":\n                return ipo.minPrice || 0;\n            case \"maxPrice\":\n                return ipo.maxPrice || 0;\n            default:\n                return 0;\n        }\n    }\n    // Target extraction methods\n    calculateListingGain(ipo) {\n        if (!ipo.listingPrice || !ipo.maxPrice) return null;\n        return (ipo.listingPrice - ipo.maxPrice) / ipo.maxPrice * 100;\n    }\n    getAllotmentStatus(ipo) {\n        // This would come from actual allotment data\n        return Math.random() > 0.3 ? \"allotted\" : \"not_allotted\";\n    }\n    getFinalSubscriptionRatio(ipo) {\n        const finalSub = ipo.subscription?.find((s)=>s.category === \"OVERALL\") || ipo.subscription?.[0];\n        return finalSub?.subscriptionRatio || 0;\n    }\n    getNextGMPValue(ipo) {\n        const gmpValues = ipo.gmp?.map((g)=>g.value) || [];\n        return gmpValues.length > 0 ? gmpValues[0] : 0;\n    }\n    getSentimentScore(ipo) {\n        // Mock sentiment - in production, analyze news/social media\n        return Math.random() * 2 - 1; // -1 to 1\n    }\n    getIPOSuccessCategory(ipo) {\n        const gain = this.calculateListingGain(ipo);\n        if (gain === null) return \"unknown\";\n        if (gain > 20) return \"highly_successful\";\n        if (gain > 0) return \"successful\";\n        return \"unsuccessful\";\n    }\n    validateTrainingData(trainingSet, model) {\n        return trainingSet.filter((sample)=>{\n            // Remove samples with missing critical features\n            const features = sample.features;\n            const requiredFeatures = model.features.slice(0, 5); // Top 5 critical features\n            return requiredFeatures.every((feature)=>features[feature] !== null && features[feature] !== undefined && !isNaN(features[feature]));\n        });\n    }\n    getRelevantModels(predictionType) {\n        const modelGroups = {\n            listing_performance: [\n                \"LISTING_GAIN\",\n                \"GMP_PREDICTION\",\n                \"MARKET_SENTIMENT\"\n            ],\n            subscription_analysis: [\n                \"SUBSCRIPTION_TREND\",\n                \"MARKET_SENTIMENT\"\n            ],\n            allotment_chances: [\n                \"ALLOTMENT_PROBABILITY\",\n                \"SUBSCRIPTION_TREND\"\n            ],\n            overall_success: [\n                \"IPO_SUCCESS\",\n                \"LISTING_GAIN\",\n                \"MARKET_SENTIMENT\"\n            ]\n        };\n        return modelGroups[predictionType] || [\n            predictionType\n        ];\n    }\n    async getUserHistory(userId) {\n        try {\n            const applications = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.userApplication.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    ipo: true\n                }\n            });\n            return {\n                totalApplications: applications.length,\n                allottedCount: applications.filter((a)=>a.allotmentStatus === \"allotted\").length,\n                averageAmount: applications.reduce((sum, a)=>sum + (a.amount || 0), 0) / applications.length,\n                recentActivity: applications.length > 0 ? Date.now() - new Date(applications[0].submittedAt).getTime() : 0\n            };\n        } catch (error) {\n            return {\n                totalApplications: 0,\n                allottedCount: 0,\n                averageAmount: 0,\n                recentActivity: 0\n            };\n        }\n    }\n    updateEnsembleWeight(modelKey, accuracy) {\n        const currentWeight = this.ensembleWeights.get(modelKey);\n        const newWeight = currentWeight * 0.7 + accuracy * 0.3; // Weighted update\n        this.ensembleWeights.set(modelKey, newWeight);\n        // Normalize weights\n        const totalWeight = Array.from(this.ensembleWeights.values()).reduce((a, b)=>a + b, 0);\n        for (const [key, weight] of this.ensembleWeights){\n            this.ensembleWeights.set(key, weight / totalWeight);\n        }\n    }\n    // Model persistence\n    async saveModel(modelKey, model) {\n        try {\n            const modelData = {\n                modelKey,\n                weights: Object.fromEntries(model.weights),\n                biases: Object.fromEntries(model.biases),\n                normalizers: Object.fromEntries(model.normalizers),\n                accuracy: model.accuracy,\n                sampleCount: model.sampleCount,\n                lastTrained: model.lastTrained\n            };\n            await _lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.set(_lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.key(\"MODEL\", `saved:${modelKey}`), modelData, 7 * 24 * 60 * 60 // 7 days\n            );\n        } catch (error) {\n            console.error(`Error saving model ${modelKey}:`, error);\n        }\n    }\n    async loadSavedModel(modelKey) {\n        try {\n            const modelData = await _lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.get(_lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.key(\"MODEL\", `saved:${modelKey}`));\n            if (modelData) {\n                return {\n                    weights: new Map(Object.entries(modelData.weights)),\n                    biases: new Map(Object.entries(modelData.biases)),\n                    normalizers: new Map(Object.entries(modelData.normalizers)),\n                    accuracy: modelData.accuracy,\n                    sampleCount: modelData.sampleCount,\n                    lastTrained: new Date(modelData.lastTrained)\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(`Error loading model ${modelKey}:`, error);\n            return null;\n        }\n    }\n    // Model training scheduler\n    startModelTraining() {\n        const trainingInterval = setInterval(async ()=>{\n            await this.scheduledModelTraining();\n        }, this.predictionConfig.TRAINING_INTERVAL);\n        this.activeIntervals.set(\"TRAINING\", trainingInterval);\n        console.log(\"\\uD83C\\uDFAF Started model training scheduler\");\n    }\n    async scheduledModelTraining() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Running scheduled model training...\");\n            // Reload training data\n            await this.loadTrainingData();\n            // Train models that need updates\n            for (const [modelKey, model] of this.predictionModels){\n                if (model.enabled && this.shouldRetrainModel(model)) {\n                    await this.trainModel(modelKey);\n                }\n            }\n            this.performance.totalTrainingSessions++;\n        } catch (error) {\n            console.error(\"Error in scheduled model training:\", error);\n        }\n    }\n    shouldRetrainModel(model) {\n        if (!model.lastTrained) return true;\n        const daysSinceTraining = (Date.now() - model.lastTrained.getTime()) / (1000 * 60 * 60 * 24);\n        const trainingDataSize = this.trainingData.get(model.name)?.length || 0;\n        // Retrain if:\n        // - Model hasn't been trained in 7 days\n        // - Training data has grown significantly\n        // - Model accuracy is below threshold\n        return daysSinceTraining > 7 || trainingDataSize > model.sampleCount * 1.2 || model.accuracy < 0.6;\n    }\n    // Accuracy monitoring\n    startAccuracyMonitoring() {\n        const accuracyInterval = setInterval(async ()=>{\n            await this.checkPredictionAccuracy();\n        }, this.predictionConfig.ACCURACY_CHECK_INTERVAL);\n        this.activeIntervals.set(\"ACCURACY_CHECK\", accuracyInterval);\n        console.log(\"\\uD83D\\uDCCA Started accuracy monitoring\");\n    }\n    async checkPredictionAccuracy() {\n        try {\n            console.log(\"\\uD83D\\uDCCA Checking prediction accuracy...\");\n            // Get recent predictions with actual outcomes\n            const recentPredictions = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.prediction.findMany({\n                where: {\n                    createdAt: {\n                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n                    }\n                },\n                include: {\n                    ipo: {\n                        select: {\n                            listingPrice: true,\n                            maxPrice: true,\n                            status: true\n                        }\n                    }\n                }\n            });\n            const accuracyByModel = new Map();\n            for (const prediction of recentPredictions){\n                if (prediction.ipo.status === \"listed\" && prediction.ipo.listingPrice) {\n                    const actualGain = this.calculateListingGain(prediction.ipo);\n                    if (actualGain !== null) {\n                        const error = Math.abs(prediction.predictedValue - actualGain);\n                        const accuracy = Math.max(0, 1 - error / 100); // Convert to 0-1 range\n                        if (!accuracyByModel.has(prediction.modelType)) {\n                            accuracyByModel.set(prediction.modelType, []);\n                        }\n                        accuracyByModel.get(prediction.modelType).push(accuracy);\n                    }\n                }\n            }\n            // Update model accuracies\n            for (const [modelKey, accuracies] of accuracyByModel){\n                const avgAccuracy = accuracies.reduce((a, b)=>a + b, 0) / accuracies.length;\n                const model = this.predictionModels.get(modelKey);\n                if (model) {\n                    model.accuracy = avgAccuracy;\n                    this.updateEnsembleWeight(modelKey, avgAccuracy);\n                }\n            }\n            this.performance.lastAccuracyCheck = Date.now();\n        } catch (error) {\n            console.error(\"Error checking prediction accuracy:\", error);\n        }\n    }\n    // Performance monitoring\n    startPerformanceMonitoring() {\n        const performanceInterval = setInterval(()=>{\n            this.logPerformanceMetrics();\n        }, 5 * 60 * 1000); // Every 5 minutes\n        this.activeIntervals.set(\"PERFORMANCE\", performanceInterval);\n        console.log(\"\\uD83D\\uDCCA Started prediction performance monitoring\");\n    }\n    updateTrainingMetrics(trainingTime) {\n        this.performance.averageTrainingTime = (this.performance.averageTrainingTime * this.performance.totalTrainingSessions + trainingTime) / (this.performance.totalTrainingSessions + 1);\n    }\n    logPerformanceMetrics() {\n        const metrics = this.getPerformanceMetrics();\n        console.log(\"\\uD83D\\uDCCA Prediction Service Performance:\", metrics);\n        // Store metrics in cache\n        _lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.set(\"prediction_service_metrics\", metrics, 300);\n    }\n    getPerformanceMetrics() {\n        const overallAccuracy = this.getOverallAccuracy();\n        const modelStatus = {};\n        for (const [modelKey, model] of this.predictionModels){\n            modelStatus[modelKey] = {\n                accuracy: model.accuracy,\n                isReady: model.isReady,\n                sampleCount: model.sampleCount,\n                lastTrained: model.lastTrained?.toISOString()\n            };\n        }\n        return {\n            totalPredictions: this.performance.totalPredictions,\n            overallAccuracy: `${(overallAccuracy * 100).toFixed(2)}%`,\n            totalTrainingSessions: this.performance.totalTrainingSessions,\n            averageTrainingTime: Math.round(this.performance.averageTrainingTime),\n            modelUpdates: this.performance.modelUpdates,\n            activePredictions: this.predictionCache.size,\n            modelStatus,\n            lastAccuracyCheck: this.performance.lastAccuracyCheck ? new Date(this.performance.lastAccuracyCheck).toISOString() : null\n        };\n    }\n    getOverallAccuracy() {\n        const accuracies = Array.from(this.predictionModels.values()).filter((model)=>model.isReady).map((model)=>model.accuracy);\n        return accuracies.length > 0 ? accuracies.reduce((a, b)=>a + b, 0) / accuracies.length : 0;\n    }\n    // Maintenance tasks\n    startMaintenanceTasks() {\n        const maintenanceInterval = setInterval(()=>{\n            this.performMaintenance();\n        }, 60 * 60 * 1000); // Every hour\n        this.activeIntervals.set(\"MAINTENANCE\", maintenanceInterval);\n        console.log(\"\\uD83E\\uDDF9 Started prediction service maintenance tasks\");\n    }\n    performMaintenance() {\n        const now = Date.now();\n        // Clean up old cached predictions\n        for (const [cacheKey, data] of this.predictionCache){\n            const modelKey = cacheKey.split(\":\")[1];\n            const ttl = this.cacheTTL[modelKey] || 30 * 60 * 1000;\n            if (now - data.timestamp > ttl * 2) {\n                // Keep for 2x TTL\n                this.predictionCache.delete(cacheKey);\n            }\n        }\n        // Clean up old model training history\n        for (const model of this.predictionModels.values()){\n            if (model.trainingHistory.length > 100) {\n                model.trainingHistory = model.trainingHistory.slice(-50); // Keep last 50\n            }\n        }\n        console.log(\"\\uD83E\\uDDF9 Prediction service maintenance completed\");\n    }\n    // Service status and health check\n    getStatus() {\n        return {\n            isRunning: this.isRunning,\n            models: Object.keys(this.models).length,\n            readyModels: Array.from(this.predictionModels.values()).filter((m)=>m.isReady).length,\n            performance: this.getPerformanceMetrics(),\n            activePredictions: this.predictionCache.size,\n            ensembleWeights: Object.fromEntries(this.ensembleWeights),\n            activeIntervals: this.activeIntervals.size,\n            timestamp: new Date().toISOString()\n        };\n    }\n    async healthCheck() {\n        try {\n            // Check model readiness\n            const readyModels = Array.from(this.predictionModels.values()).filter((m)=>m.isReady).length;\n            const totalModels = this.predictionModels.size;\n            // Check database connectivity\n            const dbCheck = await _lib_db_js__WEBPACK_IMPORTED_MODULE_1__.prisma.prediction.findFirst();\n            // Check cache connectivity\n            const cacheCheck = await _lib_cache_js__WEBPACK_IMPORTED_MODULE_0__.cache.healthCheck();\n            const isHealthy = this.isRunning && readyModels > 0 && dbCheck !== undefined && cacheCheck.status === \"healthy\";\n            return {\n                status: isHealthy ? \"healthy\" : \"degraded\",\n                isRunning: this.isRunning,\n                database: dbCheck !== undefined ? \"connected\" : \"disconnected\",\n                cache: cacheCheck.status,\n                models: {\n                    total: totalModels,\n                    ready: readyModels,\n                    readiness: `${readyModels}/${totalModels}`\n                },\n                performance: this.getPerformanceMetrics(),\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                status: \"unhealthy\",\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Stop service gracefully\n    async stop() {\n        console.log(\"\\uD83D\\uDED1 Stopping Prediction Service...\");\n        this.isRunning = false;\n        // Clear all active intervals\n        for (const [name, intervalId] of this.activeIntervals){\n            clearInterval(intervalId);\n            console.log(`⏹️  Stopped ${name} interval`);\n        }\n        this.activeIntervals.clear();\n        // Save all models\n        for (const [modelKey, model] of this.predictionModels){\n            try {\n                if (model.isReady) {\n                    await this.saveModel(modelKey, model);\n                }\n            } catch (error) {\n                console.error(`Error saving model ${modelKey}:`, error);\n            }\n        }\n        // Broadcast shutdown notification\n        try {\n            await _lib_websocket_js__WEBPACK_IMPORTED_MODULE_2__.webSocketService.broadcastSystemStatus({\n                type: \"prediction_service_shutdown\",\n                message: \"Prediction service has been stopped\",\n                finalMetrics: this.getPerformanceMetrics(),\n                timestamp: Date.now()\n            }, {\n                priority: \"high\"\n            });\n        } catch (error) {\n            console.error(\"Error broadcasting shutdown:\", error);\n        }\n        // Clear data structures\n        this.predictionModels.clear();\n        this.trainingData.clear();\n        this.modelAccuracy.clear();\n        this.activePredictions.clear();\n        this.predictionCache.clear();\n        this.featureProcessors.clear();\n        this.ensembleWeights.clear();\n        console.log(\"✅ Prediction Service stopped gracefully\");\n        console.log(\"\\uD83D\\uDCCA Final Performance Metrics:\", this.getPerformanceMetrics());\n    }\n}\n// Export singleton instance\nconst predictionService = new PredictionService();\n// Auto-start if not in test environment\nif ( true && process.env.AUTO_START_PREDICTION_SERVICE !== \"false\") {\n    predictionService.start().catch((error)=>{\n        console.error(\"Failed to auto-start Prediction Service:\", error);\n        process.exit(1);\n    });\n}\n// Graceful shutdown handlers\nconst gracefulShutdown = async (signal)=>{\n    console.log(`🛑 Received ${signal}, shutting down Prediction Service gracefully...`);\n    try {\n        await predictionService.stop();\n        process.exit(0);\n    } catch (error) {\n        console.error(\"Error during graceful shutdown:\", error);\n        process.exit(1);\n    }\n};\nprocess.on(\"SIGTERM\", ()=>gracefulShutdown(\"SIGTERM\"));\nprocess.on(\"SIGINT\", ()=>gracefulShutdown(\"SIGINT\"));\nprocess.on(\"SIGQUIT\", ()=>gracefulShutdown(\"SIGQUIT\"));\n// Export additional utilities\nconst { predictListingGain, predictAllotmentProbability, predictSubscriptionTrend, predictGMPPrice, predictMarketSentiment, predictIPOSuccess, getEnsemblePrediction } = predictionService;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (predictionService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/prediction-service.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/object-assign","vendor-chunks/ms","vendor-chunks/uncrypto","vendor-chunks/engine.io","vendor-chunks/socket.io","vendor-chunks/socket.io-adapter","vendor-chunks/socket.io-parser","vendor-chunks/engine.io-parser","vendor-chunks/cookie","vendor-chunks/cors","vendor-chunks/@socket.io","vendor-chunks/vary","vendor-chunks/supports-color","vendor-chunks/base64id","vendor-chunks/has-flag"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fipos%2Froute&page=%2Fapi%2Fipos%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fipos%2Froute.js&appDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Chp%5COneDrive%5CDesktop%5CIPOs%5Cipo-tracker&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();